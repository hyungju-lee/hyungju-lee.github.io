[

{
"id": "-javascript-2020-04-12-javascript16",
"title": "2.2.2 터미널",
"author": null,
"tags": [],
"url": "/javascript/2020/04/12/javascript16/",
"date": "2020-04-12",
"content": "이 장을 따라 하는 동안에는 터미널(명령줄 또는 명령어 프롬프트라고도 합니다.) 에서 작업하게 됩니다.터미널은 텍스트 명령으로 컴퓨터를 조작하는 방법으로 프로그래머들은 터미널을 즐겨 사용합니다.물론 터미널을 사용하지 않아도 필요한 일은 다 할 수 있지만,필자는 터미널 사용법을 꼭 익히는 게 중요하다고 생각합니다.상당히 많은 책과 교재들이 터미널을 사용하도록 쓰여 있고, 터미널에서 사용하도록 설계된 도구들도 많기 때문입니다.가장 많이 쓰이는 터미널은 배시(bash) 라 불리는 셸입니다.리눅스와 macOS 컴퓨터에서는 기본적으로 배시를 사용합니다.윈도우에도 터미널이 있지만, 곧 설치할 깃에서는 따로 배시 터미널을 제공합니다.필자는 이 터미널을 사용하길 권합니다.이 책에서는 계속 배시를 사용합니다.리눅스나 macOS를 사용한다면 터미널 프로그램을 찾아보십시오.윈도우를 사용한다면 깃을 설치한 후 Git bash 프로그램을 찾아보십시오.터미널을 시작하면 커서가 깜박이는 프롬프트를 볼 수 있습니다.여기에 명령어를 입력합니다.기본 프롬프트에는 컴퓨터 이름이나 현재 디렉터리 이름이 들어가 있는 경우가 많고,일반적으로 달러 기호($)로 끝납니다.따라서 이 장의 코드 샘플에 달러 기호가 있으면 터미널이라고 생각하면 됩니다.달러 기호 다음에 있는 내용은 직접 입력해야 합니다.예를 들어 현재 디렉터리의 파일 리스트를 보려면 프롬프트에서 ls를 입력합니다.$ ls배시에서는 디렉터리 이름을 슬래시(/)로 구분합니다.윈도우에서는 디렉터리 이름을 역슬레시()로 구분하지만, 깃 배시에서는 역슬래시를 슬래시로 바꿔 표현합니다.배시에서는 홈 디렉터리(일반적으로 파일을 저장하는 디렉터리)를 ~로 표시합니다.이 장을 진행하려면 다른 디렉터리로 이동하는 명령(cd)과 새 디렉터리를 만드는 명령(mkdir)을 알고 있어야 합니다.예를 들어 홈 디렉터리로 이동하려면 다음과 같이 입력합니다.$ cd ~pwd 명령어는 현재 디렉터리 경로를 출력합니다.$ pwd현재 디렉터리에 서브디렉터리 test를 만들려면 다음과 같이 입력합니다.$ mkdir test새로 만든 디렉터리로 이동하려면 다음과 같이 입력합니다.$ cd test마침표 두 개(..)는 부모 디렉터리입니다.즉, 한 단계 위 디렉터리로 이동하려면 다음과 같이 입력합니다.앞의 명령어를 따라 했다면 홈 디렉터리로 돌아가게 됩니다.$ cd ..터미널에서 사용할 수 있는 명령어는 아주 많지만, 2장을 진행하기 위해서는 이들 명령어만 알아도 충분합니다.터미널에 대해 더 알고 싶다면 콘솔 기초 강의를 보십시오."
}, 

{
"id": "-javascript-2020-04-12-javascript15",
"title": "2.2.1 깃 설치",
"author": null,
"tags": [],
"url": "/javascript/2020/04/12/javascript15/",
"date": "2020-04-12",
"content": "아직 시스템에 깃을 설치하지 않았다면 깃 홈페이지(https://git-scm.com/)에서 운영체제에 맞는 설치 파일과 설치방법을 찾을 수 있습니다."
}, 

{
"id": "-javascript-2020-04-12-javascript14",
"title": "2.2 ES6 기능",
"author": null,
"tags": [],
"url": "/javascript/2020/04/12/javascript14/",
"date": "2020-04-12",
"content": "ES6에는 새 기능이 너무 많아서 트랜스컴파일러조차 전부 지원하지 못할 정도입니다.뉴욕에사는 개발자 캉각스는 이 혼란을 타개하기 위해 ES6(와 ES7)의 기능별 호환성 테이블을 운영하고 있습니다.2015년 8월 기준으로, 가장 많은 기능을 지원하는 바벨(Babel) 조차 72%에 불과합니다.힘 빠지는 말일 수도 있지만, 바벨은 가장 중요한 기능부터 차례로 지원하고 잇으며, 이 책에서 설명하는 기능은 모두 지원합니다.트랜스컴파일을 시작하기 전에 약간의 준비 작업이 필요합니다.필요한 도구를 모두 갖춰야 하고, 새 프로젝트에서 이들 도구를 사용하도록 설정하는 방법을 배워햐 합니다.새 프로젝트를 설정하는 방법은 몇 번만 해보면 무의식적으로 하게 될 겁니다.그때까지는, 새프로젝트를 시작할 때 이 장을 참고하십시오."
}, 

{
"id": "-javascript-2020-04-12-javascript13",
"title": "2.1 ES6 사용하기",
"author": null,
"tags": [],
"url": "/javascript/2020/04/12/javascript13/",
"date": "2020-04-12",
"content": "좋은 소식과 나쁜 소식이 있습니다.좋은 소식은 ES6가 자바스크립트를 즐겁고 흥미롭게 진화시켰다는 겁니다.나쁜 소식은 아직 ES6를 실무에서 쓰긴 좀 이르다는 겁니다.ES6를 전혀 사용할 수 없다는 뜻이 아닙니다.단지, 프로그래머가 ES6 코드를 어디에서든 쓸 수 있는 ‘안전한’ ES5 코드로 트랜스컴파일하는 수고를 좀 더 해야 한다는 뜻입니다.프로그래밍을 오래 해 왔다면 이렇게 생각할 수도 있습니다.“와, 믿을 수 없는데? 컴파일과 링크가 필요 없는 언어라니, 생각해 본 적도 없어.”필자도 꽤 오랫동안 프로그래밍을 해 왔고, 컴파일과 링크가 필요한 프로그램을 작성하곤 했지만 과거에 대한 향수 같은 것은 느끼지 않습니다.자바스크립트는 인터프리팅 언어이고 번거로운 부대작업이 필요 없다는 장점이 있습니다.(노드 같은 자바스크립트 엔진은 분명 자바스크립트를 컴파일하긴 하지만, 프로그래머가 개입할 필요 없이 자동으로 이루어집니다.)자바스크립트의 장점은 어디서든 쓰인다는 겁니다.자바스크립트는 거의 항상 브라우저 스크립트 언어의 표준이었고, 노드의 등장으로 이제 브라우저 바깥으로 영역을 확대하고 있습니다.그런 배경이 있으니, 브라우저가 지원하지 않을 수도 있다는 걱정 없이 ES6 코드를 사용하려면 아직 몇 년은 기다려야 할 수도 있다는 사실에 당혹감을 느낄 수도 있습니다.노드 개발자라면 상황이 조금 낫습니다.신경 써야 할 자바스크립트 엔진이 하나뿐이므로 노드의 ES6 지원을 지켜보면서 그에 맞게 대응하면 되니까요.  NOTE_ 이 책의 ES6 예제는 파이어폭스에서 작동하며, ES6 피들(http://www.es6fiddle.net/) 같은 웹 사이트에서도 동작합니다.하지만 실무에 사용하려면 이 장에서 소개하는 도구와 테크닉이 필요합니다.자바스크립트가 ES5에서 ES6로 넘어가는 과정은 점진적입니다.다른 언어에서는 볼 수 없었던 부분이죠.즉, 지금 사용하는 브라우저가 ES6의 기능을 일부 지원하지만 전체를 지원하지는 못할 수도 있습니다.자바스크립트가 점진적으로 변화할 수 있는 까닭은 자바스크립트의 동적 성격 때문이기도 하고,최근 브라우저 업데이트 방식 때문이기도 합니다.최근의 브라우저를 가리키는 에버그린(evergreen) 이라는 용어를 들어봤을 겁니다.브라우저 제작자들은 사용자가 직접 업데이트해야 하는 뚜렷한 버전 번호라는 개념에서 벗어나고 있습니다.브라우저가 제대로 동작하려면 항상 인터넷에 연결되어 있어야 하므로,항상 최신 버전을 유지할 수 있습니다.물론 버전은 여전히 존재하지만, 에버그린 브라우저들은 사용자가 업그레이드를 거부할 수 없게 하므로 최신 버전을 사용할 가능성이 큽니다.물론 에버그린 브라우저라도 ES6의 훌륭한 기능을 모두 지원할 때까지는 시간이 걸릴 겁니다.따라서 그때까지는 트랜스컴파일을 피할 수 없습니다."
}, 

{
"id": "-javascript-2020-04-12-javascript12",
"title": "2. 자바스크립트 개발 도구",
"author": null,
"tags": [],
"url": "/javascript/2020/04/12/javascript12/",
"date": "2020-04-12",
"content": "1장에서 본 것처럼 텍스트 에디터와 브라우저만 있어도 자바스크립트를 작성할 수 있지만, 유용한 개발 도구도 많이 있습니다.그리고 앞으로는 ES6만 사용할 것이므로 ES6 코드를 ES5 코드로 바꿀 방법도 필요합니다.이 장에서 설명하는 도구들은 매우 널리 쓰이므로, 오픈 소스 프로젝트나 소프트웨어 개발 팀에 참여하면 거의 반드시 사용하게 될 겁니다.  깃(git) : 프로젝트가 커져도 쉽게 관리할 수 있고 다른 개발자와 협력할 수 있게 돕는 버전 컨트롤 도구입니다.  노드(Node) : 브라우저 밖에서 자바스크립트를 실행할 수 있게 하는 도구입니다. 노드와 함께 설치되는 npm은 이 리스트의 다른 도구를 설치할 때 필요합니다.  걸프(Gulp) : 반복적인 개발 작업을 자동화하는 빌드 도구입니다. 그런트(Grunt)도 널리 쓰입니다.  바벨(Babel) : ES6 코드를 ES5 코드로 변환하는 트랜스컴파일러입니다.  ES린트(ESLint) : 자주 하는 실수를 피하고 더 나은 프로그래머가 되도록 돕는 린트 프로그램입니다.2장은 우리의 주제인 자바스크립트에서 멀어지는 장이 아닙니다.자바스크립트 개발에 널리 쓰이는 중요한 도구와 테크닉을 소개하는 장입니다."
}, 

{
"id": "-javascript-2020-04-12-javascript11",
"title": "1.10 Hello, World",
"author": null,
"tags": [],
"url": "/javascript/2020/04/12/javascript11/",
"date": "2020-04-12",
"content": "브라이언 커니핸의 예제로 이 장의 마지막을 장식하도록 합시다.어려운 부분은 이미 다 했습니다.이제 할 일은 텍스트를 추가하는 것뿐입니다.onMouseDown 핸들러 앞에 다음 코드를 추가하십시오.$(document).ready(function () {    'use strict';    paper.install(window);    paper.setup(document.getElementById('mainCanvas'));    var c = Shape.Circle(200, 200, 80);    c.fillColor = 'black';    var text = new PointText(200, 200);    text.justification = 'center';    text.fillColor = 'white';    text.fontSize = 20;    text.content = 'hello world';    var tool = new Tool();    tool.onMouseDown = function (event) {        var c = Shape.Circle(event.point.x, event.point.y, 20);        c.fillColor = 'green';    }    paper.view.draw();})여기서 추가한 내용은 매우 단순합니다.텍스트의 배경으로 쓸 다른 원을 하나 더 만들고, 텍스트 객체 PointText를 만들었습니다.텍스트가 캔버스의 중앙에 위치하도록 하고, 정렬 방식과 색깔, 크기 같은 몇 가지 속성을 지정했습니다.마지막으로 실제 텍스트 컨텐츠인 “hello world”를 지정했습니다.자바스크립트로 텍스트를 출력한 것이 이번이 처음은 아닙니다.이 장 초반의 console.log 예제에서도 이미 텍스트를 출력했습니다.물론 그 예제에서도 “hello world” 텍스트를 출력하는 것이 1972년에 했을 방법과 더 비슷할 겁니다.하지만 중요한 것은 텍스트의 내용이나 어떻게 출력되는지가 아닙니다.중요한 것은 자동으로 실행되는 것을 만들었다는 점, 그리고 눈으로 볼 수 있는 효과가 있다는 점입니다.브라우저를 새로고침하면 거룩한 “hello, world”의 전통에 동참하게 됩니다.“hello world”를 출력해본 것이 처음이라면, 프로그래밍의 세계에 오신 것을 환영합니다.그렇지 않다면, 이 예제를 통해 자바스크립트에 대해 어느 정도 이해할 수 있었기를 바랍니다."
}, 

{
"id": "-javascript-2020-04-12-javascript10",
"title": "1.9 사용자 입력 처리하기",
"author": null,
"tags": [],
"url": "/javascript/2020/04/12/javascript10/",
"date": "2020-04-12",
"content": "지금까지는 사용자의 입력을 전혀 받지 않은 채 프로그램을 실행했습니다.사용자가 원을 클릭할 수도 있지만, 아무 반응도 나타나지 않습니다.마찬가지로, 원을 드래그해봐도 아무 일도 일어나지 않습니다.원을 어디에 그릴지 사용자가 선택할 수 있게 해서 프로그램을 좀 더 대화형으로 바꿔봅시다.사용자 입력은 항상 비동기적이라는 사실에 익숙해져야 합니다.비동기적 이벤트란 이벤트가 언제 일어날지 프로그래머가 전혀 알 수 없는 이벤트를 말합니다.사용자의 마우스 클릭도 비동기적 이벤트의 일종입니다.사용자의 마음에 들어가지 않는 한 언제 클릭할지는 알 수 없습니다.사용자가 클릭하면 거기에 반응하는 건 물론 가능하지만, 언제 클릭할지, 클릭을 할지 말지는 사용자 마음대로입니다.**사용자의 입력에 따라 일어나는 비동기적 이벤트는 비교적 직관적이지만,책의 후반에서는 그다지 직관적이지 않은 비동기적 이벤트에 대해서드 공부하게 될겁니다. **Paper.js는 툴(tool) 객체를 통해 사용자 입력을 처리합니다.바둑판 모양으로 원을 그리는 코드를 다음 코드로 교체하십시오.$(document).ready(function () {    'use strict';    paper.install(window);    paper.setup(document.getElementById('mainCanvas'));    var tool = new Tool();    tool.onMouseDown = function (event) {        var c = Shape.Circle(event.point.x, event.point.y, 20);        c.fillColor = 'green';    }    paper.view.draw();})이 코드의 첫 행에서는 tool 객체를 만들었습니다.객체를 만들면 거기에 이벤트 핸들러를 연결할 수 있습니다.여기서는 onMouseDown 이벤트 핸들러를 연결했습니다.사용자가 마우스를 클릭할 때마다 이 핸들러에 연결한 함수가 호출됩니다.이 사실을 잘 이해해야 합니다.앞의 예제에서는 코드가 즉시 실행됐습니다.브라우저를 새로고침 하면 자동으로 녹색 원이 나타났습니다.여기서는 그렇게 하지 않습니다.그렇게 했다면 녹색 원 하나가 화면 어딘가에 나타났을 겁니다.대신, 사용자가 캔버스 어딘가를 마우스로 클릭해야만 function 다음에 있는 중괄호 사이의 코드가 실행됩니다.이벤트 핸들러는 두 가지 일을 합니다.  첫 번째는 마우스를 클릭할 때 코드를 실행하는 것이고,  두 번째는 어디를 클릭했는지 보고하는 겁니다.마우스로 클릭한 위치는 매개변수 event.point 프로퍼티에 저장됩니다.event.point의 x와 y 프로퍼티가 마우스로 클릭한 위치의 좌표입니다.x와 y 좌표를 각각 지정하지 않고 클릭한 위치를 바로 넘기면 좀 더 짧게 쓸 수 있습니다.var c = Shape.Circle(event.point, 20);이 코드는 자바스크립트에서 매우 중요한 측면을 잘 나타냅니다.자바스크립트는 넘겨받은 매개변수를 바탕으로 추론하는 능력이 있습니다.이전에 쓴 코드처럼 숫자 세 개를 연달아 넘기면 그 숫자들은 각각 x와 y 좌표, 반지름입니다.여기서처럼 매개변수 두 개를 넘기면 처음 것은 위치 객체이고, 두 번째 것은 반지름입니다.여기에 대해서는 6장과 9장에서 더 자세히 알아보겠습니다."
}, 

{
"id": "-javascript-2020-04-12-javascript09",
"title": "1.8 반복적인 작업 자동화하기",
"author": null,
"tags": [],
"url": "/javascript/2020/04/12/javascript09/",
"date": "2020-04-12",
"content": "원을 하나만 그리지 않고 캔버스 전체에 바둑판 모양으로 채우고 싶다고 해 봅시다.원의 크기를 줄이고 원의 중심이 서로 50px씩 떨어지게 하면 캔버스에 64개의 원을 그릴 수 있습니다.물론, 앞에서 만든 코드를 63번 복사해서 붙여넣고, 일일이 좌표를 수정해서 바둑판 모양으로 채워도 됩니다.하지만 너무 지겹겠지요?다행히 컴퓨터는 이런 반복적인 작업에 최적화되어 있습니다.원 64개를 동일한 간격으로 그리려면 어떻게 해야 하는지 살펴봅시다.원 하나를 그리는 코드를 다음과 같이 수정하십시오.$(document).ready(function () {    'use strict';    paper.install(window);    paper.setup(document.getElementById('mainCanvas'));    var c;    for (var x=25; x&lt;400; x+=50) {        for (var y=25; y&lt;400; y+=50) {            c = Shape.Circle(x, y, 20);            c.fillColor = 'green';        }    }    paper.view.draw();})브라우저를 새로고침하면 녹색 원 64개가 나타납니다.프로그래밍 경험이 없다면 앞의 코드가 좀 어렵게 느껴질 수도 있겠지만,128줄을 손으로 작성하는 것보다는 훨씬 낫다는 건 이해할 수 있을 겁니다.여기서 사용한 것은 for 루프입니다.for 루프는 4장에서 자세히 배울 흐름 제어 문법의 일부입니다.for 루프를 사용하려면 초기값(25), 제한 조건(400 미만), 증가분(50)이 필요합니다.x축과 y축에서 각각 반복해야 하므로 루프를 두 번 썼습니다.  NOTE_ 이 예제는 여러 가지 방법으로 만들 수 있습니다.여기서 사용한 방법은 x, y 좌표를 중요하게 취급했습니다.원이 어디서 시작하는지, 원 사이의 간격은 얼마가 되어야 하는지 명시적으로 지정했습니다.다른 방법을 쓸 수도 있습니다.예를 들어 좌표와 상관없이 원의 숫자(64)만 중요하다고 판단한다면, 프로그램에서 원을 캔버스 어디에 배치할지 정하게 만들 수도 있습니다.여기서 좌표를 지정하는 방법을 쓴 이유는 만약 루프를 사용하지 않고 코드를 63번 복사해서 붙여넣었다면 위와 비슷하게 원 사이의 간격을 지정했을 것으로 생각하기 때문입니다."
}, 

{
"id": "-javascript-2020-04-12-javascript08",
"title": "1.7 단순한 그래픽 그리기",
"author": null,
"tags": [],
"url": "/javascript/2020/04/12/javascript08/",
"date": "2020-04-12",
"content": "HTML5에서 발전한 것 중에는 표준화된 그래픽 인터페이스도 있습니다.HTML5 캔버스를 사용해서 그래픽 사각형이나 원, 다각형 같은 단순한 도형을 그릴 수 있습니다.캔버스를 직접 사용하는 건 매우 어렵고 손이 많이 가는 일이므로 그래픽 라이브러리 Paper.js(http://paperjs.org/)를 사용해서 HTML5 캔버스를 사용해 봅시다.  NOTE_ Paper.js가 유일한 캔버스 그래픽 라이브러리는 아닙니다.KineticJS(http://kineticjs.com/),Fabric.js(http://fabricjs.com/),EaselJS(http://www.createjs.com/easeljs)등은 모두 매우 인기 있고 잘 만들어진 라이브러리입니다. 필자는 이들 라이브러리를 모두 사용해 봤고 매우 만족했습니다.Paper.js로 그림을 그리기 전에 먼저 HTML 캔버스 요소를 준비해야 합니다.다음 행을 바디에 추가하십시오.위치는 어디든 상관없습니다.&lt;canvas id=\"mainCanvas\"&gt;&lt;/canvas&gt;캔버스에 사용한 id 속성은 자바스크립트와 CSS에서 이 요소를 쉽게 찾기 위한 것입니다.지금 당장 페이지를 확인하면 아무것도 달라지지 않았습니다.캔버스에 아무것도 그리지 않았을 뿐 아니라,흰 페이지 위의 흰 캔버스이고 너비와 높이도 지정하지 않았으니 당연히 차이를 발견할 수 없습니다.  NOTE_  모든 HTML 요소에 ID를 사용할 수 있고, HTML의 형식을 잘 지키려면 각 ID는 반드시 한번씩만 사용해야 합니다.즉, 캔버스의 id를 mainCanvas로 정했으므로 이 ID는 다시 사용할 수 없습니다.따라서 ID를 너무 남발하지는 않길 권합니다.여기서 ID를 사용한 이유는 초보자에게는 한 번에 하나씩 하는 게 배우기 쉽기 때문이고, ID는 원래 페이지 하나에 하나씩 쓰도록 정의되었기 때문입니다.캔버스가 페이지에서 잘 보이도록 main.css를 수정합시다.CSS에 익숙하지 않아도 괜찮습니다.여기서 수정할 내용은 단순히 HTML 요소에 너비와 높이를 설정하고 검은색 테두리를 추가하는 것뿐입니다.(CSS와 HTML에 대해 더 배우고 싶다면 코드 아카데미의 HTML &amp; CSS 무료 강좌를 보길 권합니다. https://www.codecademy.com/learn/web)#mainCanvas {    width: 400px;    height: 400px;    border: solid 1px black;}이제 페이지를 리로드하면 캔버스가 보입니다.이제 도형을 그릴 캔버스가 준비됐으니 그리는 작업을 도와줄 Paper.js 라이브러리를 링크합시다. 제이쿼리 링크 바로 다음, main.js 링크 바로 앞에 다음 행을 추가하십시오.&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/paper.js/0.12.2/paper-full.min.js\"&gt;&lt;/script&gt;제이쿼리와 마찬가지로 이번에도 CDN을 통해 Paper.js를 불러왔습니다.  NOTE_ 이제 라이브러리를 링크하는 순서가 중요하다는 걸 깨달았을 겁니다.main.js에서 제이쿼리와 Paper.js를 모두 사용해야 하므로 이들을 먼저 링크해야 합니다.제이쿼리와 Paper.js는 서로 관계가 없으므로 이 두 라이브러리의 순서는 상관없지만,웹개발에서 제이쿼리가 빠지는 일은 거의 없으므로 항상 제이쿼리를 먼저 링크하는 습관을 들이길 권합니다.이제 Paper.js를 불러왔으니 설정 작업이 필요합니다.다음과 같이 어떤 일을 하기 전에 항상 먼저 실행해야 하는 코드를 보통 템플릿, 또는 보일러플레이트(boilerplate)라고 부릅니다.다음 코드를 mian.js의 use strict 바로 다음에 추가하십시오.(원한다면 console.log는 이제 제거해도 됩니다.)$(document).ready(function () {    'use strict';    paper.install(window);    paper.setup(document.getElementById('mainCanvas'));    // Todo    paper.view.draw();})첫 번째 행에서는 Paper.js를 전역 스코프에 설치했습니다.(스코프에 대해서는 7장에서 배웁니다.)두 번째 행에서는 Paper.js를 캔버스에 연결하고 Paper.js가 그림을 그릴 수 있도록 준비합니다.중앙의 Todo는 실제로 그림을 그리는 코드가 들어갈 자리입니다.마지막 행에서는 Paper.js가 실제로 화면에 그림을 그리라는 명령입니다.이제 템플릿이 준비됐으니 그림을 그려 봅시다.먼저 캔버스 중앙에 녹색 원을 그리겠습니다.Todo 주석을 다음 행으로 교체하십시오.$(document).ready(function () {    'use strict';    paper.install(window);    paper.setup(document.getElementById('mainCanvas'));    var c = Shape.Circle(200, 200, 50);    c.fillColor = 'green';    paper.view.draw();})브라우저를 새로고침 하니 녹색 원이 나타났습니다.\t\tvar c = Shape.Circle(200, 200, 50);    c.fillColor = 'green';사실 이 두 행에서는 아주 많은 일을 하고 있지만, 지금 알아야 할 것은 몇 가지뿐입니다.  첫 번째 행은 원 객체를 만들고, 객체를 만들기 위해 매개변수 세 가지를 받습니다.여기서 받은 매개변수는 원 중앙의 x, y 좌표와 원의 반지름입니다.캔버스 너비와 높이가 각각 400px이었으므로 캔버스의 중심은 (200, 200)입니다.반지름 50px은 캔버스의 너비와 높이의 1/8입니다.  두 번째 행에서는 채울 색깔(fill)을 정했습니다.이 색깔은 Paper.js에서 스트로크(stroke)라 부르는 외곽선 색깔과는 다릅니다.매개변수를 자유롭게 바꿔가면서 실험해봐도 괜찮습니다."
}, 

{
"id": "-javascript-2020-04-12-javascript07",
"title": "1.6 제이쿼리",
"author": null,
"tags": [],
"url": "/javascript/2020/04/12/javascript07/",
"date": "2020-04-12",
"content": "이제 대단히 인기있는 클라이언트 스크립트 라이브러리인 제이쿼리를 페이지에 불러올 겁니다.제이쿼리는 거의 어디에서나 쓰이는 라이브러리이며 웹 코드를 작성할 때 거의 항상 가장 먼저 불러오는 라이브러리이기도 합니다.지금 당장은 제이쿼리가 필요하지 않지만, 제이쿼리 코드에 빨리 익숙해질수록 좋습니다.바디 마지막, main.js를 불러온 행 바로 앞에 제이쿼리 링크를 삽입합시다.&lt;script src=\"https://code.jquery.com/jquery-3.4.1.min.js\"&gt;&lt;/script&gt;&lt;script src=\"main.js\"&gt;&lt;/script&gt;인터넷 URL을 통해 제이쿼리를 불러 왔으므로 인터넷에 연결되어 있지 않다면 페이지가 정확히 동작하지 않습니다.컨텐츠 전송 네트워크(CDN)에서 서비스하는 제이쿼리를 링크했습니다.이렇게 하면 불러오는 속도가 더 빨라집니다.오프라인으로 프로젝트를 만든다면 제이쿼리 파일을 내려받아 컴퓨터에서 불러와야 합니다.이제 제이쿼리의 장점을 활용하도록 main.js 파일을 수정합시다.$(document).ready(function () {    'use strict';    console.log('main.js loaded');})제이쿼리를 다뤄본 적이 없다면 이 코드는 괴상망측해 보일 겁니다.사실 이 코드는 대단히 많은 일을 하지만, 아직은 이 코드가 하는 일을 이해할 수 없을 겁니다.여기서 제이쿼리가 하는 일은 자바스크립트 코드를 실행하기 전에(비록 지금은 console.log 하나뿐이지만)브라우저가 HTML을 전부 불러왔는지 확인하는 겁니다.바른 습관을 들이기 위해, 브라우저 기반 자바스크립트를 만들 때마다 이렇게 할 겁니다.앞으로 만드는 자바스크립트 코드는 모두 $(document).ready(function() {}); 이 안에 들어갑니다.use strict; 라는 행도 있습니다.이 명령에 대해서는 나중에 더 자세히 배우지만, 간단히 말해 이 명령은 자바스크립트 인터프리터에서 코드를 더 엄격하게 처리하라는 뜻입니다.처음에는 엄격하다는 표현이 별로 좋지 않다고 생각하겠지만,코드를 엄격하게 처리하다 보면 더 나은 자바스크립트 코드를 쓸 수 있게 되고,자주 발생하기 어려운 문제를 방지할 수 있습니다.이 책에서는 매우 엄격한 자바스크립트를 배우게 될 겁니다."
}, 

{
"id": "-javascript-2020-04-12-javascript06",
"title": "1.5 자바스크립트 콘솔",
"author": null,
"tags": [],
"url": "/javascript/2020/04/12/javascript06/",
"date": "2020-04-12",
"content": "우리는 이미 자바스크립트 코드를 조금 썼습니다.console.log('main.js loaded');가 그것입니다.이 코드는 무슨 의미일까요?콘솔은 프로그램을 진단할 때 사용하는 텍스트 전용 도구입니다.이 책을 공부하는 동안 콘솔을 아주 많이 사용하게 될 겁니다.브라우저마다 콘솔에 접근하는 방법이 다릅니다.콘솔은 자주 사용하게 될 테니 키보드 단축키를 기억하는 것이 좋습니다.윈도우와 리눅스용 파이어폭스에서는 ctrl+shift+k를 누르면 되고, 맥용 파이어폭스에서는 Command+Option+K를 누르면 됩니다.index.html을 불러온 페이지에서 자바스크립트 콘솔을 열면 main.js loaded라는 텍스트가 보여야 합니다.만약 보이지 않으면 페이지를 리로드해 보십시오.console.log는 메서드입니다.  함수와 메서드의 차이에 대해서는 9장에서 자세히 설명합니다.이 메서드는 원하는 내용을 콘솔에 출력할 때 사용하며 디버깅에도 유용하고 언어를 배울 때도 유용합니다.콘솔에는 여러 가지 유용한 기능이 많은데, 프로그램의 출력 결과를 보는 것 외에도 자바스크립트 코드를 콘솔에 직접 입력할 수 있습니다.이를 통해 간단한 테스트를 하거나 자바스크립트 기능을 공부할 수 있고, 심지어 프로그램을 임시로 수정하는 것도 가능합니다."
}, 

{
"id": "-javascript-2020-04-12-javascript05",
"title": "1.4 시작하기",
"author": null,
"tags": [],
"url": "/javascript/2020/04/12/javascript05/",
"date": "2020-04-12",
"content": "먼저 HTML 파일과 CSS 파일, 자바스크립트 소스 파일 세 가지를 만들면서 시작하겠습니다.자바스크립트와 CSS는 HTML에 포함될 수 있으므로 HTML 파일 하나에서 모든 일을 다 할 수도 있지만,이들을 분리하면 뚜렷한 장점이 있습니다.프로그래밍이 처음이라면 여기서 설명하는 대로 한 단계씩 따라 하길 강력히 권합니다.이 장에서는 단계적으로 하나씩 알아보는 접근법을 택할 것이고 따라 하다 보면 기초가 확고해질 겁니다.언떳 보면 정말 간단한 목적인데도, 그런 간단함에 비해 지나치게 많은 일을 하는 듯 보일 수도 있습니다.그리고 어느 정도는 실제로 그렇기도 합니다.물론, 똑같은 일을 훨씬 간단히 하는 예제를 만들 수도 있습니다.하지만 그렇게 한다면 독자 여러분에게 나쁜 습관이 생길 수도 있습니다.여기서 볼 가외의 단계들은 앞으로 몇 번이고 반복해서 보게 될 겁니다.그리고 지금 지나치게 복잡하다고 느껴질 그 단계들을 반복함으로써, 일을 올바른 방법으로 하고 있다고 확신하게 될 겁니다.이 장에 대해 짚고 넘어갈 중요한 점이 하나 있습니다.이 장은 코드 예제에서 ES6 문법이 아니라 ES5 문법을 쓰는 유일한 장입니다.ES5 문법을 쓰는 이유는 ES6를 지원하지 않는 브라우저를 사용하더라도 코드 샘플이 동작하게 하기 위해서입니다.다음 2장부터는 ES6 코드를 어떻게 작성하는지, 그리고 구식 브라우저에서도 동작하도록 트랜스컴파일(transcompile)하는 방법을 배웁니다.그런 기초를 익히고 나면, 그 다음부터는 ES6 문법을 사용합니다.이 장의 코드샘플은 아주 단순하므로 ES5 문법을 사용해도 큰 차이는 없습니다.  NOTE_ 이 예제를 연습할 때는 모든 파일을 같은 디렉터리에 보관하는 게 좋습니다.다른 파일과 섞여서 찾기 힘들어지는 일이 없도록, 이 예제의 파일을 담을 디렉터리를 새로 만들길 권합니다.먼저 자바스크립트 파일로 시작합시다.텍스트 에디터를 열고 main.js 파일을 만드십시오.지금은 이 파일에 행 하나만 추가합니다.console.log('main.js loaded');다음에는 CSS 파일 main.css를 만드십시오.아직 이 파일에 쓸 내용이 없으므로, 주석만 한 줄 써서 빈 파일이 되지 않게 만듭니다./* 여기 스타일을 씁니다. */그리고 index.html 파일을 만듭니다.&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;    &lt;link rel=\"stylesheet\" href=\"main.css\"&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;My first application!&lt;/h1&gt;&lt;p&gt;Welcome to &lt;i&gt;Learning JavaScript, 3rd Edition&lt;/i&gt;.&lt;/p&gt;&lt;script src=\"main.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;이 책은 HTML이나 웹 애플리케이션 개발에 관한 책은 아니지만,자바스크립트를 공부하는 독자들은 대개 그런 목적으로 공부하는 것일 테니HTML에서 자바스크립트 개발에 관련된 부분을 조금 짚고 넘어갑시다.HTML 문서는 크게 헤드(head)와 바디(body)로 나뉩니다.헤드에는 브라우저에 표시되는 내용과 관련이 있긴 하지만,   브라우저에 직접 표시되지는 않는 정보가 들어있습니다.바디에는 브라우저에 렌더링될 페이지 콘텐츠가 들어 있습니다.헤드에는 브라우저에 절대 나타나지 않는 요소가 들어 있고,바디의 요소는 보통 브라우저에 나타난다는 것을 이해하는 것이 중요합니다.물론 &lt;script&gt; 같은 특정 요소는 바디에 있더라도 브라우저에 나타나지 않고, CSS 스타일로 바디의 요소가 보이지 않게 감출 수 있긴 합니다.헤드에 있는 &lt;link rel=\"stylesheet\" href=\"main.css\"&gt;는 현재 비어 있는 CSS파일을 문서로 불러오는 링크입니다.바디 마지막에 있는 &lt;script src=\"main.js\"&gt;&lt;/script&gt;는 자바스크립트 파일을 문서로 불러오는 링크입니다.하나는 헤드에 있고 다른 하나는 바디 마지막에 있다는 사실이 조금 이상해 보일 수도 있습니다.&lt;script&gt; 태그를 헤드에 넣을 수도 있지만, 그렇게 하면 성능이 다소 떨어지고 헤드가 지나치게 복잡해지므로 바디 마지막에 놓습니다.바디에는 &lt;h1&gt;My first application!&lt;/h1&gt;가 있습니다.이 태그는 최상위 헤더 텍스트, 즉 페이지에서 가장 크고 중요한 텍스트입니다.그 다음에 있는 &lt;p&gt; (문단) 태그에는 텍스트가 들어있는데 그중 일부는 이탤릭체입니다.(&lt;i&gt; 태그로 둘러싸여 있습니다.)브라우저에서 index.html을 불러 보십시오.대부분의 시스템에서 가장 쉬운 방법은 파일 브라우저에서 파일을 더블클릭하는 겁니다.파일을 브라우저 창에 드래그해도 됩니다.HTML 파일의 바디 콘텐츠가 보일 겁니다.  NOTE_ 이 책에는 코드 샘플이 많습니다.HTML과 자바스크립트 파일은 매우 커질 수 있으므로 책에 매번 파일 전체를 싣지는 않겠습니다.코드 샘플을 파일의 어디에 넣어야 할지 본문에서 설명할 겁니다.이렇게 하면 초보 프로그래머에게는 조금 골치가 아플 수 있겠지만, 결국에는 코드가 어떻게 서로 어울리는지 이해해야 합니다.이걸 이해하지 않고 지나가기란 불가능합니다."
}, 

{
"id": "-javascript-2020-04-12-javascript04",
"title": "1.3 주석에 관해",
"author": null,
"tags": [],
"url": "/javascript/2020/04/12/javascript04/",
"date": "2020-04-12",
"content": "자바스크립트도 다른 프로그램이 언어와 마찬가지로 코드 안에 주석을 쓰는 문법이 있습니다.자바스크립트는 주석을 완전히 무시합니다.주석은 당신이나 동료 프로그래머가 보라고 만드는 겁니다.주석에는 코드만 봐서는 무슨 일이 일어나는지 분명히 알기 어려울 때 설명을 달아둡니다.이 책에서도 예제에 주석을 많이 사용해서 코드의 의미를 설명합니다.자바스크립트의 주석은 인라인 주석과 블록 주석 두 가지입니다.인라인 주석은 슬래시 두 개(//)로 시작해서 행 끝에서 끝납니다.// 인라인 주석블록 주석은 /*로 시작해서 */로 끝나며 여러 줄에 걸쳐 쓸 수 있습니다.다음 예제는 두 가지 주석을 어떻게 사용하는지 보여줍니다.console.log(\"echo\");   // 콘솔에 \"echo\"를 출력합니다.  /*  \t위 행에서 // 앞에 있는 것은 모두 자바스크립트 코드이며\t문법에 맞게 써야 합니다. // 뒤에 있는 것은 주석이고,\t자바스크립트는 주석을 무시합니다.\t이 텍스트는 블록 주석이며 이것 역시 무시됩니다. 가독성을\t생각해서 들여썼지만 꼭 들여써야 하는 건 아닙니다.*//* 들여쓰지 않아도 됩니다. */곧 알아볼 캐스케이딩 스타일시트(css)도 블록 주석에는 자바스크립트와 같은 문법을 씁니다.css는 인라인 주석은 지원하지 않습니다.HTML에도 인라인 주석은 없고, 블록 주석은 자바스크립트와 다른 문법을 사용합니다.&lt;!-- 이 부분 --&gt;위에 이 부분에 있는 내용은 모두 주석입니다.&lt;head&gt;\t&lt;title&gt;HTML and CSS Example&lt;/title&gt;\t&lt;!-- HTML 주석입니다.           여러 줄에 걸쳐서 써도 됩니다. --&gt;\t&lt;style&gt;\t\tbody: {color:red;}\t\t/* CSS 주석입니다.\t\t          역시 여러 줄에 걸쳐서 써도 됩니다. */\t&lt;/style&gt;\t&lt;script&gt;\t\tconsole.log(\"echo\"); // 다시 자바스크립트로 돌아왔습니다.\t\t/* 여기서는 인라인 주석과 블록 주석을\t\t         모두 쓸 수 있습니다. */\t&lt;/script&gt;&lt;/head&gt;"
}, 

{
"id": "-javascript-2020-04-11-javascript03",
"title": "1.2 사용할 프로그램",
"author": null,
"tags": [],
"url": "/javascript/2020/04/11/javascript03/",
"date": "2020-04-11",
"content": "목수는 톱이 있어야 책상을 만들 수 있고, 우리는 몇 가지 프로그램이 있어야 소프트웨어를 만들 수 있습니다.다행히 많은 준비가 필요하지는 않습니다.이번 장에서 우리에게 필요한 것은 브라우저와 텍스트 에디터뿐입니다.이 소식을 전하게 되어 무척 기쁩니다.현재 사용되는 브라우저는 모두 이 장의 예제를 잘 실행할 수 있습니다.심지어 오랫동안 프로그래머들을 괴롭혔던 인터넷 익스플로러도 충분히 발전해서이제는 크롬이나 파이어폭스, 사파리, 오페라에 뒤떨어지지 않습니다.필자는 파이어폭스를 선택했고, 프로그램을 배울 때 도움이 되는 파이어폭스의 기능을 설명할 겁니다.다른 브라우저에도 이런 기능이 있지만,이 책에서 브라우저의 기능을 설명할 때는 파이어폭스를 기준으로 설명합니다.따라서 이 책을 공부할 때는 파이어폭스를 사용하는 게 가장 쉽습니다.코드를 작성하려면 텍스트 에디터가 필요합니다.텍스트 에디터의 선택은 매우 논란이 많은 주제입니다.어떤 사람들은 종교적으로 보일 정도로 열띤 토론을 하기도 합니다.텍스트 에디터는 크게 [텍스트 모드 에디터]와 [창 모드 에디터] 두 가지로 나눌 수 있습니다.텍스트 모드 에디터 중 가장 널리 쓰이는 것은 vi/vim과 이맥스입니다.텍스트 모드 에디터에 익숙해지면 SSH 등으로 원격 컴퓨터에 접속한 상태에서도 익숙한 에디터로 파일을 편집할 수 있다는 장점이 있습니다.창 모드 에디터는 더 세련돼 보이고, 친숙하고 유용한 사용자 인터페이스를 갖추고 있습니다.하지만 가장 중요한 것은, 결국 텍스트를 편집하는 것이 목적이므로 창 모드 에디터가 텍스트 모드 에디터보다 본질에서 우수하다고 볼 수는 없습니다.창 모드 에디터 중에서는 아톰(Atom), 서브라임 텍스트(Sublime text), 코다(Coda), 비쥬얼스튜디오(Visual Studio), 노트패드++(Notepad++), 텍스트패드(TextPad), Xcode 등이 널리 쓰입니다.이들 에디터 중 하나에 익숙하다면 굳이 다른 에디터로 바꿀 필요는 없습니다.하지만 윈도우 메모장을 사용하고 있다면 바꾸길 강력히 권합니다.노트패드++은 무료이고 사용하기도 쉽습니다.에디터의 기능을 모두 이 책에서 설명할 수는 없지만, 다음 몇 가지 기능은 꼭 익혀야 합니다.      문법하이라이트 문법 하이라이트 기능은 프로그램의 문법적 요소를 색깔로 구별하는 기능입니다.   예를 들어 리터럴은 주황색으로, 변수는 하늘색으로 표시하는 등입니다(이들 용어의 의미는 곧 알게됩니다).   이 기능은 코드에서 문제가 있는 부분을 쉽게 찾도록 도와줍니다.   최신 텍스트 에디터는 대부분 문법 하이라이트 기능을 기본으로 활성화해 놓습니다.   만약 코드가 단색으로 표시된다면 에디터의 설명서를 읽어보십시오.        괄호 맞추기    프로그래밍 언어는 대부분 괄호를 아주 많이 사용합니다.   괄호로 둘러싼 내용이 여러 줄인 경우도 있고, 심지어 괄호 하나가 화면을 넘어갈 때도 있습니다.   괄호 안에 다른 괄호를 쓰는 일도 아주 많습니다.   괄호는 반드시 짝이 맞아야 하며, 짝이 맞지 않으면 프로그램이 정확히 동작하지 않습니다.   괄호 맞춤 기능은 괄호가 어디서 시작하고 어디서 끝나는지 알기 쉽게 표시해줍니다.   괄호의 짝이 맞지 않아서 생기는 문제를 해결하기도 쉽습니다.   괄호 맞춤 기능은 에디터마다 다릅니다.   보일 듯 말듯한 표시를 하는 에디터도 있고, 아주 분명히 표시하는 에디터도 있습니다.   초보자들은 괄호의 짝이 맞지 않아 생기는 문제를 많이 겪는 편이니 에디터의 괄호 맞춤 기능에 익숙해지길 강력히 권합니다.        코드 접기    코드 접기 기능은 괄호 맞춤 기능과 조금 관련이 있습니다.코드 접기는 지금 당장 하는 일과 무관한 코드를 임시로 숨겨서 지금 하는 일에 집중하도록 돕는 기능입니다.이 용어는 종이를 접어서 중요하지 않은 세부사항을 가린다는 의미에서 만들어졌습니다.괄호 맞춤처럼 코드 접기도 에디터마다 다른 형태로 일어납니다.        자동 완성     자동 완성은 단어 일부를 타이핑하기만 해도 어떤 단어를 타이핑하려 했는지 짐작해서 제시하는 간편한 기능입니다. 이 기능은 단어 완성(word completion)  또는 인텔리센스(마이크로 소프트에서 쓰는 용어)라고도 합니다. 자동 완성에는 두 가지 목적이 있습니다.    하나는 타이핑 시간을 줄이는 겁니다.예를 들어 encodeURIComponent를 타이핑하고 싶다면, enc까지만 타이핑해도 나타나는 리스트에서 encodeURIComponent를 선택할 수 있습니다.  두 번째 목적은 발견입니다.예를 들어 encodeURIComponent를 쓰고 싶어서 enc를 타이핑하면 리스트에서 encodeURI라는 함수를 발견하게 됩니다.에디터에 따라서는 두 함수의 차이에 대한 간단한 설명이 나타날 수도 있습니다.자바스크립트는 느슨한 타입을 사용하는 언어이고 스코프 규칙도 독특해서 다른 언어에 비해 자동 완성을 구현하기 어렵습니다.자동완성이 꼭 필요하다고 느낀다면 잠시 시간을 들여 어떤 에디터가 자신에게 가장 맞는지 알아보는 것도 좋습니다.일부 에디터는 자동 완성이 매우 잘 만들어져 있습니다.vim 같은 에디터는 매우 강력한 자동완성 기능을 제공하지만 사용자 설정이 필요합니다."
}, 

{
"id": "-javascript-2020-04-11-javascript02",
"title": "1.1 시작은 브라우저에서",
"author": null,
"tags": [],
"url": "/javascript/2020/04/11/javascript02/",
"date": "2020-04-11",
"content": "이 블로그에서는 서버 쪽, 스크립팅, 데스크톱, 브라우저에서의 활용 등 현재 자바스크립트가 쓰이는 모든 분야를 다루겠지만,전통적으로 그래 왔고 현실적이기도 한 이유로 브라우저 기반 프로그램부터 만들겠습니다.브라우저 기반 프로그램부터 만드는 이유 중에는 그래픽 라이브러리를 사용하기가 편리하다는 점도 있습니다.사람은 시각적인 동물이므로 프로그래밍 개념과 시각적 요소를 결합하면 배우기가 훨씬 쉬워집니다.이 책을 공부하는 동안 텍스트를 노려보며 보내는 시간이 많겠지만,처음에는 흥미로워 보이는 것들로 시작하겠습니다.이 예제를 선택한 배경에는 이벤트 주도 프로그래밍(event-driven programming) 같은아주 중요한 개념으로 자연스럽게 연결된다는 이유도 있습니다.이벤트 주도 프로그래밍은 이후 몇 장에서 설명할 겁니다."
}, 

{
"id": "-javascript-2020-04-11-javascript01",
"title": "Hello, World",
"author": null,
"tags": [],
"url": "/javascript/2020/04/11/javascript01/",
"date": "2020-04-11",
"content": "Hello, World프로그래밍 책은 대개 터미널에 “Hello, World” 를 출력하는 고전적인 예제로 시작합니다.이 예제는 벨 연구소에서 일하던 컴퓨터 과학자 브라이언 커니핸이 1972년 처음 사용 했고,책으로 인쇄된 건 1978년 출간된 C 언어 프로그래밍(제2판) (대영사, 2002) 이 처음입니다.최근 점점 복잡해지는 프로그래밍 환경에서 “Hello, World”는 구식이라고 생각할 수도 있겠지만,이 단순한 구절에 숨은 의미는 시간이 흘러도 퇴색되지 않습니다.이 구절은 당신이 신에게서 불을 훔쳐내 인간에게 선물한 프로메테우스가 될 수도,진흙 인형에 진정한 신의 이름을 새기던 랍비가 될 수도,자신의 피조물에 생명을 불어넣던 프랑켄슈타인 박사가 될 수도 있게 합니다.이것은 그런 위대한 창조와 신기원을 의미합니다.필자가 프로그래밍에 끌린 것도 이 구절의 울림 때문이었습니다.언젠가 훌륭한 프로그래머(당신일 수도 있겠죠)가 최초로 인공지능 생명체를 만들고,그 생명체가 처음으로 입을 열어 하는 말이 “Hello, World”일 수도 있습니다.1장에서는 브라이언 커니핸이 44년 전에 시작한 전통과 현재의 프로그래머가사용할 수 있는 최신 도구 사이에서 균형을 잡을 겁니다.쉽게 말해 화면에 “Hello, World”를 출력하는 건 마찬가지지만, 1972년의 프로그래머가 사용하던 고풍스러운 도구를 쓰지는 않을 겁니다."
}, 

{
"id": "-javascript-2020-04-11-javascript00",
"title": "컴퓨터적 사고방식 및 공부 마인드",
"author": null,
"tags": [],
"url": "/javascript/2020/04/11/javascript00/",
"date": "2020-04-11",
"content": "모든 걸 이해해야 한다는 강박관념에 빠지지 말자.공부할 때 흔히 하는 실수 같습니다.모든 것을 완벽하게 이해하고 넘어가려는 행동 말입니다.  물론 모든 것을 완벽하게 이해하고 넘어가는 것은 좋습니다. 이해할 수만 있다면 말입니다.  하지만 처음부터 모든 것을 완벽하게 소화해낼 순 없습니다.  무엇이든지 반복 학습이 중요합니다.해당 블로그 글을 끝까지 읽으신다면 자연스레 처음에 이해 안가던 부분이 이해가 되실 겁니다.컴퓨터적 사고방식프로그래밍 경험이 많지 않다면, 컴퓨터가 얼마나 곧이곧대로 행동하는지 깨닫게 되면서 절망에 빠질 일이 많을 겁니다.사람의 두뇌는 혼란스러운 일도 잘 처리할 수 있지만 컴퓨터는 이런 면에서는 빵점입니다.제가 이 글을 쓰면서 문법이 틀리더라도, 읽으시는 분들은 저의 작문 실력을 의심할지언정 제가 어떤 말을 하려는 지는 이해할 수 있을 겁니다. 하지만 자바스크립트는(모든 프로그래밍 언어가 그렇지만) 혼란스러운 코드를 이해하는 능력은 전혀 없습니다.  대소문자를 틀리건, 오타를 내건, 단어와 구두점의 순서가 조금 바뀌는 등의 작은 실수도 모두 에러 또는 예상치 못한 결과를 초래합니다.  문제가 생겼다면 글에 있는 코드를 전부 정확히 옮겨 썼는지 확인해 보십시오.  세미콜론과 콜론을 헷갈리면 안되고, 마침표를 쓸 자리에 쉼표를 써도 안됩니다.  큰 따옴표와 작은 따옴표를 뒤섞어도 안됩니다.  대소문자도 확인해야 합니다.경험이 쌓이면 어느 정도 자유롭게 써도 되는 부분과 한글자 한글자를 정확히 써야 하는 부분을 구별할 수 있게 되겠지만,일단 지금은 블로그에 있는 내용을 그대로 따라 해야 머리를 쥐어뜯을 일이 줄어들 겁니다."
}, 

{
"id": "-jekyll-2020-02-11-jekyll02",
"title": "Jekyll 설치 및 세팅",
"author": null,
"tags": [],
"url": "/jekyll/2020/02/11/jekyll02/",
"date": "2020-02-11",
"content": "Jekyll 설치 및 세팅하기gem install jekyll 명령어로 jekyll을 설치합니다.jekyll template 라는 검색어를 통해 마음에 드는 template을 다운받습니다.http://jekyllthemes.org/원하는 template를 다운받고 압축을 푼 후, gemfile을 제외한 나머지 파일을 모두 jekyll root 폴더로 복붙합니다.위 이미지는 다운받은 template의 gemfile 내용입니다.확인하면 필요 모듈이 적혀있습니다.해당 내용을 내 jekyll root 폴더에 있는 gemfile에 옮겨 적습니다.그리고 jekyll serve 란 명령어로 server를 작동시킵니다.그리고 localhost:4000 으로 접속합니다.그럼 위와 같은 template이 적용된 jekyll 블로그로 접속될 것입니다.admin 페이지로 접속하기 위해선gemfile 파일에 다음 문구를 추가합니다.gem 'jekyll-admin', group:jekyll_plugins그리고 jekyll serve 로 다시 서버를 실행시키고localhost:4000/admin 페이지로 접속합니다.그럼 이러한 admin 페이지로 접속이 가능해집니다."
}, 

{
"id": "-jekyll-2020-02-10-jekyll01",
"title": "Jekyll 사용환경 만들기",
"author": null,
"tags": [],
"url": "/jekyll/2020/02/10/jekyll01/",
"date": "2020-02-10",
"content": "Jekyll 사용환경 만들기1. Ruby 다운로드먼저 Ruby를 설치해 Jekyll 을 사용할 수 있는 환경을 만들어야합니다.https://rubyinstaller.org/위 사이트로 접속해 Ruby를 다운받으십시오.2. Ruby 설치UTF-8 엔코딩에 체크한 후설치를 진행합니다.그리고 Ruby가 제대로 설치되었는지 ruby -v 명령어를 통해 확인해봅니다.위는 git bash 창입니다. Ruby를 설치했어도 ruby -v 명령어가 ruby: command not found라는 오류가 발생하면서 실행이 안될 수도 있습니다.그럴 때는 git bash창 말고 cmd 창을 이용합니다.그러면 ruby -v 명령어를 제대로 인식할 수도 있습니다.cmd 창을 활용하는 경우는 해당 드라이브로 가는 명령어(드라이브이름:), 폴더 옮기는 명령어 cd (폴더명) 등을 이용해 Jekyll 모듈을 사용할 root 폴더로 직접 이동해야됩니다.위와 같이 ruby 설치와 ruby가 제대로 설치되었는지 확인 작업까지 마치면 Jekyll 사용환경이 완성된 겁니다."
}, 

{
"id": "-jekyll-2020-02-10-jekyll00",
"title": "Jekyll(지킬) 이란?",
"author": null,
"tags": [],
"url": "/jekyll/2020/02/10/jekyll00/",
"date": "2020-02-10",
"content": "Jekyll 이란?평범한 텍스트 파일을 정적 웹사이트 또는 블로그로 변신시켜 주는 모듈입니다.특징  심플함데이터베이스도 댓글 관리도, 성가신 업데이트도 없습니다. 오직 당신의 컨텐츠뿐입니다.  정적Markdown (또는 Textile), Liquid, HTML &amp; CSS 를 넣으면, 당장 게시할 수 있는 사이트가 완성됩니다.  블로그 지향적고유주소, 카테고리, 페이지, 포스트, 사용자 레이아웃 등의 기능이 기본적으로 포함되어 있습니다."
}

]
