<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LEE HYUNG JU</title>
    <description>Jekyll Blog</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 30 Nov 2020 01:44:54 +0900</pubDate>
    <lastBuildDate>Mon, 30 Nov 2020 01:44:54 +0900</lastBuildDate>
    <generator>Jekyll v4.0.1</generator>
    
      <item>
        <title>10-7. Object 오브젝트(ES3 기준) / Object와 prototype, 빌트인 Object 특징</title>
        <description>&lt;h2 id=&quot;10-7-object-오브젝트es3-기준--object와-prototype-빌트인-object-특징&quot;&gt;10-7. Object 오브젝트(ES3 기준) / Object와 prototype, 빌트인 Object 특징&lt;/h2&gt;

&lt;p&gt;이번 시간엔 빌트인 Object 오브젝트와 prototype입니다.&lt;/p&gt;

&lt;h2 id=&quot;빌트인-object-특징&quot;&gt;빌트인 Object 특징&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;인스턴스를 만들 수 있는 모든 빌트인 오브젝트의 &lt;code class=&quot;highlighter-rouge&quot;&gt;__proto__&lt;/code&gt;에 &lt;strong&gt;Object.prototype&lt;/strong&gt;의 6개 메소드가 설정됨&lt;/li&gt;
  &lt;li&gt;따라서 빌트인 오브젝트로 만든 인스턴스에도 &lt;strong&gt;Object.prototyp의 6개의 메소드&lt;/strong&gt;가 설정됨&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이것이 빌트인 Object 오브젝트의 특징입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Object.prototype&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/script/image219.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/static/img/script/image220.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/static/img/script/image221.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/static/img/script/image222.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/static/img/script/image223.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/static/img/script/image224.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;isprototypeof&quot;&gt;isPrototypeOF()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;object&lt;/td&gt;
      &lt;td&gt;검색할 오브젝트.prototype&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;검색 대상 오브젝트&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;true, false&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;파라미터에 작성한 오브젝트에&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;object 위치에 작성한 prototype이&lt;/li&gt;
      &lt;li&gt;존재하면 true 반환&lt;/li&gt;
      &lt;li&gt;존재하지 않으면 false 반환&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPrototypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Object.prototype 처럼 오브젝트의 prototype을 작성합니다.&lt;/li&gt;
  &lt;li&gt;numObj에 Object.prototype의 존재를 체크합니다.&lt;br /&gt;
존재하므로 true 반환&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;위 코드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.prototype&lt;/code&gt;이 &lt;strong&gt;numObj&lt;/strong&gt;에 존재하는가?&lt;br /&gt;
이것을 물어보는 것입니다.&lt;/p&gt;

  &lt;p&gt;처음 &lt;code class=&quot;highlighter-rouge&quot;&gt;__proto__&lt;/code&gt;에는 빌트인 Number 오브젝트의 prototype에 있는 메소드들이 설정되고&lt;br /&gt;
그 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;__proto__&lt;/code&gt;에 빌트인 Object 오브젝트의 prototype에 있는 메소드들이 설정됩니다.&lt;/p&gt;

  &lt;p&gt;따라서 numObj에는 Object.prototype이 존재합니다.&lt;br /&gt;
그러므로 true가 출력됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;tostring&quot;&gt;toString()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;object&lt;/td&gt;
      &lt;td&gt;Object 인스턴스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;사용 불가&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;변환한 값&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;인스턴스 타입을 문자열로 표시&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;책&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 아래 toString은 빌트인 Object 오브젝트의 toString() 메서드를 부른 것입니다.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [object Object]&lt;/span&gt;
    
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [object Number]&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// [object Number]&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 여기서 Number는 인스턴스를 만든 타입입니다. Number 타입. 즉, 오브젝트 이름입니다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;toString() 앞에 Object 인스턴스를 작성했으며&lt;/li&gt;
      &lt;li&gt;toString()을 실행하면 위에처럼 [object Object]를 표시&lt;/li&gt;
      &lt;li&gt;&lt;mark&gt;앞의 소문자 object는 인스턴스를 나타내고 뒤의 대문자 Object는 빌트인 Object 오브젝트를 나타냅니다.&lt;/mark&gt;&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt;도 메소드입니다.&lt;br /&gt;
  빌트인 Object 오브젝트에 있는(prototype에 있는) toString을 직접 연결하려면,&lt;br /&gt;
  (현재 obj는 빌트인 Number 오브젝트의 인스턴스이므로, toString 메소드를 호출하면 Number 인스턴스의 toString이 호출됩니다.)&lt;br /&gt;
  이처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt; 메소드를 사용합니다.&lt;br /&gt;
  이에 대해선 뒤에서 다루겠습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;오브젝트에 toString()이 있으면&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;toString()이 호출되고&lt;/li&gt;
      &lt;li&gt;없으면 빌트인 Object 오브젝트의 toString()이 호출됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tolocalestring&quot;&gt;toLocaleString()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;data&lt;/td&gt;
      &lt;td&gt;변환 대상&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;사용하지 않음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;변환한 값&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;지역화 문자 변환 메소드 대체 호출&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Array, Number, Date 오브젝트의&lt;/li&gt;
      &lt;li&gt;toLocaleString() 메소드가 먼저 호출됩니다.&lt;br /&gt;
Array, Number, Date 오브젝트의 toLocaleString() 메소드가 먼저 호출되고,&lt;br /&gt;
그 다음에 빌트인 Object 오브젝트의 toLocaleString() 메소드가 호출됩니다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1234.56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLocaleString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1,234.56&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;4567.89&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLocaleString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 4567.89&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;1234.56에 콤마(,)를 삽입하여 1,234.56으로 출력&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;이때에는 Number.prototype.toLocaleString() 메소드가 호출됩니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;“4567.89”는 String 타입이며&lt;/li&gt;
      &lt;li&gt;String.prototype.toLocaleString()이 없으므로&lt;/li&gt;
      &lt;li&gt;&lt;mark&gt;Object.prototype.toLocaleString() 메소드가 호출됩니다.&lt;/mark&gt;&lt;br /&gt;
이것은 단지, 있는 것을 그대로 출력하는 용도밖에 되지 않습니다.&lt;/li&gt;
      &lt;li&gt;Object의 toLocaleString()이 없으면 에러 발생합니다.&lt;br /&gt;
즉, 에러 발생을 방지하기 위한 것입니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 30 Nov 2020 01:06:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/30/beginner3.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/30/beginner3.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>10-6. Object 오브젝트(ES3 기준) / 프로퍼티 처리 메소드</title>
        <description>&lt;h2 id=&quot;10-6-object-오브젝트es3-기준--프로퍼티-처리-메소드&quot;&gt;10-6. Object 오브젝트(ES3 기준) / 프로퍼티 처리 메소드&lt;/h2&gt;

&lt;h2 id=&quot;hasownproperty&quot;&gt;hasOwnProperty()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;object&lt;/td&gt;
      &lt;td&gt;기준 인스턴스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;프로퍼티 이름&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;true, false&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;인스턴스에 파라미터 이름이&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;존재하면 true 반환&lt;/li&gt;
      &lt;li&gt;존재하지 않으면 false 반환&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;own&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;own&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;obj 인스턴스에 value 프로퍼티가 존재하며&lt;/li&gt;
      &lt;li&gt;obj를 만들면서 직접 작성했으므로 true 반환&lt;/li&gt;
    &lt;/ol&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;own&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;own&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;undefined가 값이지만 false로 인식됩니다.&lt;/li&gt;
      &lt;li&gt;하지만, 값은 체크하고 존재여부만 체크하므로 true 반환&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;자신이 만든 것이 아니라&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;상속받은 프로퍼티이면 false 반환&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;own&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;own&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hasOwnProperty()&lt;/code&gt;는 자신이 만든 것이 아니라 빌트인 Object 오브젝트에 있는 것&lt;/li&gt;
      &lt;li&gt;{}를 실행하면 빌트인 Object 오브젝트의 prototype에 연결된 메소드를 사용하여&lt;/li&gt;
      &lt;li&gt;Object 인스턴스를 만드므로 자신이 만든 것이 아닙니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;빌트인 Object 오브젝트의 prototype에 있는 6개의 메소드를 활용해 인스턴스를 만듭니다.&lt;br /&gt;
그 6개 중 하나가 &lt;code class=&quot;highlighter-rouge&quot;&gt;hasOwnProperty&lt;/code&gt;입니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;obj.hasOwnProperty&lt;/code&gt;로 함수를 호출하면 당연히 존재하니까 호출됩니다.&lt;br /&gt;
그런데 &lt;code class=&quot;highlighter-rouge&quot;&gt;hasOwnProperty&lt;/code&gt;는 내가 만든 것이 아니라 빌트인 Object 오브젝트에서 만든겁니다.&lt;/p&gt;

&lt;p&gt;내가 만든 것은 아까 위의 코드에서 보았듯이&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 작성되어야 합니다.&lt;br /&gt;
위와 같은 것이 내가 만든 것입니다.&lt;br /&gt;
그러나 &lt;code class=&quot;highlighter-rouge&quot;&gt;hasOwnProperty&lt;/code&gt;는 내가 만든 것이 아니라 빌트인 Object 오브젝트가 만든 것입니다.&lt;/p&gt;

&lt;p&gt;그래서 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;가 반환됩니다.&lt;/p&gt;

&lt;h2 id=&quot;propertyisenumerable&quot;&gt;propertyIsEnumerable()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;object&lt;/td&gt;
      &lt;td&gt;인스턴스, 오브젝트&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;프로퍼티 이름&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;true, false&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;오브젝트에서 프로퍼티를&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;열거할 수 있으면 true 반환&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;축구&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propertyIsEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sports&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ol&gt;
          &lt;li&gt;{ sports: “축구” } 형태로 생성한 인스턴스는&lt;/li&gt;
          &lt;li&gt;obj의 프로퍼티를 열거할 수 있습니다.&lt;/li&gt;
        &lt;/ol&gt;

        &lt;p&gt;위 형태는 &lt;code class=&quot;highlighter-rouge&quot;&gt;for in&lt;/code&gt; 문으로 열거할 수 있습니다.&lt;br /&gt;
  따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;가 반환됩니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;열거할 수 없으면 false 반환&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;축구&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sports&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;enumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propertyIsEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sports&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
        
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ol&gt;
          &lt;li&gt;{enumerable: false}로 열거 불가 설정&lt;/li&gt;
          &lt;li&gt;for-in 문에서 프로퍼티가 열거되지 않습니다.&lt;/li&gt;
          &lt;li&gt;Object(ES5)에서 다룹니다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;defineProperty&lt;/code&gt; 함수는 ES5에서 나왔습니다.&lt;br /&gt;
위의 코드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;enumerable: false&lt;/code&gt;를 만들기 위해 사용했습니다.&lt;br /&gt;
이것은 열거할 수 없는 상태로 설정하는 것입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;첫번째 파라미터 : 오브젝트&lt;/li&gt;
  &lt;li&gt;두번째 파라미터 : 프로퍼티 이름&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그리고 {} 중괄호에다가 &lt;code class=&quot;highlighter-rouge&quot;&gt;enumerable: false&lt;/code&gt;를 작성하면 sports 프로퍼티를 열거할 수 없는 상태로 설정합니다.&lt;br /&gt;
&lt;strong&gt;즉, for in 문으로 돌려도 나오지 않습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이와 같이 ES5에서는 프로퍼티를 열거하거나 삭제하거나 변경하거나, 그런 함수들이 추가되었습니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;이에 대해선 뒤에 ES5 강좌에서 다루겠습니다.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Nov 2020 00:51:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/30/beginner2.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/30/beginner2.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>10-5. Object 오브젝트(ES3 기준) / 함수와 메소드 연결, 함수, 메소드 호출</title>
        <description>&lt;h2 id=&quot;10-5-object-오브젝트es3-기준--함수와-메소드-연결-함수-메소드-호출&quot;&gt;10-5. Object 오브젝트(ES3 기준) / 함수와 메소드 연결, 함수, 메소드 호출&lt;/h2&gt;

&lt;h2 id=&quot;함수와-메소드-연결&quot;&gt;함수와 메소드 연결&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;함수&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;오브젝트에 연결&lt;/li&gt;
      &lt;li&gt;Object.create()&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;메소드&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;오브젝트의 prototype에 연결&lt;/li&gt;
      &lt;li&gt;Object.prototype.toString()&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;15.2.3.4 Object.create(O [, Properties])&lt;br /&gt;
The **create&lt;/strong&gt; function creates a new object with a specified prototype.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;15.2.4.2 Object.prototype.toString()&lt;/strong&gt;&lt;br /&gt;
When the &lt;strong&gt;toString&lt;/strong&gt; method is called, the following steps are taken:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위는 ES5 스펙에 작성되어있는 형태입니다.
&lt;strong&gt;Object.create()&lt;/strong&gt;는 &lt;strong&gt;create function&lt;/strong&gt;이라고 작성되어 있고 &lt;strong&gt;Object.prototype.toString()&lt;/strong&gt;은 &lt;strong&gt;toString method&lt;/strong&gt;라고 작성되어 있습니다.&lt;br /&gt;
ES5는 이러한 기준으로 function과 method를 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;반면 ES6에서는 &lt;strong&gt;Static method&lt;/strong&gt;라는 것이 또 나왔습니다.&lt;br /&gt;
그래서 &lt;strong&gt;함수 / 메소드 / 스태틱 메소드&lt;/strong&gt; 형태로 구분됩니다.&lt;br /&gt;
하지만 ES5에서는 &lt;strong&gt;함수 / 메소드&lt;/strong&gt;로 구분합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그러면 이렇게 함수와 메소드를 구분해야되는 이유는 무엇인가요?&lt;/strong&gt;&lt;br /&gt;
지금부터 그 이유에 대해 살펴보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;함수-메소드-호출&quot;&gt;함수, 메소드 호출&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;함수 호출 방법&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Object.create();&lt;br /&gt;
함수를 호출하는 형태&lt;br /&gt;
오브젝트.함수이름() 소괄호 형태&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// function create() { [native code] }&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;Object에 create가 존재하므로 함수 출력&lt;/li&gt;
      &lt;li&gt;Object.prototype에 create가 존재하지 않으므로 undefined 출력&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Object.create &amp;lt;- create 함수가 있으면 해당 함수가 출력됩니다.&lt;br /&gt;
  없으면 undefined가 출력됩니다.&lt;/p&gt;

    &lt;p&gt;위 결과를 보면 출력되었으므로 create가 Object에 존재하는 것을 알 수 있습니다.&lt;/p&gt;

    &lt;p&gt;하지만 Object.prototype엔 존재하지 않는 것을 알 수 있습니다. (undefined)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;메소드 호출 방법&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Object.prototype.toString();&lt;/li&gt;
      &lt;li&gt;또는 인스턴스를 생성하여 호출&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// function toString(){ [native code] }&lt;/span&gt;
    
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// function toString(){ [native code] }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;Object.prototype에 toString이 존재하므로 함수 출력&lt;/li&gt;
      &lt;li&gt;인스턴스를 사용하여 메소드를 호출할 때는 prototype을 작성하지 않습니다.&lt;/li&gt;
      &lt;li&gt;prototype에 연결된 메소드로 인스턴스를 생성하기 때문입니다.&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;toString 함수는 위와 같이 두 가지 방법으로 호출할 수 있습니다.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;Object.prototype&lt;/li&gt;
      &lt;li&gt;인스턴스&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;함수와 메소드를 구분해야 하는 이유&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;JS 코드 작성 방법이 다르기 때문&lt;/li&gt;
      &lt;li&gt;함수는 파라미터에 값을 작성하고 메소드는 메소드 앞에 값을 작성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;그런데 함수와 메소드를 구분해야되는 또 다른 이유가 있습니다.&lt;/strong&gt;&lt;br /&gt;
물론 지금까지 봐왔듯이 자바스크립트 코드 작성방법이 다르기도 합니다만,&lt;br /&gt;
또 하나는 &lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;함수는 파라미터에 값을 작성하고, 메소드는 앞에 값을 작성합니다.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromCharCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1A&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;함수 앞에 배열로 값을 작성하면 Array 오브젝트의 함수가 호출되므로&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;String 오브젝트의 함수를 호출하면서 파라미터에 값을 작성해야 합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fromCharCode&lt;/code&gt;는 String 오브젝트에서 다뤘던 함수입니다.&lt;br /&gt;
&lt;strong&gt;파라미터들을 함수 앞에 작성 못했던 것은 배열로 작성해야됐기 때문입니다.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;함수 앞에 배열로 작성하면 &lt;strong&gt;자바스크립트는 함수 앞에 작성된 데이터 타입에 따라 빌트인 오브젝트 인스턴스를 만들고 거기에 있는 메소드를 호출하게 됩니다.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;그렇게되면 왼쪽은 String이 아니라 Array가 되어버립니다.&lt;br /&gt;
그럼 Array에는 fromCharCode가 없겠죠?&lt;br /&gt;
따라서 Error가 나게 됩니다.&lt;/p&gt;

  &lt;p&gt;그래서 파라미터에 다수를 작성해 &lt;strong&gt;함수로 호출&lt;/strong&gt;했던 것입니다.&lt;br /&gt;
그리고 함수 앞에는 빌트인 String 오브젝트를 작성했던 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;함수&lt;/strong&gt;는 함수 앞에 빌트인 오브젝트를 작성하고&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;메소드&lt;/strong&gt;는 Object.prototype.method로 호출할 수도 있고&lt;/li&gt;
  &lt;li&gt;인스턴스를 생성해서 호출할 수도 있고&lt;/li&gt;
  &lt;li&gt;그리고 지금까지 우리가 했던 함수 앞에 데이터를 작성할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;그래서 데이터 타입에 따라서 자바스크립트 엔진이 인스턴스를 만들어서 거기에 있는 메서드를 호출하게 한 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;지금까지의 강좌에서는 함수와 메소드를 구분하지 않았습니다.&lt;/strong&gt;&lt;br /&gt;
그러나 지금부턴 함수와 메소드를 구분하도록 하겠습니다.&lt;br /&gt;
함수와 메소드를 구분하는 기준은 &lt;strong&gt;prototype&lt;/strong&gt;입니다.&lt;br /&gt;
&lt;strong&gt;prototype&lt;/strong&gt;이 연결되어있으면 그것은 메소드이고,&lt;br /&gt;
&lt;strong&gt;prototype&lt;/strong&gt;이 연결안되고 바로 Object.create() 처럼 오브젝트에 연결되어있으면 그것은 함수입니다.&lt;/p&gt;

&lt;p&gt;그리고 함수는 함수 앞에 데이터를 작성할 수 없고 파라미터에 데이터를 작성해야 됩니다.&lt;br /&gt;
하지만 메소드는 메소드 앞에 데이터를 작성할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;메소드와-메서드&quot;&gt;메소드와 메서드&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;메서드(method)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;국립국어원 표준국어대사전&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;메소드는 검색되고 메서드는 검색되지 않음&lt;/li&gt;
      &lt;li&gt;프로그램과 관련지어 설명하고 있음&lt;/li&gt;
      &lt;li&gt;강좌에서는 메소드로 표기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;메소드와 메서드.&lt;br /&gt;
개발자들 사이에서 많이 회자되는 것입니다.&lt;br /&gt;
강좌에서 기준을 정해야될 것 같아서 조사를 해봤습니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Nov 2020 00:30:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/30/beginner.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/30/beginner.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>클릭 무한 슬라이드 인터렉션</title>
        <description>&lt;h2 id=&quot;클릭-무한-슬라이드-인터렉션&quot;&gt;클릭 무한 슬라이드 인터렉션&lt;/h2&gt;

&lt;p&gt;며칠전에 예전에 다니던 학원선생님의 부탁으로 신기한 인터렉션을 만들어봤습니다.&lt;br /&gt;
느낌만 따라한거라 똑같진 않습니다.&lt;br /&gt;
해당 페이지와 따라만들어본거 공유드립니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gogoro.com/smartscooter/s-performance/s2/cafe-racer/&quot; target=&quot;_blank&quot;&gt;링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 인터렉션 따라서 만들어본 페이지 : &lt;a href=&quot;https://hyungju-lee.github.io/hyungju-lee-interactions/scroll-interaction-5/tap-event3-ie10.html&quot; target=&quot;_blank&quot;&gt;https://hyungju-lee.github.io/hyungju-lee-interactions/scroll-interaction-5/tap-event3-ie10.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;위 사이트에서 canvas 태그로 만들어서 따라서 만들어봤습니다.&lt;br /&gt;
하지만 정확히 어떤 원리로 만든건진 모르겠습니다.
저는 &lt;code class=&quot;highlighter-rouge&quot;&gt;createElement&lt;/code&gt; 메소드로 가상의 &lt;code class=&quot;highlighter-rouge&quot;&gt;canvas&lt;/code&gt; 태그를 만들어 해당 &lt;code class=&quot;highlighter-rouge&quot;&gt;canvas&lt;/code&gt; 에 이미지들을 차례대로 그려 넣었고, 그 &lt;code class=&quot;highlighter-rouge&quot;&gt;canvas&lt;/code&gt; 의 그림을 전체 추출하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; 상에 있는 &lt;strong&gt;실제 canvas 태그에 그려넣었습니다. 이때 사용한 메소드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;getImageData&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;putImageData&lt;/code&gt; 입니다.&lt;/strong&gt;&lt;br /&gt;
CORS 정책에 의하여 로컬서버에서만 제대로 작동하는 메소드인 것 같습니다. (특히, 크롬은 CORS 정책이 더 엄격합니다.)&lt;/li&gt;
  &lt;li&gt;CORS 링크 : &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTTP/CORS&quot; target=&quot;_blank&quot;&gt;https://developer.mozilla.org/ko/docs/Web/HTTP/CORS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;CORS 란 간단하게 말해 서버에서 정보를 쉽게 빼내가지 못하도록 하는 일종의 정책같은 것입니다. 그래서 코드상 문제가 없어도 서버에서 통신을 끊어버리는? 그런 개념같습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;한계&lt;/strong&gt; : IE에선 새로고침할 때 이미지들의 &lt;code class=&quot;highlighter-rouge&quot;&gt;naturalWidth&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;naturalHeight&lt;/code&gt; 값을 제대로 못불러오는 버그가 있습니다. (다른 거 만들땐 안 이랬는데..) 그래서 일단 차선책으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; 함수를 사용했습니다. 해당 내용은 코드에 &lt;strong&gt;주석&lt;/strong&gt;으로 달아놨습니다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 27 Nov 2020 18:31:00 +0900</pubDate>
        <link>http://localhost:4000/js_interaction/2020/11/27/interaction.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_interaction/2020/11/27/interaction.html</guid>
        
        
        <category>js_interaction</category>
        
      </item>
    
      <item>
        <title>libSass, dart-sass (js버전, vm 버전)2</title>
        <description>&lt;h2 id=&quot;libsass-dart-sass-js버전-vm-버전2&quot;&gt;libSass, dart-sass (js버전, vm 버전)2&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://chipcullen.com/css-min-max-clamp-functions/&quot; target=&quot;_blank&quot;&gt;css스펙 min(), max(), clamp()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sass-lang.com/documentation/at-rules/use&quot; target=&quot;_blank&quot;&gt;dart-sass @use&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sass/sass/blob/master/accepted/module-system.md#timeline&quot; target=&quot;_blank&quot;&gt;https://github.com/sass/sass/blob/master/accepted/module-system.md#timeline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;min() / max() / clamp() 는 libsass나 dart-sass랑은 상관없고 그냥 CSS 스펙입니다.&lt;br /&gt;
그냥 해당 브라우저가 지원하는 함수인지 (calc()함수처럼) 아닌지 보고 사용해야되는 것입니다..&lt;/p&gt;

&lt;p&gt;@use 처럼 기능적으로 추가되는거만 살펴보면될거같습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;@use 는 javascript에서 import나 require 같은 기능을 하는건가봐요&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;dart-sass 사용하면 @use 로 네임스페이스 분류가 가능해져서 같은 이름의 믹스인도 파일이 다른데있으면 서로 충돌안나고 쉽게 관리가 가능해질거같아요.&lt;/p&gt;

&lt;p&gt;사스도 자바스크립트랑 똑같이 관리가능하도록 저렇게 만들었나보네요.&lt;br /&gt;
dart-sass 사용하면 파일관리도 더 편해질거같아요~!&lt;/p&gt;

&lt;p&gt;기존 사스 @import는 네임스페이스 분류없이 전역으로 영향끼쳐서 그런가봐요.&lt;br /&gt;
자바스크립트는 네임스페이스로 분류가되는데.&lt;br /&gt;
그래서 dart-sass에서 @use로 네임스페이스분류도 가능하게 하려고하나봐요&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;음 근데 dart-sass로 바꾸고 현재 @import로 불러와져있는거를 @use로 바꾼다고하면 @include로 믹스인함수 불러온거 다 수정해야될수도있겠네요..&lt;br /&gt;
dart-sass로 바꿔도 기존 @import로되어있는거 수정안하면 안해도되지만..&lt;br /&gt;
@import 구문을 @use로 바꾸면 @include로 불러와진 함수 다 수정해야될수도있을거같아요&lt;/p&gt;

&lt;p&gt;2022년까지만 @import 지원.. 여튼 바꿔야되는건 피할수없음&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;넵 지금저희가쓰는건 node-sass(libsass)이고 dart-sass는 2016년에 알파버전으로 나오고 2018년에 정식릴리즈된 사스같아요&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;근데 얼마전 10/26에 node-sass쓰지말라고 권고사항? 떠서 개발자들이 슬슬 갈아타는 중인가봐요&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Nov 2020 17:07:00 +0900</pubDate>
        <link>http://localhost:4000/node_module/2020/11/27/module.html</link>
        <guid isPermaLink="true">http://localhost:4000/node_module/2020/11/27/module.html</guid>
        
        
        <category>node_module</category>
        
      </item>
    
      <item>
        <title>10-4. Object 오브젝트(ES3 기준) / 빌트인 오브젝트 구조, prototype</title>
        <description>&lt;h2 id=&quot;10-4-object-오브젝트es3-기준--빌트인-오브젝트-구조-prototype&quot;&gt;10-4. Object 오브젝트(ES3 기준) / 빌트인 오브젝트 구조, prototype&lt;/h2&gt;

&lt;p&gt;빌트인 오브젝트 구조를 정리하는 차원에서 접근하도록 하겠습니다.&lt;br /&gt;
이 내용의 키워드는 &lt;strong&gt;구조&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;h2 id=&quot;빌트인-오브젝트-구조&quot;&gt;빌트인 오브젝트 구조&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;오브젝트 이름(Object, String, Number…)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;우선 오브젝트 이름이 필요합니다.&lt;br /&gt;
Object, String, Number.. 등이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;오브젝트.prototype&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;인스턴스 생성 가능 여부 기준&lt;/p&gt;

        &lt;p&gt;prototype이 있으면 인스턴스를 생성할 수 있고,&lt;br /&gt;
prototype이 없으면 인스턴스를 생성할 수 없습니다.&lt;/p&gt;

        &lt;p&gt;예를 들면 String, Number 오브젝트는 prototype이 있습니다.&lt;br /&gt;
하지만 수학 계산용 오브젝트인 &lt;code class=&quot;highlighter-rouge&quot;&gt;Math&lt;/code&gt; 오브젝트에는 &lt;strong&gt;prototype&lt;/strong&gt;이 없습니다.&lt;br /&gt;
따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Math&lt;/code&gt; 오브젝트는 인스턴스를 만들 수가 없습니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;프로퍼티를 연결하는 오브젝트&lt;/p&gt;

        &lt;p&gt;또한 prototype은 프로퍼티를 연결하는 오브젝트입니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;prototype에 아래처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;을 찍고 프로퍼티를 연결합니다.&lt;/strong&gt;&lt;br /&gt;
이것이 prototype의 기능입니다.&lt;/p&gt;

&lt;p&gt;prototype이 있으면 인스턴스를 생성할 수 있고 프로퍼티를 연결할 수 있습니다.&lt;br /&gt;
prototype이 없으면 인스턴스도 생성할 수 없고 프로퍼티도 연결할 수 없습니다.&lt;/p&gt;

&lt;p&gt;너무 심플하죠?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;오브젝트.prototype.constructor&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;오브젝트의 생성자&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 연산자로 호출할 때 오브잭트의 생성자 함수인 &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt;가 호출됩니다.&lt;br /&gt;
호출될 때 &lt;strong&gt;오브젝트.prototype.constructor&lt;/strong&gt;가 호출되는 것입니다.&lt;br /&gt;
즉, &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt;가 실질적으로 인스턴스를 새성하는 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;즉, prototype이 없으면 constructor는 존재하지 않죠?&lt;/strong&gt;&lt;br /&gt;
따라서 인스턴스를 생성할 수 없게 되는 겁니다.&lt;br /&gt;
그런데 &lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt;이 있으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;로 따라 붙습니다.&lt;/p&gt;

&lt;p&gt;즉, 이러한 특성 때문에 &lt;strong&gt;prototype 존재여부&lt;/strong&gt;로 인스턴스 생성가능 여부를 알 수 있는 것입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;오브젝트.prototype.method&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;메소드 이름과 함수 작성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;그리고 위와같이 작성할 수 있습니다.&lt;br /&gt;
method 자리에 다수의 method를 작성할 수 있습니다.&lt;br /&gt;
그런데요, 제가 여기서 지금 &lt;strong&gt;메소드&lt;/strong&gt;라고 했습니다.&lt;br /&gt;
&lt;strong&gt;지금까지는 메소드란 말 한번도 안쓰고, 함수라는 말을 썼습니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;함수와 메서드의 차이에 대해서는 다음절에서 다루도록 하겠습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;오브젝트 구조&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;개발자 도구 열기(Ctrl + Shift + i)&lt;/li&gt;
  &lt;li&gt;브라우저 새로고침 실행 (F5)&lt;/li&gt;
  &lt;li&gt;debugger 위치에서 실행 멈춤&lt;/li&gt;
  &lt;li&gt;debugger 종료 (F8)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/script/image211.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/static/img/script/image212.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/static/img/script/image213.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/static/img/script/image214.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/static/img/script/image215.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/static/img/script/image216.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/static/img/script/image217.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;빌트인 오브젝트를 다시한번 정리해보면, 우선 오브젝트 이름이 있어야됩니다.&lt;br /&gt;
그리고 &lt;strong&gt;오브젝트.prototype&lt;/strong&gt;이 있어야됩니다.&lt;br /&gt;
&lt;strong&gt;물론 없을 수도 있습니다.&lt;/strong&gt;&lt;br /&gt;
있으면 인스턴스를 만들 수 있다는 뜻입니다.&lt;br /&gt;
없으면 인스턴스를 만들 수 없는 것입니다.&lt;/p&gt;

&lt;p&gt;그리고 prototype에다가 프로퍼티를 연결합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;오브젝트.prototype.constructor&lt;/li&gt;
  &lt;li&gt;오브젝트.prototype.method&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 처럼 말입니다.&lt;br /&gt;
자바스크립트에서 prototype은 굉장히 중요한 의미를 같지만, 실제 기능적으로 보면 별거 없습니다.&lt;br /&gt;
그저 인스턴스를 만드는 기준 역할과 프로퍼티를 연결하는 역할을 할 뿐입니다.&lt;/p&gt;

&lt;p&gt;그런데 자바스크립트 개발자 사이에선 prototype은 굉장히 큰 의미가 있다고 회자됩니다.&lt;br /&gt;
(하지만 안에 내용을 보면 별거 없다는 겁니다.)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;new Number()&lt;/code&gt;를 통해 자바스크립트 엔진은 생성자 함수인 &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt;를 호출한다.&lt;br /&gt;
prototype에 연결되어 있는 함수를 메소드라고 한다.&lt;br /&gt;
이것은 다음 절에서 다루겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/script/image218.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Nov 2020 15:55:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/26/beginner8.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/26/beginner8.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>10-3. Object 오브젝트(ES3 기준) / Object 인스턴스 생성, 프리미티브 값 구하기</title>
        <description>&lt;h2 id=&quot;10-3-object-오브젝트es3-기준--object-인스턴스-생성-프리미티브-값-구하기&quot;&gt;10-3. Object 오브젝트(ES3 기준) / Object 인스턴스 생성, 프리미티브 값 구하기&lt;/h2&gt;

&lt;h2 id=&quot;new-object&quot;&gt;new Object()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;값opt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;생성한 인스턴스&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;인스턴스를 생성하여 반환&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파라미터의 데이터 타입에 따라&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;생성할 인스턴스 결정&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// number&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 223&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ol&gt;
          &lt;li&gt;new Number(123)로 생성한 인스턴스 타입은 object이며 프리미티 값은 123&lt;/li&gt;
        &lt;/ol&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// object&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 223&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ol&gt;
          &lt;li&gt;new Object(123)로 생성한 인스턴스의 타입도 object이고 프리미티 값은 123&lt;/li&gt;
          &lt;li&gt;2개 인스턴스 모두 100을 더할 수 있으며 값이 더해진다는 것은 Number 타입이라는 것&lt;/li&gt;
          &lt;li&gt;new Object()는 파라미터 값 타입이&lt;br /&gt;
Number 타입이면 Number 인스턴스를 생성하고&lt;br /&gt;
String 타입이면 String 인스턴스를 생성&lt;/li&gt;
        &lt;/ol&gt;

        &lt;hr /&gt;

        &lt;ul&gt;
          &lt;li&gt;빌트인 Object 오브젝트와 다른 빌트인 오브젝트와의 차이점&lt;/li&gt;
          &lt;li&gt;new Number()는 Number 타입 인스턴스 생성&lt;/li&gt;
          &lt;li&gt;new String()은 String 타입 인스턴스 생성&lt;/li&gt;
        &lt;/ul&gt;

        &lt;hr /&gt;

        &lt;p&gt;원래 Object는 { key: value } 형태의 프로퍼티입니다.&lt;br /&gt;
  그런데 newObj+100 이 223 출력.&lt;br /&gt;
  newObj 프리미티브 값으로 123이 설정되었고, 이것의 타입은 Number 타입이라는 겁니다.&lt;br /&gt;
  즉, newObj는 Number 인스턴스인 겁니다.&lt;br /&gt;
  이와같이 new Object()는 파라미터 값에 따라서 인스턴스가 결정됩니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;파라미터 값이 undefined, null이면&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;빈 Object 인스턴스 반환&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;new Object()처럼 파라미터를 작성하지 않으면 undefined를 작성한 것과 같으며 값을 갖지 않은 Object 인스턴스 생성&lt;br /&gt;
{}는 Object의 프리미티브 디폴트 값입니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;object&quot;&gt;Object()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;값opt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;생성한 인스턴스&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Object 인스턴스 생성 &lt;mark&gt;new 연산자를 사용하지 않은것 뿐, new 있을 때와 없을 때 파라미터에서만 좀 차이있는거같음 - 아니네, 그냥 똑같음 차이점없음&lt;/mark&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;파라미터는 { key(name) : value } 형태&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;JS책&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {name: &quot;JS책&quot;} &amp;lt;- 파라미터로 작성된 값이 인스턴스의 프리미티브 값이 됨&lt;/span&gt;
    
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emptyObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emptyObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;파라미터를 작성하지 않으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;new Object()&lt;/code&gt;와 같음&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;object-생성-방법&quot;&gt;Object 생성 방법&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;var abc = {};&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;var abc = Object() 와 같음&lt;/li&gt;
      &lt;li&gt;즉, var abc = {}을 실행하면&lt;br /&gt;
Object 인스턴스가 생성됨&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {name: &quot;value&quot;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;true가 출력된 것은 Object로 생성한 인스턴스라는 것을 뜻합니다.&lt;/li&gt;
    &lt;/ol&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {name: &quot;value&quot;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;true가 출력된 것은 Object로 생성한 인스턴스라는 것을 뜻합니다.&lt;/li&gt;
      &lt;li&gt;Object()와 Object 리터럴{} 모두 Object 인스턴스를 생성합니다.&lt;/li&gt;
      &lt;li&gt;&lt;mark&gt;그래서 Object()를 사용하지 않고 간단하게 {}를 사용합니다.&lt;/mark&gt;&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;그래서 보통 자바스크립트 개발자들은 {} 중괄호를 사용해서 빌트인 오브젝트 오브젝트 인스턴스를 만듭니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;{} 표기를&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;오브젝트 리터럴(Literal)이라고 부름&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;valueof&quot;&gt;valueOf()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;data&lt;/td&gt;
      &lt;td&gt;Object 인스턴스, 숫자&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;사용하지 않음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;프리미티브 값&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;data 위치에 작성한 Object 인스턴스의 프리미티브 값 반환&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {key:&quot;value&quot;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;obj에 프리미티브 값으로 설정된 값 반환&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 26 Nov 2020 12:26:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/26/beginner7.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/26/beginner7.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>10-2. Object 오브젝트(ES3 기준) / 프로퍼티 리스트</title>
        <description>&lt;h2 id=&quot;10-2-object-오브젝트es3-기준--프로퍼티-리스트&quot;&gt;10-2. Object 오브젝트(ES3 기준) / 프로퍼티 리스트&lt;/h2&gt;

&lt;p&gt;빌트인 Object 프로퍼티(ES3)&lt;br /&gt;
빌트인 Object 오브젝트라고 부르는 것이 맞지만 편의를 위해 빌트인 Object라고 부르겠습니다.&lt;/p&gt;

&lt;p&gt;빌트인 Object 강좌는 ES3와 ES5로 나뉘어져있습니다.&lt;br /&gt;
&lt;strong&gt;이 장은 ES3 기준입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;프로퍼티-리스트es3&quot;&gt;프로퍼티 리스트(ES3)&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;이름&lt;/th&gt;
      &lt;th&gt;개요&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;new Object()&lt;/td&gt;
      &lt;td&gt;파라미터 데이터 타입의 인스턴스 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Object()&lt;/td&gt;
      &lt;td&gt;Object 인스턴스 생성&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Object.prototype&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;이름&lt;/th&gt;
      &lt;th&gt;개요&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;constructor&lt;/td&gt;
      &lt;td&gt;생성자&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;valueOf()&lt;/td&gt;
      &lt;td&gt;프리미티브 값 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;hasOwnProperty()&lt;/td&gt;
      &lt;td&gt;프로퍼티 소유 여부 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;propertyIsEnumerable()&lt;/td&gt;
      &lt;td&gt;프로퍼티 열거 여부 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;isPrototypeOf()&lt;/td&gt;
      &lt;td&gt;prototype의 존재 여부 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;toString()&lt;/td&gt;
      &lt;td&gt;문자열로 변환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;toLocaleString()&lt;/td&gt;
      &lt;td&gt;지역화 문자열로 변환&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;new-object&quot;&gt;new Object()&lt;/h3&gt;
&lt;p&gt;Number와 String은 각 타입에 맞는 인스턴스를 만들게 되지만 new Object()는 파라미터 값 타입에 따라서 인스턴스를 만들기도 합니다.&lt;br /&gt;
예를들면, 파라미터 값의 타입이 Number이면 Number 인스턴스를 만들고, String이면 String 인스턴스를 만듭니다.&lt;/p&gt;

&lt;h3 id=&quot;object&quot;&gt;Object()&lt;/h3&gt;
&lt;p&gt;Object() 함수는 Object 인스턴스를 생성합니다.&lt;br /&gt;
다만, new 연산자를 사용하지 않은 것 뿐입니다.&lt;br /&gt;
Number() 함수와 String() 함수가 값의 타입(유형)을 변형하는 것에 비하면 차이가 많이 납니다.&lt;/p&gt;

&lt;h3 id=&quot;valueof&quot;&gt;valueOf()&lt;/h3&gt;
&lt;p&gt;프리미티브 값을 반환합니다.  &lt;br /&gt;
여기서 프리미티브 값이란 인스턴스에 설정된 값입니다.&lt;/p&gt;

&lt;h3 id=&quot;hasownproperty&quot;&gt;hasOwnProperty()&lt;/h3&gt;
&lt;p&gt;프로퍼티 소유 여부를 반환합니다.  &lt;br /&gt;
프로퍼티는 { key: value } 입니다.  &lt;br /&gt;
has는 ‘가지고있다’ 라는 뜻이고 자바스크립트에서 Own은 ‘내가 만든’이라는 뜻입니다.&lt;br /&gt;
내가 만든 프로퍼티는 수정 삭제가 가능하지만 원래 있던 프로퍼티는 수정 삭제가 불가능하다는 의미가 포함되어있습니다.&lt;/p&gt;

&lt;h3 id=&quot;propertyisenumerable&quot;&gt;propertyIsEnumerable()&lt;/h3&gt;
&lt;p&gt;프로퍼티 열거 여부입니다.&lt;br /&gt;
Enumerable 열거할 수 있는, 프로퍼티를 열거할 수 있느냐 라는 뜻입니다.&lt;/p&gt;

&lt;h3 id=&quot;isprototypeof&quot;&gt;isPrototypeOf()&lt;/h3&gt;
&lt;p&gt;프로토타입의 존재여부를 반환합니다.&lt;/p&gt;

&lt;h3 id=&quot;tolocalestring&quot;&gt;toLocaleString()&lt;/h3&gt;
&lt;p&gt;Number 오브젝트의 toLocaleString()은 숫자를 지역화 문자로 변형했습니다.&lt;br /&gt;
예를 들면 숫자를 한자로 표시했죠?&lt;br /&gt;
String 오브젝트에서 locale은 위치를 나타냈습니다.&lt;br /&gt;
전, 후, 그리고 같은 위치&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;여기서 ES3 기준, 빌트인 오브젝트 오브젝트의 특징이라고 한다면, 여섯개의 함수가 있죠?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. valueOf()
2. hasOwnProperty()
3. propertyIsEnumerable()
4. isPrototypeOf()
5. toString()
6. toLocaleString()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여섯개의 함수는 빌트인 오브젝트로 인스턴스를 만드는 오브젝트에 모두 포함됩니다.&lt;br /&gt;
인스턴스를 만들 수 없는 오브젝트엔 포함되지 않지만 인스턴스를 만드는 오브젝트엔 모두 포함됩니다.&lt;br /&gt;
이것이 ES3 기준에 빌트인 오브젝트 오브젝트의 특징입니다.&lt;br /&gt;
&lt;strong&gt;그래서 ES5와 ES3를 구분했습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;~~.&lt;strong&gt;proto&lt;/strong&gt;.&lt;strong&gt;proto&lt;/strong&gt; : &amp;lt;- 여기서 마지막 __proto__에 위 6가지 함수가 포함되는 것입니다.&lt;/p&gt;

&lt;p&gt;이것이 특징입니다.&lt;br /&gt;
이에 대해서는 계속해서 살펴보겠습니다.&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Nov 2020 12:15:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/26/beginner6.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/26/beginner6.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>10-1. Object 오브젝트(ES3 기준) / 자바스크립트 오브젝트 구분, 네이티브/호스트 오브젝트, 오브젝트와 인스턴스</title>
        <description>&lt;h2 id=&quot;10-1-object-오브젝트es3-기준--자바스크립트-오브젝트-구분-네이티브호스트-오브젝트-오브젝트와-인스턴스&quot;&gt;10-1. Object 오브젝트(ES3 기준) / 자바스크립트 오브젝트 구분, 네이티브/호스트 오브젝트, 오브젝트와 인스턴스&lt;/h2&gt;

&lt;p&gt;이번장은 빌트인 오브젝트 오브젝트입니다.&lt;br /&gt;
빌트인 오브젝트를 살펴보기 앞서 자바스크립트의 오브젝트를 살펴보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;자바스크립트-오브젝트&quot;&gt;자바스크립트 오브젝트&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;오브젝트 구분&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;빌트인 오브젝트(Built-in Object)&lt;/li&gt;
      &lt;li&gt;네이티브 오브젝트(Native Object)&lt;/li&gt;
      &lt;li&gt;호스트 오브젝트(Host Object)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;네이티브-오브젝트&quot;&gt;네이티브 오브젝트&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;빌트인 오브젝트&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;사전에 만들어 놓은 오브젝트&lt;/li&gt;
      &lt;li&gt;빌트인 Number 오브젝트,&lt;br /&gt;
빌트인 String 오브젝트,&lt;br /&gt;
…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;ES5 기준으로 11개의 빌트인 오브젝트가 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;네이티브 오브젝트&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;JS 스펙에서 정의한 오브젝트&lt;/li&gt;
      &lt;li&gt;여기에 빌트인 오브젝트 포함&lt;/li&gt;
      &lt;li&gt;&lt;mark&gt;JS 코드를 실행할 때 만드는 오브젝트&lt;/mark&gt;&lt;/li&gt;
      &lt;li&gt;&lt;mark&gt;예 : Argument 오브젝트&lt;/mark&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Argument 오브젝트는 함수가 호출되면 함수 안에서 만들고 함수를 빠져나오면 자바스크립트 엔진이 자동적으로 지웁니다.&lt;br /&gt;
  물론 이것도 빌트인 오브젝트이지만 사용성에서 약간 차이가 있죠?&lt;br /&gt;
  즉 자바스크립트 오브젝트는 빌트인 오브젝트가 네이티브 오브젝트에 속하므로 네이티브 오브젝트와 호스트 오브젝트로 나눌 수 있습니다.&lt;br /&gt;
  &lt;strong&gt;ES5 기준입니다.&lt;/strong&gt;&lt;br /&gt;
  &lt;strong&gt;ES6에선 보다 더 세밀하게 구분됩니다.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;호스트-오브젝트&quot;&gt;호스트 오브젝트&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;빌트인, 네이티브 오브젝트를 제외한 오브젝트&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;예: window, DOM 오브젝트&lt;br /&gt;
DOM 오브젝트 : Document Object Model&lt;br /&gt;
이 오브젝트는 우리가 마우스를 클릭했을 때 클릭한 것을 인식하는 기능을 제공해줍니다.&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nodeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// DIV&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ol&gt;
          &lt;li&gt;querySelector()는 DOM 함수&lt;/li&gt;
          &lt;li&gt;DOM에서 제공하는 오브젝트를 호스트(Host) 오브젝트라고 부릅니다.&lt;/li&gt;
          &lt;li&gt;마치 JS 함수처럼 DOM 함수를 사용&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;querySelector&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이 함수는 자바스크립트에서 제공하는 것이 아니라, 즉 자바스크립트 스펙에 작성된 함수가 아니라 DOM 스펙에 작성된 함수입니다.&lt;br /&gt;
그런데도 마치 자바스크립트 함수처럼 보이죠?&lt;br /&gt;
그리고 어떠한 처리도 하지않고 바로 사용할 수 있죠?&lt;/p&gt;

&lt;p&gt;여기서 이 함수의 구조를 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;document.querySelector()&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;이 있죠?&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;이 있으니깐 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 앞(document)은 오브젝트가되고 그 뒤엔 함수가 되겠네요.&lt;br /&gt;
이때 이러한 오브젝트를 호스트 오브젝트라고 부릅니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JS는 호스트 환경에서&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;브라우저의 모든 요소 기술을&lt;/li&gt;
      &lt;li&gt;연결하고 융합하며 이를 제어&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;즉, 자바스크립트는 이러한 호스트 오브젝트를 마치 자바스크립트처럼 사용할 수가 있습니다.&lt;br /&gt;
그리고 호스트 오브젝트는 자바스크립트에서 사용할 수 있는 형태로 만들어서 제공합니다.&lt;br /&gt;
이러한 환경을 &lt;strong&gt;호스트 환경&lt;/strong&gt;이라고 합니다.&lt;/p&gt;

&lt;p&gt;자바스크립트는 이러한 &lt;strong&gt;호스트 환경&lt;/strong&gt;에서 브라우저의 모든 요소기술을..(요소기술 = 호스트 오브젝트)&lt;br /&gt;
이러한 기술들을 연결하고 융합하며 이를 제어합니다.&lt;/p&gt;

&lt;p&gt;예를 들어 Dom Object Model 에서 이벤트를 인식하게 하려면 이벤트를 설정해야겠죠?&lt;br /&gt;
그것도 DOM에서 제공합니다.&lt;br /&gt;
하지만 그것을 자바스크립트 파일 안에 작성합니다.&lt;br /&gt;
마치 자바스크립트처럼요.&lt;/p&gt;

&lt;p&gt;그리고 클릭을 하게되면 클릭한 것을 인식해야겠죠?&lt;br /&gt;
그것도 DOM에서 제공합니다.&lt;br /&gt;
그러나 자바스크립트처럼 사용할 수 있는거죠.&lt;br /&gt;
클릭을 했으니 뭔가 처리를 해야겠죠?&lt;br /&gt;
그때 자바스크립트로 처리하는 거죠.&lt;br /&gt;
그에따라서 연결되는 처리가 있으면 또 연결하고 .. 이러한 호스트 환경에서 자바스크립트가 실행됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이 시점에서 이러한 것을 말씀드리는 이유.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;자바스크립트 개발자는 자바스크립트 하나만으로 끝나는 것이 아니다라는 거죠.&lt;br /&gt;
즉, 이런 호스트 환경의 호스트 오브젝트들을 하나씩하나씩 배워나가야 됩니다.&lt;br /&gt;
마우스 클릭을 인식하려면 DOM을 배워야됩니다.&lt;br /&gt;
그런데 브라우저의 요소 기술들은 매우 많습니다.&lt;br /&gt;
그리고 앞으로도 계속 나올거라는 거죠.&lt;br /&gt;
&lt;strong&gt;이것이 자바스크립트 개발자의 방향성입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이것을 말씀드리기 위해서 호스트 오브젝트 개념을 말씀드렸습니다.&lt;br /&gt;
자바스크립트 개발자는 자바스크립트에서 끝나는 것이 아니다.&lt;br /&gt;
계속해서 호스트 오브젝트라는 것을 배워야된다.&lt;/p&gt;

&lt;h2 id=&quot;오브젝트와-인스턴스&quot;&gt;오브젝트와 인스턴스&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;강좌에서는&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;오브젝트, 인스턴스를 구분&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/script/image210.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 26 Nov 2020 12:00:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/26/beginner5.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/26/beginner5.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>9-10. String 오브젝트 / Unicode 관련 함수</title>
        <description>&lt;h2 id=&quot;9-10-string-오브젝트--unicode-관련-함수&quot;&gt;9-10. String 오브젝트 / Unicode 관련 함수&lt;/h2&gt;

&lt;h2 id=&quot;charcodeat&quot;&gt;charCodeAt()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;data&lt;/td&gt;
      &lt;td&gt;반환 대상&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;반환 기준 인덱스(index)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;인덱스 번째 문자&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;인덱스번째의 문자를 &lt;mark&gt;유니코드의 코드 포인트 값으로 반환&lt;/mark&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인덱스가 문자열 길이보다 크면 NaN 반환&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1Aa가&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 49&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 65&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 97&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 44032&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;charCodeAt(12)에서 12번째가 없으며 NaN 반환&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fromcharcode&quot;&gt;fromCharCode()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;data&lt;/td&gt;
      &lt;td&gt;String 오브젝트&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;유니코드, 다수 작성 가능&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;변환한 문자&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;파라미터의 유니코드를 &lt;mark&gt;문자열로 변환하고 연결하여 반환&lt;/mark&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;작성하지 않으면 빈 문자열 반환&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;작성 방법&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;data 위치에 &lt;strong&gt;&lt;span style=&quot;coloer:red&quot;&gt;String 오브젝트&lt;/span&gt;&lt;/strong&gt; 작성&lt;br /&gt;
변환 대상 값을 작성하지 않음&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;String.fromCharCode() 형태&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromCharCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44032&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1Aa가&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;여태까지 값을 메소드(함수) 앞에다 붙였었습니다.&lt;br /&gt;
값.fromCharCode() 이런식으로..&lt;br /&gt;
그럼 값을 평가해 값이 String 데이터면 빌트인 String 오브젝트에서 인스턴스를 생성해 그 인스턴스에서 fromCharCode() 함수를 호출해 처리를 했었습니다.&lt;/p&gt;

        &lt;p&gt;그런데 위 식은 그런 형태가 아닙니다.&lt;br /&gt;
함수 앞에 String 오브젝트 이름을 작성했고 값을 파라미터에다 작성했습니다.&lt;br /&gt;
&lt;strong&gt;이 형태는 어떤 형태일까요?&lt;/strong&gt;&lt;/p&gt;

        &lt;p&gt;prototype이란게 있었죠?&lt;br /&gt;
인스턴스로 값을 복사할 때 prototype 오브젝트에 속한 프로퍼티들은 복사했지만, prototype과 같은 수준에 있는 프로퍼티들은 복사하지 않았습니다.&lt;br /&gt;
&lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;그 같은 수준에 있는 프로퍼티들은 원본에서 확인하라고 했었습니다.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

        &lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;바로 그 원본에 속한 것이 fromCharCode 함수입니다.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;따라서 원본의 fromCharCode 함수를 봐야되니깐 원래 있었던 빌트인 String 오브젝트를 앞에 명시한 것입니다.&lt;br /&gt;
그래야 원본에 있는 것이 불러와지겠죠.&lt;/p&gt;

&lt;p&gt;근데 그러면 fromCharCode 함수는 왜 이렇게 만들었냐는 것이죠.&lt;br /&gt;
왜 파라미터를 다른 함수와 똑같이 앞에 작성하게 만들지 않았냐는 것이죠.&lt;/p&gt;

&lt;p&gt;49, 65, 97, 44032를 앞에 작성하려면 배열을 사용해야됩니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44032&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromCharCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;그럼 위 코드는 빌트인 String 오브젝트에 속한 fromCharCode 함수를 부르는 것이 아니라 &lt;span style=&quot;color:red&quot;&gt;빌트인 Array 오브젝트에 있는 fromCharCode 함수를 부르게될 것&lt;/span&gt;입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;자바스크립트는 함수 앞에 작성된 데이터 타입에 따라 오브젝트를 불러오기 때문입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그래서 위와 같은 형태를 취한 겁니다.&lt;br /&gt;
파라미터에다가 다수를 작성할 수 있도록 원본에 함수를 작성한 것입니다.&lt;br /&gt;
일관성이 좀 없는 것처럼 보이지만 나름대로 어려움이 있었던 겁니다.&lt;br /&gt;
49, 65, 97, 44032를 함수 앞에 작성할 수 없는 어려움입니다.&lt;br /&gt;
그래서 원 오브젝트로 올려버린겁니다.&lt;br /&gt;
이건 어쩔 수 없죠.&lt;br /&gt;
&lt;strong&gt;자바스크립트 구조를 따르다보니까 어쩔 수 없는 겁니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;localecompare&quot;&gt;localeCompare()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;data&lt;/td&gt;
      &lt;td&gt;비교 대상&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;비교할 값&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;1(앞), 0(같음), -1(뒤)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;값을 비교하여 위치를 나타내는 값으로 반환&lt;/li&gt;
  &lt;li&gt;위치 값: 1(앞), 0(같음), -1(뒤)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Unicode 사전 순으로 비교&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;나&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localeCompare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;가&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localeCompare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;나&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localeCompare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;다&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;“가”가 “나”보다 앞에 있으므로 1 반환&lt;/li&gt;
      &lt;li&gt;비교 기준과 비교 대상이 모두 “나”이므로 0&lt;/li&gt;
      &lt;li&gt;“다”가 “나”보다 뒤에 있으므로 -1 반환&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 26 Nov 2020 11:44:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/26/beginner4.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/26/beginner4.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
  </channel>
</rss>
