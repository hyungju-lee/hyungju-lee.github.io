<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LEE HYUNG JU</title>
    <description>Jekyll Blog</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 29 Sep 2020 01:01:18 +0900</pubDate>
    <lastBuildDate>Tue, 29 Sep 2020 01:01:18 +0900</lastBuildDate>
    <generator>Jekyll v4.0.1</generator>
    
      <item>
        <title>36. ES2020 New Features</title>
        <description>&lt;h2 id=&quot;36-es2020-new-features&quot;&gt;36. ES2020 New Features&lt;/h2&gt;

&lt;p&gt;프로그래밍의 한 가지 장점은 지속적인 학습 없이는 프로그래밍 언어의 전문가가 될 수 없다는 것입니다.&lt;br /&gt;
모든 주요 릴리스에 추가 기능이 도입됨에 따라 프로그래밍 언어는 시간이 지남에 따라 지속적으로 발전합니다.&lt;/p&gt;

&lt;p&gt;즉, 버전 업데이트와 함께 더 나은 대안이 출시 될 것이므로 개념에 대한 전문 지식이 구식이되거나 향후 10 년 내에 더 이상 사용되지 않을 것입니다.&lt;br /&gt;
이것은 모든 프로그래밍 언어에서 매우 일반적인 시나리오입니다.&lt;/p&gt;

&lt;p&gt;ES2020은 선택적 체인, nullish 병합, 동적 가져 오기 등을 포함한 몇 가지 새로운 기능을 출시했습니다.&lt;br /&gt;
빠르게 변화하는 IT 세계에 발 맞춰 이러한 새로운 개념을 배우는 것이 중요합니다.&lt;br /&gt;
여기 내 블로그 게시물에서 새로 출시 된 기능을 확인할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.bitsrc.io/es2020-has-been-finalized-here-is-what-im-excited-about-414959bc2f7f&quot; target=&quot;_blank&quot;&gt;ES2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;언어를 습득하려면 수년 간의 경험과 시간이 필요하지만 무엇을 습득해야하는지 알면 작업이 쉬워집니다.&lt;/p&gt;

&lt;p&gt;아래 언급 된 리소스를 통해 위의 36 개 개념 각각에 대한 학습 자료를 찾으십시오.&lt;br /&gt;
이 Github 저장소는 시작하기에 좋은 곳입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/leonardomso/33-js-concepts&quot; target=&quot;_blank&quot;&gt;자바스크립트 공부 사이트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 28 Sep 2020 23:20:00 +0900</pubDate>
        <link>http://localhost:4000/js/2020/09/28/javascript36.html</link>
        <guid isPermaLink="true">http://localhost:4000/js/2020/09/28/javascript36.html</guid>
        
        
        <category>js</category>
        
      </item>
    
      <item>
        <title>35. Destructuring Assignment (해체 할당)</title>
        <description>&lt;h2 id=&quot;35-destructuring-assignment-해체-할당&quot;&gt;35. Destructuring Assignment (해체 할당)&lt;/h2&gt;

&lt;p&gt;비 구조화 할당 연산자는 ES6에서 도입되었습니다.&lt;br /&gt;
확실히 잘 알고 있어야 할 사용 사례가 많이 있습니다.&lt;br /&gt;
이전 코딩 방식보다 훨씬 효율적입니다.&lt;br /&gt;
이를 스프레드 연산자라고도합니다.&lt;/p&gt;

&lt;p&gt;내 기사에서 구조 해제 할당에 대해 자세히 읽을 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/better-programming/5-uses-of-the-es6-spread-operator-ef90bdff4d56&quot; target=&quot;_blank&quot;&gt;비구조화 할당&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 28 Sep 2020 23:18:00 +0900</pubDate>
        <link>http://localhost:4000/js/2020/09/28/javascript35.html</link>
        <guid isPermaLink="true">http://localhost:4000/js/2020/09/28/javascript35.html</guid>
        
        
        <category>js</category>
        
      </item>
    
      <item>
        <title>34. Clean Code Principles</title>
        <description>&lt;h2 id=&quot;34-clean-code-principles&quot;&gt;34. Clean Code Principles&lt;/h2&gt;

&lt;p&gt;이것은 프로그래밍 언어에 관계없이 모든 개발자가 습득해야하는 필수 기술입니다.&lt;br /&gt;
각 프로그래밍 언어에는 별도의 우수 사례 세트가 있습니다.&lt;br /&gt;
이러한 “좋은”관행은 주관적이고 직장마다 다르지만 “좋은”것으로 합의 된 몇 가지 관행이 있습니다.&lt;/p&gt;

&lt;p&gt;이러한 코드 원칙을 따르면 모든 사람이 코드를 읽고 유지 관리 할 수 있습니다.&lt;br /&gt;
이를 통해 귀하와 귀하의 팀이 애플리케이션 개발 중에 원활하게 협력 할 수 있습니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Sep 2020 23:17:00 +0900</pubDate>
        <link>http://localhost:4000/js/2020/09/28/javascript34.html</link>
        <guid isPermaLink="true">http://localhost:4000/js/2020/09/28/javascript34.html</guid>
        
        
        <category>js</category>
        
      </item>
    
      <item>
        <title>33. Functional Programming</title>
        <description>&lt;h2 id=&quot;33-functional-programming&quot;&gt;33. Functional Programming&lt;/h2&gt;

&lt;p&gt;Wiki에 따르면 “함수형 프로그래밍은 컴퓨터 프로그램의 구조와 요소를 구축하는 스타일 인 프로그래밍 패러다임으로, 
계산을 수학적 함수의 평가로 취급하고 &lt;strong&gt;스테이트(state)와 데이터(data)를 변경하는 것을 방지&lt;/strong&gt;합니다.”&lt;/p&gt;

&lt;p&gt;마스터해야 할 함수형 프로그래밍의 몇 가지 개념이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;순수 함수(Pure functions)&lt;/li&gt;
  &lt;li&gt;불변성(Immutability)&lt;/li&gt;
  &lt;li&gt;참조 투명성(Referential transparency)&lt;/li&gt;
  &lt;li&gt;고차 함수(Higher-order functions)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;함수형 프로그래밍의 이러한 개념을 이해하면 확실히 우위를 점할 수 있습니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Sep 2020 23:14:00 +0900</pubDate>
        <link>http://localhost:4000/js/2020/09/28/javascript33.html</link>
        <guid isPermaLink="true">http://localhost:4000/js/2020/09/28/javascript33.html</guid>
        
        
        <category>js</category>
        
      </item>
    
      <item>
        <title>32. Design Patterns</title>
        <description>&lt;h2 id=&quot;32-design-patterns&quot;&gt;32. Design Patterns&lt;/h2&gt;

&lt;p&gt;소프트웨어 엔지니어링에서 디자인 패턴은 일반적으로 발생하는 문제에 대한 잘 알려진 반복 가능한 솔루션입니다.&lt;br /&gt;
여러 디자인 패턴이 있으며 각각 고유한 사용 사례가 있습니다.&lt;br /&gt;
23 Gang of Four(GoF) 패턴은 일반적으로 다른 모든 패턴의 기초로 간주됩니다.&lt;br /&gt;
그것들을 모두 아는 것은 매우 어렵지만 적어도 그들의 사용 사례를 이해하려고 노력할 수 있습니다.&lt;/p&gt;

&lt;p&gt;다음은 JavaScript에서 23 개의 GoF 패턴을 구현 한 Felipe의 훌륭한 저장소입니다.&lt;br /&gt;
이 기사 끝에 언급 된 자원을 살펴보고 이 기사에 영감을 준 Leonardo의 멋진 자원에 익숙해 지십시오.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fbeline/Design-Patterns-JS&quot; target=&quot;_blank&quot;&gt;저장소&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 28 Sep 2020 23:12:00 +0900</pubDate>
        <link>http://localhost:4000/js/2020/09/28/javascript32.html</link>
        <guid isPermaLink="true">http://localhost:4000/js/2020/09/28/javascript32.html</guid>
        
        
        <category>js</category>
        
      </item>
    
      <item>
        <title>31. Inheritance, Polymorphism, and Code Reuse (상속, 다형성 및 코드 재사용)</title>
        <description>&lt;h2 id=&quot;31-inheritance-polymorphism-and-code-reuse-상속-다형성-및-코드-재사용&quot;&gt;31. Inheritance, Polymorphism, and Code Reuse (상속, 다형성 및 코드 재사용)&lt;/h2&gt;

&lt;p&gt;JavaScript의 &lt;strong&gt;상속&lt;/strong&gt;은 프로토타입과 함께 작동합니다.&lt;br /&gt;
이는 JavaScript가 비 OOP 언어이기 때문입니다.&lt;br /&gt;
그러나 JavaScript는 프로토타입 상속을 제공하여 OOP의 일부 기능을 제공합니다.&lt;/p&gt;

&lt;p&gt;반면 &lt;strong&gt;다형성&lt;/strong&gt;은 객체, 변수 또는 함수가 여러 형태를 취할 수있는 개념입니다.&lt;br /&gt;
JavaScript에서는 다형성의 효과를 보기가 조금 더 어렵습니다.&lt;br /&gt;
보다 고전적인 유형의 다형성이 정적으로 형식화 된 시스템에서 더 분명하기 때문입니다.&lt;/p&gt;

&lt;p&gt;위의 두 개념은 JavaScript에서 코드를 &lt;strong&gt;재사용&lt;/strong&gt;하는 데 도움이됩니다.&lt;br /&gt;
특히 JavaScript를 사용하여 위의 두 가지 개념을 확실히 이해하면 매우 높은 품질과 실용성을 갖춘 코드를 작성할 수 있습니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Sep 2020 23:01:00 +0900</pubDate>
        <link>http://localhost:4000/js/2020/09/28/javascript31.html</link>
        <guid isPermaLink="true">http://localhost:4000/js/2020/09/28/javascript31.html</guid>
        
        
        <category>js</category>
        
      </item>
    
      <item>
        <title>30. Algorithms</title>
        <description>&lt;h2 id=&quot;30-algorithms&quot;&gt;30. Algorithms&lt;/h2&gt;

&lt;p&gt;이것은 컴퓨터 과학 과정에서 가장 먼저 배우게 될 것 중 하나입니다.&lt;br /&gt;
간단히 말해서 알고리즘은 당신이 무언가를 성취하는 방법에 대한 단계별 프로세스입니다.&lt;br /&gt;
프로그래머는 알고리즘 관점에서 모든 문제를 볼 수 있어야합니다.&lt;br /&gt;
그들은 단계별 프로세스에서 문제와 해결책을 구조화 할 수 있어야합니다.&lt;br /&gt;
이 알고리즘은 나중에 프로그램으로 작성할 것입니다.&lt;/p&gt;

&lt;p&gt;수천 개의 사용 사례에 대한 수많은 알고리즘이 있지만 두 가지 사용 사례는 매우 일반적입니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Search&lt;/li&gt;
  &lt;li&gt;Sort&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 두 가지 사용 사례는 프로그래머에게 매우 일반적이며, 최소한 사용 가능한 잘 알려진 알고리즘에 대한 철저한 지식이 있어야합니다.&lt;br /&gt;
이러한 알고리즘 중 하나를 사용해야한다는 고정 된 규칙은 없지만 이러한 알고리즘은 성능 측면에서 잘 알려져 있고 잘 문서화되어 있습니다.&lt;/p&gt;

&lt;p&gt;자신 만의 알고리즘을 만들어 세상에 소개 할 수도 있습니다.&lt;br /&gt;
현재 알려진 알고리즘보다 낫다면 다음 프로그래밍 스타가 될 수 있습니다!&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Sep 2020 22:59:00 +0900</pubDate>
        <link>http://localhost:4000/js/2020/09/28/javascript30.html</link>
        <guid isPermaLink="true">http://localhost:4000/js/2020/09/28/javascript30.html</guid>
        
        
        <category>js</category>
        
      </item>
    
      <item>
        <title>29. Time Complexity (시간 복잡성)</title>
        <description>&lt;h2 id=&quot;29-time-complexity-시간-복잡성&quot;&gt;29. Time Complexity (시간 복잡성)&lt;/h2&gt;

&lt;p&gt;시간 복잡도 분석은 프로그래밍 언어에 관계없이 컴퓨터 프로그래밍의 또 다른 기본입니다.&lt;br /&gt;
더 나은 애플리케이션을 구축하려면 더 나은 솔루션을 작성해야합니다.&lt;br /&gt;
그러기 위해서는 시간 복잡성의 개념을 이해해야합니다.&lt;br /&gt;
때때로 Big O라고도합니다.&lt;/p&gt;

&lt;p&gt;Big O 표기법은 필요한 실행 시간 또는 알고리즘에서 사용하는 공간을 설명합니다.&lt;br /&gt;
Big O 표기법은 특히 최악의 시나리오를 설명합니다.&lt;/p&gt;

&lt;p&gt;이를 통해 최악의 시나리오에서도 최상의 성능을 발휘할 알고리즘을 선택하고 구현할 수 있습니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Sep 2020 22:57:00 +0900</pubDate>
        <link>http://localhost:4000/js/2020/09/28/javascript29.html</link>
        <guid isPermaLink="true">http://localhost:4000/js/2020/09/28/javascript29.html</guid>
        
        
        <category>js</category>
        
      </item>
    
      <item>
        <title>28. Data Structures (데이터 구조)</title>
        <description>&lt;h2 id=&quot;28-data-structures-데이터-구조&quot;&gt;28. Data Structures (데이터 구조)&lt;/h2&gt;

&lt;p&gt;데이터 구조는 프로그래밍 언어에 관계없이 개발자가 가져야하는 필수 지식 중 하나입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“나쁜 프로그래머는 코드에 대해 걱정합니다. 좋은 프로그래머는 데이터 구조와 그 관계에 대해 걱정합니다.”&lt;br /&gt;
-Linus Torvalds, Linux 및 Git 개발자&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다양한 데이터 구조에 대한 깊은 지식을 보유함으로써 다양한 환경에서 잘 수행되는 효율적인 프로그램을 구축 할 수 있습니다.&lt;br /&gt;
연결 목록, 대기열, 스택, 트리, 그래프 및 해시 테이블에 대해 알아야합니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Sep 2020 22:55:00 +0900</pubDate>
        <link>http://localhost:4000/js/2020/09/28/javascript28.html</link>
        <guid isPermaLink="true">http://localhost:4000/js/2020/09/28/javascript28.html</guid>
        
        
        <category>js</category>
        
      </item>
    
      <item>
        <title>27. ES6 Arrow Functions</title>
        <description>&lt;h2 id=&quot;27-es6-arrow-functions&quot;&gt;27. ES6 Arrow Functions&lt;/h2&gt;

&lt;p&gt;화살표 함수는 ES6에 추가되었으며 일반 함수에 대한 구문 대체입니다.&lt;br /&gt;
다른 점은 화살표 함수가 &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;super&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;new.target&lt;/code&gt; 키워드에 바인딩되지 않는다는 것입니다.&lt;br /&gt;
이로 인해 화살표 기능은 일부 시나리오에서는 훌륭한 선택이지만 다른 시나리오에서는 매우 나쁜 선택입니다.&lt;/p&gt;

&lt;p&gt;따라서 항상 화살표 기능을 사용하는 습관을 만들지 마십시오.&lt;br /&gt;
사용 사례에 따라 구현하십시오.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Sep 2020 22:53:00 +0900</pubDate>
        <link>http://localhost:4000/js/2020/09/28/javascript27.html</link>
        <guid isPermaLink="true">http://localhost:4000/js/2020/09/28/javascript27.html</guid>
        
        
        <category>js</category>
        
      </item>
    
  </channel>
</rss>
