<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-04-18T17:58:35+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">LHJ</title><subtitle>coding blog</subtitle><entry><title type="html">3.7.1 이스케이프</title><link href="http://localhost:4000/javascript/2020/04/18/javascript34/" rel="alternate" type="text/html" title="3.7.1 이스케이프" /><published>2020-04-18T17:46:00+09:00</published><updated>2020-04-18T17:46:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/18/javascript34</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/18/javascript34/">&lt;p&gt;텍스트로 만들어진 프로그램에서 텍스트 데이터를 사용할 때는 항상 텍스트 데이터와 프로그램 자체를 구별할 방법이 필요합니다.&lt;br /&gt;
이때 문자열을 따옴표 안에 쓰는 방법이 있습니다.&lt;br /&gt;
하지만 &lt;strong&gt;문자열 안에 따옴표&lt;/strong&gt;를 써야 한다면 어떻게 해야 할까요?&lt;br /&gt;
이 문제를 해결하려면 따옴표를 &lt;strong&gt;이스케이프&lt;/strong&gt;해서 문자열 주위에 쓰는 부호가 아님을 나타내야 합니다.&lt;br /&gt;
다음 예제를 보십시오.&lt;br /&gt;
여기에는 이스케이프가 필요하지 않습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Sam looked up, and said &quot;hello, old friend!&quot;, as Max walked in.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imperative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Don't do that!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;dialog 는 작은 따옴표로 감싸여 있으므로 문자열 안에 큰따옴표를 걱정없이 쓸 수 있습니다.&lt;br /&gt;
마찬가지로, imperative 는 큰따옴표로 감싸여 있으므로 문자열 안에 아포스트로피를 걱정없이 쓸 수 있습니다.&lt;br /&gt;
하지만 두 가지 따옴표를 모두 써야 한다면 어떨까요?&lt;br /&gt;
다음을 보십시오.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 에러가 일어납니다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Sam looked up and said &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;don&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;t do that!&quot; to Max.&quot;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;dialog 문자열에는 어떤 따옴표를 쓰더라도 에러가 생깁니다.&lt;br /&gt;
이때 &lt;strong&gt;역슬래시(\)&lt;/strong&gt; 를 써서 따옴표를 &lt;strong&gt;이스케이프&lt;/strong&gt; 하면 &lt;strong&gt;문자열이 여기서 끝나지 않았다고 자바스크립트에 알릴 수 있습니다.&lt;/strong&gt;&lt;br /&gt;
앞에서 본 예제를 다음과 같이 고쳐 쓰면 어떤 따옴표라도 쓸 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dialog1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;He looked up and said &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;don't do that!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to Max.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dialog2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;He looked up and said &quot;don&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;t do that!&quot; to Max.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;당연히 떠오르는 문제가 있습니다.&lt;br /&gt;
문자열에서 역슬래시 문자를 써야 할 때는 어떻게 할까요?&lt;br /&gt;
&lt;strong&gt;다행히 역슬래시는 자기 자신을 이스케이프할 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;In JavaScript, use &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; as an escape character in strings.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;큰 따옴표를 쓸지, 작은 따옴표를 쓸지는 스스로 정하면 됩니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;필자는 사용자에게 표시될 텍스트에는 보통 큰 따옴표를 사용합니다.&lt;br /&gt;
텍스트엔 따옴표보다는 don’t 등의 어포스트로피를 더 많이 쓰는 편이므로, 큰 따옴표를 쓰는 편이 필자에게 맞습니다.&lt;/li&gt;
  &lt;li&gt;자바스크립트 문자열 안에 HTML을 쓸 때는 반대로 작은따옴표를 씁니다.&lt;br /&gt;
HTML 문자열을 작은 따옴표로 감싸면 속성값에 큰따옴표를 쓸 수 있기 때문입니다.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">텍스트로 만들어진 프로그램에서 텍스트 데이터를 사용할 때는 항상 텍스트 데이터와 프로그램 자체를 구별할 방법이 필요합니다. 이때 문자열을 따옴표 안에 쓰는 방법이 있습니다. 하지만 문자열 안에 따옴표를 써야 한다면 어떻게 해야 할까요? 이 문제를 해결하려면 따옴표를 이스케이프해서 문자열 주위에 쓰는 부호가 아님을 나타내야 합니다. 다음 예제를 보십시오. 여기에는 이스케이프가 필요하지 않습니다. const dialog = 'Sam looked up, and said &quot;hello, old friend!&quot;, as Max walked in.'; const imperative = &quot;Don't do that!&quot;; dialog 는 작은 따옴표로 감싸여 있으므로 문자열 안에 큰따옴표를 걱정없이 쓸 수 있습니다. 마찬가지로, imperative 는 큰따옴표로 감싸여 있으므로 문자열 안에 아포스트로피를 걱정없이 쓸 수 있습니다. 하지만 두 가지 따옴표를 모두 써야 한다면 어떨까요? 다음을 보십시오. // 에러가 일어납니다. const dialog = &quot;Sam looked up and said &quot;don't do that!&quot; to Max.&quot;; dialog 문자열에는 어떤 따옴표를 쓰더라도 에러가 생깁니다. 이때 역슬래시(\) 를 써서 따옴표를 이스케이프 하면 문자열이 여기서 끝나지 않았다고 자바스크립트에 알릴 수 있습니다. 앞에서 본 예제를 다음과 같이 고쳐 쓰면 어떤 따옴표라도 쓸 수 있습니다. const dialog1 = &quot;He looked up and said \&quot;don't do that!\&quot; to Max.&quot;; const dialog2 = 'He looked up and said &quot;don\'t do that!&quot; to Max.'; 당연히 떠오르는 문제가 있습니다. 문자열에서 역슬래시 문자를 써야 할 때는 어떻게 할까요? 다행히 역슬래시는 자기 자신을 이스케이프할 수 있습니다. const s = &quot;In JavaScript, use \\ as an escape character in strings.&quot;; 큰 따옴표를 쓸지, 작은 따옴표를 쓸지는 스스로 정하면 됩니다. 필자는 사용자에게 표시될 텍스트에는 보통 큰 따옴표를 사용합니다. 텍스트엔 따옴표보다는 don’t 등의 어포스트로피를 더 많이 쓰는 편이므로, 큰 따옴표를 쓰는 편이 필자에게 맞습니다. 자바스크립트 문자열 안에 HTML을 쓸 때는 반대로 작은따옴표를 씁니다. HTML 문자열을 작은 따옴표로 감싸면 속성값에 큰따옴표를 쓸 수 있기 때문입니다.</summary></entry><entry><title type="html">3.7 문자열</title><link href="http://localhost:4000/javascript/2020/04/18/javascript33/" rel="alternate" type="text/html" title="3.7 문자열" /><published>2020-04-18T17:31:00+09:00</published><updated>2020-04-18T17:31:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/18/javascript33</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/18/javascript33/">&lt;p&gt;&lt;strong&gt;문자열(string)&lt;/strong&gt; 은 텍스트 데이터입니다.&lt;br /&gt;
&lt;strong&gt;string&lt;/strong&gt;이라는 단어는 &lt;strong&gt;string of characters&lt;/strong&gt;에서 나왔습니다.&lt;br /&gt;
이 표현은 1800년대 후반 식자공들이 일정한 순서로 배열된 심볼을 가리킬 때 썼던 표현이며 나중에는 수학자들도 사용했습니다.&lt;/p&gt;

&lt;p&gt;자바스크립트 문자열은 &lt;strong&gt;유니코드(Unicode)&lt;/strong&gt; 텍스트입니다.&lt;br /&gt;
유니코드는 텍스트 데이터에 관한 표준이며 사람이 사용하는 언어 대부분의 글자와 심볼에 해당하는 &lt;strong&gt;코드 포인트(code point)&lt;/strong&gt; 를 포함하고 있습니다.(여기서 말하는 ‘언어’에는 놀랍게도 이모티콘까지 표현됩니다.)&lt;br /&gt;
&lt;strong&gt;유니코드 자체는 모든 언어의 텍스트를 나타낼 수 있지만, 유니코드를 사용하는 소프트웨어가 모든 코드 포인트를 정확히 렌더링한다고 보장하지는 않습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 책에서는 브라우저와 콘솔에 정확히 나타날 것이 거의 확실한, 널리 쓰이는 유니코드 문자만 사용할 겁니다.&lt;br /&gt;
&lt;strong&gt;널리 쓰이지 않는 글자나 언어를 사용해야 한다면 유니코드에서 코드 포인트를 어떻게 렌더링하는지 따로 조사해야 할 겁니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;자바스크립트의 문자열 리터럴에는 작은따옴표, 큰따옴표, 백틱(backtick)을 사용합니다.&lt;br /&gt;
(백틱 - grave accent mark 라고 부르기도 합니다.)&lt;br /&gt;
백틱은 ES6에서 도입한 것이며 곧 설명할 &lt;strong&gt;템플릿 문자열(template string)&lt;/strong&gt; 에서 사용합니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">문자열(string) 은 텍스트 데이터입니다. string이라는 단어는 string of characters에서 나왔습니다. 이 표현은 1800년대 후반 식자공들이 일정한 순서로 배열된 심볼을 가리킬 때 썼던 표현이며 나중에는 수학자들도 사용했습니다. 자바스크립트 문자열은 유니코드(Unicode) 텍스트입니다. 유니코드는 텍스트 데이터에 관한 표준이며 사람이 사용하는 언어 대부분의 글자와 심볼에 해당하는 코드 포인트(code point) 를 포함하고 있습니다.(여기서 말하는 ‘언어’에는 놀랍게도 이모티콘까지 표현됩니다.) 유니코드 자체는 모든 언어의 텍스트를 나타낼 수 있지만, 유니코드를 사용하는 소프트웨어가 모든 코드 포인트를 정확히 렌더링한다고 보장하지는 않습니다. 이 책에서는 브라우저와 콘솔에 정확히 나타날 것이 거의 확실한, 널리 쓰이는 유니코드 문자만 사용할 겁니다. 널리 쓰이지 않는 글자나 언어를 사용해야 한다면 유니코드에서 코드 포인트를 어떻게 렌더링하는지 따로 조사해야 할 겁니다. 자바스크립트의 문자열 리터럴에는 작은따옴표, 큰따옴표, 백틱(backtick)을 사용합니다. (백틱 - grave accent mark 라고 부르기도 합니다.) 백틱은 ES6에서 도입한 것이며 곧 설명할 템플릿 문자열(template string) 에서 사용합니다.</summary></entry><entry><title type="html">3.6 숫자</title><link href="http://localhost:4000/javascript/2020/04/18/javascript32/" rel="alternate" type="text/html" title="3.6 숫자" /><published>2020-04-18T15:41:00+09:00</published><updated>2020-04-18T15:41:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/18/javascript32</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/18/javascript32/">&lt;p&gt;3이나 5.5, 1,000,000처럼 컴퓨터가 정확히 나타낼 수 있는 숫자도 있지만, 근사치로만 표현할 수 있는 숫자도 많습니다.&lt;br /&gt;
예를 들어π는 절대 컴퓨터로 표현할 수 없습니다.&lt;br /&gt;
원주율을 구성하는 숫자는 무한하고 반복되지도 않기 때문입니다.&lt;br /&gt;
10/3 같은 숫자는 특별한 테크닉을 써서 나타낼 수 있긴 하지만, 소수점 아래 자리가 무한히 반복되므로(3.3333….) 일반적으로 근사치로만 나타냅니다.&lt;/p&gt;

&lt;p&gt;자바스크립트도 다른 프로그래밍 언어와 마찬가지로 실제 숫자의 근사치를 저장할 때 IEEE-764배정도(&lt;strong&gt;double-precision&lt;/strong&gt;) &lt;strong&gt;부동소수점 숫자 형식&lt;/strong&gt;을 사용합니다.&lt;br /&gt;
앞으로는 이 형식을 &lt;strong&gt;‘더블’&lt;/strong&gt; 이라고 부를 겁니다.&lt;br /&gt;
이 형식의 세부 사항은 이 책의 범위를 벗어납니다.&lt;br /&gt;
&lt;strong&gt;하지만 자바스크립트로 심도 있는 숫자형 분석을 하지 않는 한 더블 형식을 이해할 필요는 별로 없습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그런데 더블 형식의 근사치 결과는 종종 사람들을 당혹스럽게 만들곤 합니다.&lt;br /&gt;
예를 들어 자바스크립트에서 &lt;strong&gt;0.1 + 0.2&lt;/strong&gt;는 &lt;strong&gt;0.30000000000000004&lt;/strong&gt;를 반환합니다.&lt;br /&gt;
&lt;strong&gt;이 결과는 자바스크립트에 버그가 있거나 덧셉을 할 줄 몰라서가 아닙니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;이건 무한한 값을 유한한 메모리 안에서 가능한 한 정확히 짐작하려다가 생긴 결과일 뿐입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;자바스크립트에는 숫자형 데이터 타입이 하나밖에 없는데, 이건 흔치 않은 일입니다.&lt;/strong&gt;&lt;br /&gt;
(이런 상황은 나중에 바뀔 수도 있습니다. 세분화된 정수 타입은 꼭 필요한 기능입니다.)&lt;br /&gt;
대부분의 프로그래밍 언어는 여러 가지 정수 타입을 사용하며 &lt;strong&gt;부동소수점 숫자 타입&lt;/strong&gt;도 두 가지 이상 사용합니다.&lt;br /&gt;
&lt;strong&gt;숫자형 데이터를 하나만 갖기로 한 선택은 자바스크립트를 단순한 언어로, 특히 초보자에게 부담 없는 언어로 만들었다는 장점이 있습니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;반면, 자바스크립트를 고성능 정수 연산이나 정밀한 소수점 연산이 필요한 애플리케이션에서 쓸 수 없게 만든 선택이기도 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;자바스크립트는 10진수, 2진수, 8진수, 16진수의 네 가지 숫자형 리터럴을 인식합니다.&lt;br /&gt;
10진 리터럴에는 소수점 없는 정수, 소수점 있는 10진수(12.34 등), 과학에서 사용하는 지수 표기법을 쓸 수 있습니다.&lt;br /&gt;
&lt;strong&gt;그 외에도 무한대, 음의 무한대, ‘숫자 아님’을 나타내는 특별한 값들이 있습니다.&lt;/strong&gt;&lt;br /&gt;
엄밀히 말해 이들은 &lt;strong&gt;숫자형 리터럴이 아니지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;숫자형 값&lt;/code&gt;이므로 여기 포함했습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 숫자 리터럴, count는 더블입니다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0000ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 16진수, 16진수 ff는 10진수 255와 같습니다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;umask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0o0022&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 8진수, 8진수 22는 십진수 18과 같습니다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;roomTemp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;21.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 십진수&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.0e6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 지수 (3.0 x 10^6 = 3,000,000)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.6&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 지수 (-1.6 x 10^-19 = 0.00000000000000000016)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ninf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;숫자가 아님&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; 10진수, 16진수, 지수 등 어떤 리터럴 형식을 사용하더라도 &lt;strong&gt;결국 숫자는 더블 형식으로 저장&lt;/strong&gt;됩니다.&lt;br /&gt;
다양한 리터럴 형식은 숫자를 &lt;strong&gt;간편한 형식으로 표현할 수 있도록 제공된 것&lt;/strong&gt;뿐입니다.&lt;br /&gt;
자바스크립트가 표시할 수 있는 숫자 형식에는 제한이 있습니다. 이에 대해서는 16장에서 설명합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;독자 중에 수학자가 있다면 &lt;strong&gt;무한대는 숫자가 아니라고 주장&lt;/strong&gt;할 겁니다.&lt;br /&gt;
&lt;strong&gt;물론 무한대는 숫자가 아닙니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;NaN도 숫자는 아닙니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;이들은 계산에 사용하는 숫자라기보다는 일종의 플레이스홀더입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;또한 숫자에 대응하는 &lt;strong&gt;Number&lt;/strong&gt; 객체에는 중요한 숫자형 값에 해당하는 유용한 프로퍼티가 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;EPSILON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;// 1에 더했을 때 1과 구분되는 결과를 만들 수 있는&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 가장 적은 값입니다. 근사치는 2.2e-16입니다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bigInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MAX_SAFE_INTEGER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 표현할 수 있는 가장 큰 정수&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 표현할 수 있는 가장 큰 숫자&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;minInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MIN_SAFE_INTEGER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;// 표현할 수 있는 가장 작은 정수&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MIN_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 표현할 수 있는 가장 작은 숫자&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nInf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NEGATIVE_INFINITY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// -Infinity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;POSITIVE_INFINITY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Infinity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이들의 중요성에 대해서는 16장에서 설명합니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">3이나 5.5, 1,000,000처럼 컴퓨터가 정확히 나타낼 수 있는 숫자도 있지만, 근사치로만 표현할 수 있는 숫자도 많습니다. 예를 들어π는 절대 컴퓨터로 표현할 수 없습니다. 원주율을 구성하는 숫자는 무한하고 반복되지도 않기 때문입니다. 10/3 같은 숫자는 특별한 테크닉을 써서 나타낼 수 있긴 하지만, 소수점 아래 자리가 무한히 반복되므로(3.3333….) 일반적으로 근사치로만 나타냅니다. 자바스크립트도 다른 프로그래밍 언어와 마찬가지로 실제 숫자의 근사치를 저장할 때 IEEE-764배정도(double-precision) 부동소수점 숫자 형식을 사용합니다. 앞으로는 이 형식을 ‘더블’ 이라고 부를 겁니다. 이 형식의 세부 사항은 이 책의 범위를 벗어납니다. 하지만 자바스크립트로 심도 있는 숫자형 분석을 하지 않는 한 더블 형식을 이해할 필요는 별로 없습니다. 그런데 더블 형식의 근사치 결과는 종종 사람들을 당혹스럽게 만들곤 합니다. 예를 들어 자바스크립트에서 0.1 + 0.2는 0.30000000000000004를 반환합니다. 이 결과는 자바스크립트에 버그가 있거나 덧셉을 할 줄 몰라서가 아닙니다. 이건 무한한 값을 유한한 메모리 안에서 가능한 한 정확히 짐작하려다가 생긴 결과일 뿐입니다. 자바스크립트에는 숫자형 데이터 타입이 하나밖에 없는데, 이건 흔치 않은 일입니다. (이런 상황은 나중에 바뀔 수도 있습니다. 세분화된 정수 타입은 꼭 필요한 기능입니다.) 대부분의 프로그래밍 언어는 여러 가지 정수 타입을 사용하며 부동소수점 숫자 타입도 두 가지 이상 사용합니다. 숫자형 데이터를 하나만 갖기로 한 선택은 자바스크립트를 단순한 언어로, 특히 초보자에게 부담 없는 언어로 만들었다는 장점이 있습니다. 반면, 자바스크립트를 고성능 정수 연산이나 정밀한 소수점 연산이 필요한 애플리케이션에서 쓸 수 없게 만든 선택이기도 합니다. 자바스크립트는 10진수, 2진수, 8진수, 16진수의 네 가지 숫자형 리터럴을 인식합니다. 10진 리터럴에는 소수점 없는 정수, 소수점 있는 10진수(12.34 등), 과학에서 사용하는 지수 표기법을 쓸 수 있습니다. 그 외에도 무한대, 음의 무한대, ‘숫자 아님’을 나타내는 특별한 값들이 있습니다. 엄밀히 말해 이들은 숫자형 리터럴이 아니지만, 숫자형 값이므로 여기 포함했습니다. let count = 10; // 숫자 리터럴, count는 더블입니다. const blue = 0x0000ff; // 16진수, 16진수 ff는 10진수 255와 같습니다. const umask = 0o0022; // 8진수, 8진수 22는 십진수 18과 같습니다. const roomTemp = 21.5; // 십진수 const C = 3.0e6; // 지수 (3.0 x 10^6 = 3,000,000) const e = -1.6e-19; // 지수 (-1.6 x 10^-19 = 0.00000000000000000016) const inf = Infinity; const ninf = -Infinity; const nan = NaN; // &quot;숫자가 아님&quot; TIP 10진수, 16진수, 지수 등 어떤 리터럴 형식을 사용하더라도 결국 숫자는 더블 형식으로 저장됩니다. 다양한 리터럴 형식은 숫자를 간편한 형식으로 표현할 수 있도록 제공된 것뿐입니다. 자바스크립트가 표시할 수 있는 숫자 형식에는 제한이 있습니다. 이에 대해서는 16장에서 설명합니다. 독자 중에 수학자가 있다면 무한대는 숫자가 아니라고 주장할 겁니다. 물론 무한대는 숫자가 아닙니다. NaN도 숫자는 아닙니다. 이들은 계산에 사용하는 숫자라기보다는 일종의 플레이스홀더입니다. 또한 숫자에 대응하는 Number 객체에는 중요한 숫자형 값에 해당하는 유용한 프로퍼티가 있습니다. const small = Number.EPSILON; // 1에 더했을 때 1과 구분되는 결과를 만들 수 있는 // 가장 적은 값입니다. 근사치는 2.2e-16입니다. const bigInt = Number.MAX_SAFE_INTEGER; // 표현할 수 있는 가장 큰 정수 const max = Number.MAX_VALUE; // 표현할 수 있는 가장 큰 숫자 const minInt = Number.MIN_SAFE_INTEGER; // 표현할 수 있는 가장 작은 정수 const min = Number.MIN_VALUE; // 표현할 수 있는 가장 작은 숫자 const nInf = Number.NEGATIVE_INFINITY; // -Infinity const nan = Number.NaN; // NaN const inf = Number.POSITIVE_INFINITY; // Infinity 이들의 중요성에 대해서는 16장에서 설명합니다.</summary></entry><entry><title type="html">3.5 원시 타입과 객체</title><link href="http://localhost:4000/javascript/2020/04/18/javascript31/" rel="alternate" type="text/html" title="3.5 원시 타입과 객체" /><published>2020-04-18T15:30:00+09:00</published><updated>2020-04-18T15:30:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/18/javascript31</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/18/javascript31/">&lt;p&gt;자바스크립트의 값은 &lt;strong&gt;원시 값(primitive)&lt;/strong&gt; 또는 &lt;strong&gt;객체(object)&lt;/strong&gt; 입니다.&lt;br /&gt;
&lt;strong&gt;문자열과 숫자 같은 원시 타입은 불변(immutable) 입니다.&lt;/strong&gt;&lt;br /&gt;
숫자 5는 항상 숫자 5입니다.&lt;br /&gt;
문자열 “alpha”도 항상 문자열 “alpha”입니다.&lt;br /&gt;
숫자가 불변임은 분명하지만, 문자열에 대해서는 혼동하는 사람들이 있습니다.&lt;br /&gt;
예를 들어 &lt;strong&gt;“alpha” + “omega”&lt;/strong&gt; 처럼 문자열을 병합한다면, 같은 문자열을 수정했을 뿐이라고 생각하는 겁니다.&lt;br /&gt;
하지만 그렇지 않습니다.&lt;br /&gt;
그건 다른 문자열입니다.&lt;br /&gt;
&lt;strong&gt;5와 6이 서로 다른 숫자인 것과 마찬가지로 alpha와 alphaomega는 서로 다른 문자열입니다.&lt;/strong&gt;&lt;br /&gt;
원시 타입에는 여섯 가지가 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;숫자&lt;/li&gt;
  &lt;li&gt;문자열&lt;/li&gt;
  &lt;li&gt;불리언&lt;/li&gt;
  &lt;li&gt;null&lt;/li&gt;
  &lt;li&gt;undefined&lt;/li&gt;
  &lt;li&gt;심볼(Symbol)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;다만 불변성이라는 말이 변수의 값이 바뀔 수 없다는 뜻은 아닙니다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;str은 먼저 불변인 값 “hello”로 초기화됐고, 다시 새로운 불변값 “world”를 할당받았습니다.&lt;br /&gt;
&lt;strong&gt;중요한 것은 “hello”와 “world”가 서로 다른 문자열이라는 겁니다.&lt;/strong&gt;&lt;br /&gt;
바뀐 것은 str이 저장하는 값뿐입니다.&lt;br /&gt;
이런 차이는 대개 이론적인 것이지만, 알고 있으면 6장에서 함수를 설명할 때 도움이 됩니다.&lt;/p&gt;

&lt;p&gt;이들 여섯 가지 원시 타입 외에 &lt;strong&gt;객체&lt;/strong&gt;가 있습니다.&lt;br /&gt;
&lt;strong&gt;원시 값과 달리 객체는 여러 가지 형태와 값을 가질 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;객체의 유연한 성질 때문에 커스텀 데이터 타입을 만들 때 객체를 많이 사용합니다.&lt;br /&gt;
자바스크립트에는 다음과 같이 몇 가지 내장된 객체 타입이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Array&lt;/li&gt;
  &lt;li&gt;Date&lt;/li&gt;
  &lt;li&gt;RegExp&lt;/li&gt;
  &lt;li&gt;Map과 WeakMap&lt;/li&gt;
  &lt;li&gt;Set과 WeakSet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;마지막으로, 원시 타입 중 숫자와 문자열, 불리언에는 각각 대응하는 객체 타입인 &lt;strong&gt;Number, String, Boolean&lt;/strong&gt;이 있습니다.&lt;br /&gt;
&lt;strong&gt;이들 대응하는 객체에 실제 값이 저장되지는 않습니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;이들은 대응하는 원시 값에 기능을 제공하는 역할을 합니다.&lt;/strong&gt;&lt;br /&gt;
이들 객체 타입은 대응하는 원시 값과 함께 설명할 겁니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">자바스크립트의 값은 원시 값(primitive) 또는 객체(object) 입니다. 문자열과 숫자 같은 원시 타입은 불변(immutable) 입니다. 숫자 5는 항상 숫자 5입니다. 문자열 “alpha”도 항상 문자열 “alpha”입니다. 숫자가 불변임은 분명하지만, 문자열에 대해서는 혼동하는 사람들이 있습니다. 예를 들어 “alpha” + “omega” 처럼 문자열을 병합한다면, 같은 문자열을 수정했을 뿐이라고 생각하는 겁니다. 하지만 그렇지 않습니다. 그건 다른 문자열입니다. 5와 6이 서로 다른 숫자인 것과 마찬가지로 alpha와 alphaomega는 서로 다른 문자열입니다. 원시 타입에는 여섯 가지가 있습니다. 숫자 문자열 불리언 null undefined 심볼(Symbol) 다만 불변성이라는 말이 변수의 값이 바뀔 수 없다는 뜻은 아닙니다. let str = &quot;hello&quot;; str = &quot;world&quot;; str은 먼저 불변인 값 “hello”로 초기화됐고, 다시 새로운 불변값 “world”를 할당받았습니다. 중요한 것은 “hello”와 “world”가 서로 다른 문자열이라는 겁니다. 바뀐 것은 str이 저장하는 값뿐입니다. 이런 차이는 대개 이론적인 것이지만, 알고 있으면 6장에서 함수를 설명할 때 도움이 됩니다. 이들 여섯 가지 원시 타입 외에 객체가 있습니다. 원시 값과 달리 객체는 여러 가지 형태와 값을 가질 수 있습니다. 객체의 유연한 성질 때문에 커스텀 데이터 타입을 만들 때 객체를 많이 사용합니다. 자바스크립트에는 다음과 같이 몇 가지 내장된 객체 타입이 있습니다. Array Date RegExp Map과 WeakMap Set과 WeakSet 마지막으로, 원시 타입 중 숫자와 문자열, 불리언에는 각각 대응하는 객체 타입인 Number, String, Boolean이 있습니다. 이들 대응하는 객체에 실제 값이 저장되지는 않습니다. 이들은 대응하는 원시 값에 기능을 제공하는 역할을 합니다. 이들 객체 타입은 대응하는 원시 값과 함께 설명할 겁니다.</summary></entry><entry><title type="html">3.4 리터럴</title><link href="http://localhost:4000/javascript/2020/04/18/javascript30/" rel="alternate" type="text/html" title="3.4 리터럴" /><published>2020-04-18T15:14:00+09:00</published><updated>2020-04-18T15:14:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/18/javascript30</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/18/javascript30/">&lt;p&gt;우리는 이미 &lt;strong&gt;리터럴(literal)&lt;/strong&gt; 을 사용했습니다.&lt;br /&gt;
앞에서 &lt;strong&gt;currentTempC&lt;/strong&gt;에 값을 할당할 때 사용한 &lt;code class=&quot;highlighter-rouge&quot;&gt;22&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;22.5&lt;/code&gt;가 &lt;strong&gt;숫자형 리터럴&lt;/strong&gt;입니다.&lt;br /&gt;
마찬가지로, &lt;strong&gt;room1&lt;/strong&gt;을 초기화 할 때 &lt;strong&gt;문자열 리터럴&lt;/strong&gt;인 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;conference_room_a&quot;&lt;/code&gt;를 사용했습니다.&lt;br /&gt;
&lt;strong&gt;리터럴&lt;/strong&gt;이라는 단어는 값을 프로그램 안에서 직접 지정한다는 의미입니다.&lt;br /&gt;
리터럴은 &lt;strong&gt;값을 만드는 방법&lt;/strong&gt;입니다.&lt;br /&gt;
자바스크립트는 당신이 제공한 리터럴 값을 받아 데이터를 만듭니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;리터럴&lt;/strong&gt;과 &lt;strong&gt;식별자(identifier)&lt;/strong&gt; 의 차이를 이해하는 것이 중요합니다.&lt;br /&gt;
예를 들어 앞에서 &lt;strong&gt;room1&lt;/strong&gt; 변수에 값 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;conference_room_a&quot;&lt;/code&gt;을 할당한 것을 생각해 봅시다.&lt;br /&gt;
room1은 변수를 가리키는 식별자입니다.&lt;br /&gt;
그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;conference_room_a&quot;&lt;/code&gt;은 문자에 리터럴인 동시에 room1의 값입니다.&lt;br /&gt;
&lt;strong&gt;자바스크립트는 따옴표를 통해 리터럴과 식별자를 구분합니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;식별자는 숫자로 시작할 수 없으므로 숫자에는 따옴표가 필요 없습니다.&lt;/strong&gt;&lt;br /&gt;
다음 예제를 보십시오.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;room1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;conference_room_a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;conference_room_a&quot;(따옴표 안)은 리터럴입니다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentRoom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;room1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 이제 currentRoom의 값은&lt;/span&gt;
												&lt;span class=&quot;c1&quot;&gt;// room1의 값 (&quot;conference_room_a&quot;)과 같습니다.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;currentRoom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conference_room_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 에러가 일어납니다.&lt;/span&gt;
																&lt;span class=&quot;c1&quot;&gt;// conference_room_a 란 식별자는 존재하지 않습니다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; 식별자를 써야 하는 곳, 다시 말해 값이 필요한 곳에는 어디든지 리터럴을 쓸 수 있습니다.&lt;br /&gt;
예를 들어 프로그램에서 &lt;strong&gt;ROOM_TEMP_C&lt;/strong&gt;가 있는 곳 어디든 숫자형 리터럴 21.5를 써도 됩니다.&lt;br /&gt;
숫자형 리터럴을 한두군데 쓰는 정도라면 이렇게 해도 괜찮습니다.&lt;br /&gt;
하지만 그런 곳이 10개, 또는 100개쯤 된다면 상수나 변수를 써야 합니다.&lt;br /&gt;
상수나 변수를 쓰면 코드를 이해하기 쉽고 값을 바꿀 때도 한 곳에서만 바꾸면 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;어디에 변수를 쓰고 어디에 상수를 쓸지 결정하는 것은 프로그래머의 몫입니다.&lt;br /&gt;
어떤 경우는 상수를 쓰는 것이 거의 확실합니다.&lt;br /&gt;
예를 들어 파이의 근삿값이나 DAYS_IN_MARCH 같은 경우는 상수가 적절합니다.&lt;br /&gt;
ROOM_TEMP_C 처럼 모호한 경우도 있습니다.&lt;br /&gt;
필자는 21.5도라는 온도를 아주 쾌적한 온도라고 생각하지만, 그렇게 생각하지 않는 사람도 있을 겁니다.&lt;br /&gt;
따라서 이 값을 애플리케이션 안에서 바꿀 수 있어야 한다면 변수를 쓰는 게 맞습니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">우리는 이미 리터럴(literal) 을 사용했습니다. 앞에서 currentTempC에 값을 할당할 때 사용한 22와 22.5가 숫자형 리터럴입니다. 마찬가지로, room1을 초기화 할 때 문자열 리터럴인 &quot;conference_room_a&quot;를 사용했습니다. 리터럴이라는 단어는 값을 프로그램 안에서 직접 지정한다는 의미입니다. 리터럴은 값을 만드는 방법입니다. 자바스크립트는 당신이 제공한 리터럴 값을 받아 데이터를 만듭니다. 리터럴과 식별자(identifier) 의 차이를 이해하는 것이 중요합니다. 예를 들어 앞에서 room1 변수에 값 &quot;conference_room_a&quot;을 할당한 것을 생각해 봅시다. room1은 변수를 가리키는 식별자입니다. 그리고 &quot;conference_room_a&quot;은 문자에 리터럴인 동시에 room1의 값입니다. 자바스크립트는 따옴표를 통해 리터럴과 식별자를 구분합니다. 식별자는 숫자로 시작할 수 없으므로 숫자에는 따옴표가 필요 없습니다. 다음 예제를 보십시오. let room1 = &quot;conference_room_a&quot;; // &quot;conference_room_a&quot;(따옴표 안)은 리터럴입니다. let currentRoom = room1; // 이제 currentRoom의 값은 // room1의 값 (&quot;conference_room_a&quot;)과 같습니다. currentRoom = conference_room_a; // 에러가 일어납니다. // conference_room_a 란 식별자는 존재하지 않습니다. TIP 식별자를 써야 하는 곳, 다시 말해 값이 필요한 곳에는 어디든지 리터럴을 쓸 수 있습니다. 예를 들어 프로그램에서 ROOM_TEMP_C가 있는 곳 어디든 숫자형 리터럴 21.5를 써도 됩니다. 숫자형 리터럴을 한두군데 쓰는 정도라면 이렇게 해도 괜찮습니다. 하지만 그런 곳이 10개, 또는 100개쯤 된다면 상수나 변수를 써야 합니다. 상수나 변수를 쓰면 코드를 이해하기 쉽고 값을 바꿀 때도 한 곳에서만 바꾸면 됩니다. 어디에 변수를 쓰고 어디에 상수를 쓸지 결정하는 것은 프로그래머의 몫입니다. 어떤 경우는 상수를 쓰는 것이 거의 확실합니다. 예를 들어 파이의 근삿값이나 DAYS_IN_MARCH 같은 경우는 상수가 적절합니다. ROOM_TEMP_C 처럼 모호한 경우도 있습니다. 필자는 21.5도라는 온도를 아주 쾌적한 온도라고 생각하지만, 그렇게 생각하지 않는 사람도 있을 겁니다. 따라서 이 값을 애플리케이션 안에서 바꿀 수 있어야 한다면 변수를 쓰는 게 맞습니다.</summary></entry><entry><title type="html">3.3 식별자 이름</title><link href="http://localhost:4000/javascript/2020/04/18/javascript29/" rel="alternate" type="text/html" title="3.3 식별자 이름" /><published>2020-04-18T14:53:00+09:00</published><updated>2020-04-18T14:53:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/18/javascript29</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/18/javascript29/">&lt;p&gt;변수와 상수, 함수 이름을 &lt;strong&gt;식별자(identifier)&lt;/strong&gt; 라 부릅니다.&lt;br /&gt;
그리고 식별자에는 규칙이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;식별자는 반드시 글자나 달러 기호($), 밑줄(_)로 시작해야 합니다.&lt;/li&gt;
  &lt;li&gt;식별자에는 글자와 숫자, 달러 기호, 밑줄만 쓸 수 있습니다.&lt;/li&gt;
  &lt;li&gt;π나 〥같은유니코드문자도쓸수있습니다.&lt;/li&gt;
  &lt;li&gt;예약어는 식별자로 쓸 수 없습니다.(부록 A에 예약어를 정리했습니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;다른 언어에서는 달러 기호를 특수문자로 사용하지만 자바스크립트는 그렇지 않습니다.&lt;/strong&gt;&lt;br /&gt;
a나 z 같은 글자와 마찬가지로 식별자 이름에 사용할 수 있습니다.&lt;br /&gt;
제이쿼리(jQuery) 같은 라이브러리는 이런 장점을 활용해서 달러 기호 자체를 식별자로 사용합니다.&lt;/p&gt;

&lt;p&gt;예약어는 자바스크립트에서 사용하는 단어이므로 프로그래머는 쓸 수 없습니다.&lt;br /&gt;
예를 들어 &lt;strong&gt;let&lt;/strong&gt;이라는 변수를 만들 수 없습니다.&lt;/p&gt;

&lt;p&gt;자바스크립트 식별자 표기법은 여러 가지이지만, 가장 널리 쓰는 두 가지는 다음과 같습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;카멜 케이스(camel case)&lt;/strong&gt;&lt;br /&gt;
currentTempC, anIdentifierName 등은 카멜 케이스에 따라 이름을 지은 겁니다.&lt;br /&gt;
카멜이라는 이름은 중간중간의 대문자가 낙타의 혹처럼 보인다고 해서 붙였습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;스네이크 케이스(snake case)&lt;/strong&gt;&lt;br /&gt;
current_temp_c, an_identifier_name 등은 스네이크 케이스에 따라 이름을 지은 겁니다.&lt;br /&gt;
스네이크 케이스는 카멜 케이스보다는 조금 덜 쓰입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;표기법은 무엇을 써도 좋지만, 일관성을 지켜야 합니다.&lt;br /&gt;
한 가지 표기법을 선택하고 그걸 계속 지키십시오.&lt;br /&gt;
팀에서 일하고 있거나 프로젝트를 커뮤니티에 공유할 생각이라면, 그들이 어떤 표기법을 선호하는지 알아두십시오.&lt;/p&gt;

&lt;p&gt;식별자를 만들 때는 다음과 같은 방침을 염두에 두길 권합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;식별자는 대문자로 시작해서는 안됩니다. 9장에서 배울 클래스뿐입니다.&lt;/li&gt;
  &lt;li&gt;밑줄 한 개 또는 두 개로 시작하는 식별자는 아주 특별한 상황, 또는 ‘내부’ 변수에서만 사용합니다. 자신만의 특별한 변수 카테고리를 만들지 않는 한, 변수나 상수 이름을 밑줄로 시작하지 마십시오.&lt;/li&gt;
  &lt;li&gt;제이쿼리를 사용할 경우, 달러 기호로 시작하는 식별자는 보통 제이쿼리 객체라는 의미입니다. 제이쿼리는 19장에서 설명합니다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">변수와 상수, 함수 이름을 식별자(identifier) 라 부릅니다. 그리고 식별자에는 규칙이 있습니다. 식별자는 반드시 글자나 달러 기호($), 밑줄(_)로 시작해야 합니다. 식별자에는 글자와 숫자, 달러 기호, 밑줄만 쓸 수 있습니다. π나 〥같은유니코드문자도쓸수있습니다. 예약어는 식별자로 쓸 수 없습니다.(부록 A에 예약어를 정리했습니다.) 다른 언어에서는 달러 기호를 특수문자로 사용하지만 자바스크립트는 그렇지 않습니다. a나 z 같은 글자와 마찬가지로 식별자 이름에 사용할 수 있습니다. 제이쿼리(jQuery) 같은 라이브러리는 이런 장점을 활용해서 달러 기호 자체를 식별자로 사용합니다. 예약어는 자바스크립트에서 사용하는 단어이므로 프로그래머는 쓸 수 없습니다. 예를 들어 let이라는 변수를 만들 수 없습니다. 자바스크립트 식별자 표기법은 여러 가지이지만, 가장 널리 쓰는 두 가지는 다음과 같습니다. 카멜 케이스(camel case) currentTempC, anIdentifierName 등은 카멜 케이스에 따라 이름을 지은 겁니다. 카멜이라는 이름은 중간중간의 대문자가 낙타의 혹처럼 보인다고 해서 붙였습니다. 스네이크 케이스(snake case) current_temp_c, an_identifier_name 등은 스네이크 케이스에 따라 이름을 지은 겁니다. 스네이크 케이스는 카멜 케이스보다는 조금 덜 쓰입니다. 표기법은 무엇을 써도 좋지만, 일관성을 지켜야 합니다. 한 가지 표기법을 선택하고 그걸 계속 지키십시오. 팀에서 일하고 있거나 프로젝트를 커뮤니티에 공유할 생각이라면, 그들이 어떤 표기법을 선호하는지 알아두십시오. 식별자를 만들 때는 다음과 같은 방침을 염두에 두길 권합니다. 식별자는 대문자로 시작해서는 안됩니다. 9장에서 배울 클래스뿐입니다. 밑줄 한 개 또는 두 개로 시작하는 식별자는 아주 특별한 상황, 또는 ‘내부’ 변수에서만 사용합니다. 자신만의 특별한 변수 카테고리를 만들지 않는 한, 변수나 상수 이름을 밑줄로 시작하지 마십시오. 제이쿼리를 사용할 경우, 달러 기호로 시작하는 식별자는 보통 제이쿼리 객체라는 의미입니다. 제이쿼리는 19장에서 설명합니다.</summary></entry><entry><title type="html">3.2 변수와 상수 중 어떤 것을 써야 할까요?</title><link href="http://localhost:4000/javascript/2020/04/18/javascript28/" rel="alternate" type="text/html" title="3.2 변수와 상수 중 어떤 것을 써야 할까요?" /><published>2020-04-18T14:47:00+09:00</published><updated>2020-04-18T14:47:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/18/javascript28</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/18/javascript28/">&lt;p&gt;될 수 있으면 변수보다 상수를 써야 합니다.&lt;br /&gt;
데이터의 값이 아무 때나 막 바뀌는 것보다는, 고정된 값이 이해하기 쉽습니다.&lt;br /&gt;
상수를 사용하면 값을 바꾸지 말아야 할 데이터에서 실수로 값을 바꾸는 일이 줄어듭니다.&lt;br /&gt;
예를 들어, 사용자에게 어떤 행동을 취하는 프로그램이라면 &lt;strong&gt;user&lt;/strong&gt; 변수를 써야겠다고 생각할 수 있습니다.&lt;br /&gt;
그런데 사용자가 단 한 명이라면?&lt;br /&gt;
당연히 &lt;strong&gt;user&lt;/strong&gt;의 값은 바뀔 수 없고, 만약 바뀌었다면 그건 에러입니다.&lt;br /&gt;
상수를 사용하면 프로그래머가 신경쓰지 않아도 자바스크립트가 이런 상황에서 에러를 일으킵니다.&lt;br /&gt;
사용자가 두 명이라면 &lt;strong&gt;user&lt;/strong&gt; 변수 하나를 재사용하는 것보다는 &lt;strong&gt;user1&lt;/strong&gt;과 &lt;strong&gt;user2&lt;/strong&gt;로 나누는 편이 낫습니다.&lt;/p&gt;

&lt;p&gt;따라서 우선 상수를 먼저 생각합니다.&lt;br /&gt;
그 상수의 값이 바뀌는 게 자연스럽다고 생각된다면, 언제든지 변수로 바꿀 수 있습니다.&lt;/p&gt;

&lt;p&gt;상수를 쓰면 안 되고 항상 변수를 써야 하는 상황도 있습니다.&lt;br /&gt;
예를 들어 4장에서 배울 루프 제어에는 변수를 써야 합니다.&lt;br /&gt;
시간이 지나면서 값이 바뀌는 경우에도 변수를 써야 합니다.&lt;br /&gt;
이번 장에서 사용한 &lt;strong&gt;targetTempC&lt;/strong&gt;, &lt;strong&gt;currentTemp&lt;/strong&gt; 같은 변수가 좋은 예입니다.&lt;br /&gt;
하지만 일단 상수를 쓰는 습관을 들이면, 변수가 꼭 필요한 상황이 생각보다 훨씬 적다는 걸 알고 놀라게 될 겁니다.&lt;/p&gt;

&lt;p&gt;이 책의 예제에서는 가능하면 항상 변수 대신 상수를 쓰도록 노력했습니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">될 수 있으면 변수보다 상수를 써야 합니다. 데이터의 값이 아무 때나 막 바뀌는 것보다는, 고정된 값이 이해하기 쉽습니다. 상수를 사용하면 값을 바꾸지 말아야 할 데이터에서 실수로 값을 바꾸는 일이 줄어듭니다. 예를 들어, 사용자에게 어떤 행동을 취하는 프로그램이라면 user 변수를 써야겠다고 생각할 수 있습니다. 그런데 사용자가 단 한 명이라면? 당연히 user의 값은 바뀔 수 없고, 만약 바뀌었다면 그건 에러입니다. 상수를 사용하면 프로그래머가 신경쓰지 않아도 자바스크립트가 이런 상황에서 에러를 일으킵니다. 사용자가 두 명이라면 user 변수 하나를 재사용하는 것보다는 user1과 user2로 나누는 편이 낫습니다. 따라서 우선 상수를 먼저 생각합니다. 그 상수의 값이 바뀌는 게 자연스럽다고 생각된다면, 언제든지 변수로 바꿀 수 있습니다. 상수를 쓰면 안 되고 항상 변수를 써야 하는 상황도 있습니다. 예를 들어 4장에서 배울 루프 제어에는 변수를 써야 합니다. 시간이 지나면서 값이 바뀌는 경우에도 변수를 써야 합니다. 이번 장에서 사용한 targetTempC, currentTemp 같은 변수가 좋은 예입니다. 하지만 일단 상수를 쓰는 습관을 들이면, 변수가 꼭 필요한 상황이 생각보다 훨씬 적다는 걸 알고 놀라게 될 겁니다. 이 책의 예제에서는 가능하면 항상 변수 대신 상수를 쓰도록 노력했습니다.</summary></entry><entry><title type="html">3.1 변수와 상수</title><link href="http://localhost:4000/javascript/2020/04/18/javascript27/" rel="alternate" type="text/html" title="3.1 변수와 상수" /><published>2020-04-18T14:15:00+09:00</published><updated>2020-04-18T14:15:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/18/javascript27</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/18/javascript27/">&lt;p&gt;&lt;strong&gt;변수(variable)&lt;/strong&gt; 란 간단히 말해 이름이 붙은 값으로, 변수라는 이름이 암시하듯 값은 언제든 바뀔 수 있습니다.&lt;br /&gt;
예를 들어 날씨에 관한 프로그램을 만든다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;currentTempC&lt;/code&gt; 라는 변수를 사용할 수 있을 겁니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentTempC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 섭씨온도&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;NOTE_&lt;/strong&gt; let 키워드는 ES6에서 새로 생겼습니다.&lt;br /&gt;
ES6 이전에는 var 키워드만 사용할 수 있었는데, var에 대해서는 7장에서 설명합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;currentTempC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;22.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이번에는 &lt;strong&gt;let&lt;/strong&gt;을 사용하지 않았습니다.&lt;br /&gt;
let은 변수 선언에만 쓰이고, 각 변수는 한 번만 선언할 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; 단위가 필요한 숫자에서 단위와 값을 명확히 연결하는 방법은 없습니다.&lt;br /&gt;
즉, 언어의 기능에는 &lt;strong&gt;currentTempC&lt;/strong&gt;가 섭씨온도라고 명확히 규정할 방법이 없습니다.&lt;br /&gt;
그런데 이 변수에 화씨온도를 할당하면 예상치 못한 결과가 나올 겁니다.&lt;br /&gt;
따라서 필자는 변수 이름에 C를 붙여서 섭씨(Celsius) 단위임을 명확히 나타내고자 했습니다.&lt;br /&gt;
자바스크립트는 이런 규칙을 강제할 수 없지만, 이런 규칙은 작은 실수를 방지하는 일종의 문서화입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;변수를 선언할 때 꼭 초깃값을 지정해야 하는 건 아닙니다.&lt;br /&gt;
초기값을 할당하지 않으면 암시적으로 특별한 값 &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;가 할당됩니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;targetTempC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// let targetTempC = undefined; 와 같습니다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;let&lt;/strong&gt;문 하나에서 변수 여러 개를 선언할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;targetTempC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;room1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;conference_room_a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;room2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;lobby&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 예제에서는 변수 세 개를 선언했습니다.&lt;br /&gt;
&lt;strong&gt;targetTempC&lt;/strong&gt;는 값을 할당하지 않았으므로 암시적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;를 받습니다.&lt;br /&gt;
&lt;strong&gt;room1&lt;/strong&gt;은 선언과 동시에 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;conference_room_a&quot;&lt;/code&gt;를 할당했고, &lt;strong&gt;room2&lt;/strong&gt; 역시 선언과 동시에 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;lobby&quot;&lt;/code&gt;를 할당했습니다.&lt;br /&gt;
&lt;strong&gt;room1&lt;/strong&gt;과 &lt;strong&gt;room2&lt;/strong&gt;는 &lt;strong&gt;문자열(텍스트)&lt;/strong&gt; 변수입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;상수(constant)&lt;/strong&gt; 는 &lt;strong&gt;ES6&lt;/strong&gt;에서 새로 생겼습니다.&lt;br /&gt;
&lt;strong&gt;상수도 변수와 마찬가지로 값을 할당받을 수 있지만, 한 번 할당한 값을 바꿀 수는 없습니다.&lt;/strong&gt;&lt;br /&gt;
상수를 써서 쾌적한 온도와 최고 온도를 지정해 봅시다.&lt;br /&gt;
const 역시 상수 여러 개를 선언할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ROOM_TEMP_C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;21.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MAX_TEMP_C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;절대적인 규칙은 아니지만, 상수 이름에는 보통 대문자와 밑줄만 사용합니다.&lt;/strong&gt;&lt;br /&gt;
이런 규칙을 따르면 코드에서 상수를 찾기 쉽고, 상수의 값을 바꾸려 하지도 않게 됩니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">변수(variable) 란 간단히 말해 이름이 붙은 값으로, 변수라는 이름이 암시하듯 값은 언제든 바뀔 수 있습니다. 예를 들어 날씨에 관한 프로그램을 만든다면 currentTempC 라는 변수를 사용할 수 있을 겁니다. let currentTempC = 22; // 섭씨온도 NOTE_ let 키워드는 ES6에서 새로 생겼습니다. ES6 이전에는 var 키워드만 사용할 수 있었는데, var에 대해서는 7장에서 설명합니다. currentTempC = 22.5; 이번에는 let을 사용하지 않았습니다. let은 변수 선언에만 쓰이고, 각 변수는 한 번만 선언할 수 있습니다. TIP 단위가 필요한 숫자에서 단위와 값을 명확히 연결하는 방법은 없습니다. 즉, 언어의 기능에는 currentTempC가 섭씨온도라고 명확히 규정할 방법이 없습니다. 그런데 이 변수에 화씨온도를 할당하면 예상치 못한 결과가 나올 겁니다. 따라서 필자는 변수 이름에 C를 붙여서 섭씨(Celsius) 단위임을 명확히 나타내고자 했습니다. 자바스크립트는 이런 규칙을 강제할 수 없지만, 이런 규칙은 작은 실수를 방지하는 일종의 문서화입니다. 변수를 선언할 때 꼭 초깃값을 지정해야 하는 건 아닙니다. 초기값을 할당하지 않으면 암시적으로 특별한 값 undefined가 할당됩니다. let targetTempC; // let targetTempC = undefined; 와 같습니다. let문 하나에서 변수 여러 개를 선언할 수 있습니다. let targetTempC, room1 = &quot;conference_room_a&quot;, room2 = &quot;lobby&quot;; 위 예제에서는 변수 세 개를 선언했습니다. targetTempC는 값을 할당하지 않았으므로 암시적으로 undefined를 받습니다. room1은 선언과 동시에 &quot;conference_room_a&quot;를 할당했고, room2 역시 선언과 동시에 &quot;lobby&quot;를 할당했습니다. room1과 room2는 문자열(텍스트) 변수입니다. 상수(constant) 는 ES6에서 새로 생겼습니다. 상수도 변수와 마찬가지로 값을 할당받을 수 있지만, 한 번 할당한 값을 바꿀 수는 없습니다. 상수를 써서 쾌적한 온도와 최고 온도를 지정해 봅시다. const 역시 상수 여러 개를 선언할 수 있습니다. const ROOM_TEMP_C = 21.5, MAX_TEMP_C = 30; 절대적인 규칙은 아니지만, 상수 이름에는 보통 대문자와 밑줄만 사용합니다. 이런 규칙을 따르면 코드에서 상수를 찾기 쉽고, 상수의 값을 바꾸려 하지도 않게 됩니다.</summary></entry><entry><title type="html">3. 리터럴과 변수, 상수, 데이터 타입</title><link href="http://localhost:4000/javascript/2020/04/18/javascript26/" rel="alternate" type="text/html" title="3. 리터럴과 변수, 상수, 데이터 타입" /><published>2020-04-18T14:09:00+09:00</published><updated>2020-04-18T14:09:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/18/javascript26</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/18/javascript26/">&lt;p&gt;3장은 &lt;strong&gt;데이터&lt;/strong&gt;에 관한 장이며, 데이터를 자바스크립트가 이해할 수 있는 형식으로 바꾸는 법을 배웁니다.&lt;/p&gt;

&lt;p&gt;컴퓨터가 모든 데이터를 0과 1로 바꾼다는 사실은 아마 알고 있을 겁니다.&lt;br /&gt;
하지만 우리가 직접 0과 1만으로 일을 할 수는 없고, 우리에게 익숙한 형태인 숫자와 텍스트, 날짜 등을 다뤄야 합니다.&lt;br /&gt;
이런 숫자와 텍스트, 날짜 등을 &lt;strong&gt;데이터 타입(data type)&lt;/strong&gt; 이라 부릅니다.&lt;/p&gt;

&lt;p&gt;자바스크립트에서 사용할 수 있는 데이터 타입을 다루기 전에 먼저 &lt;strong&gt;변수(variable)&lt;/strong&gt; 와 &lt;strong&gt;상수(constant)&lt;/strong&gt;, &lt;strong&gt;리터럴(literal)&lt;/strong&gt; 에 대해 알아봅시다.&lt;br /&gt;
&lt;strong&gt;이들은 자바스크립트가 데이터를 보관하는 메커니즘입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;NOTE_&lt;/strong&gt; 프로그램을 배울 때 용어의 중요성을 과소평가하는 사람이 많습니다.&lt;br /&gt;
리터럴과 값(value)이 어떻게 다른지, 표현식(expression)과 문(statement)이 어떻게 다른지 이해하지 못하면 프로그램 언어를 배우는 데 장애가 될 수 있습니다.&lt;br /&gt;
이런 용어는 자바스크립트는 물론 컴퓨터 과학 전반에서 사용하는 용어입니다.&lt;br /&gt;
개념을 잘 이해하는 것도 물론 중요하지만, 용어에 관심을 가지면 배운 언어에 관한 지식을 다른 언어에도 적용할 수 있고 더 많은 소스에서 배울 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">3장은 데이터에 관한 장이며, 데이터를 자바스크립트가 이해할 수 있는 형식으로 바꾸는 법을 배웁니다. 컴퓨터가 모든 데이터를 0과 1로 바꾼다는 사실은 아마 알고 있을 겁니다. 하지만 우리가 직접 0과 1만으로 일을 할 수는 없고, 우리에게 익숙한 형태인 숫자와 텍스트, 날짜 등을 다뤄야 합니다. 이런 숫자와 텍스트, 날짜 등을 데이터 타입(data type) 이라 부릅니다. 자바스크립트에서 사용할 수 있는 데이터 타입을 다루기 전에 먼저 변수(variable) 와 상수(constant), 리터럴(literal) 에 대해 알아봅시다. 이들은 자바스크립트가 데이터를 보관하는 메커니즘입니다. NOTE_ 프로그램을 배울 때 용어의 중요성을 과소평가하는 사람이 많습니다. 리터럴과 값(value)이 어떻게 다른지, 표현식(expression)과 문(statement)이 어떻게 다른지 이해하지 못하면 프로그램 언어를 배우는 데 장애가 될 수 있습니다. 이런 용어는 자바스크립트는 물론 컴퓨터 과학 전반에서 사용하는 용어입니다. 개념을 잘 이해하는 것도 물론 중요하지만, 용어에 관심을 가지면 배운 언어에 관한 지식을 다른 언어에도 적용할 수 있고 더 많은 소스에서 배울 수 있습니다.</summary></entry><entry><title type="html">2.5 요약</title><link href="http://localhost:4000/javascript/2020/04/17/javascript25/" rel="alternate" type="text/html" title="2.5 요약" /><published>2020-04-17T16:53:00+09:00</published><updated>2020-04-17T16:53:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/17/javascript25</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/17/javascript25/">&lt;p&gt;이번 2장에서는 ES6 지원이 아직 널리 정착되지는 않았지만, 트랜스컴파일을 통해 ES5 코드로 바꿀 수 있으니 ES6의 장점을 포기할 필요는 없음을 알게 됐습니다.&lt;/p&gt;

&lt;p&gt;개발용 컴퓨터를 설정할 때는 다음과 같은 준비가 필요합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;좋은 에디터(1장을 보십시오.)&lt;/li&gt;
  &lt;li&gt;깃 설치에 관한 내용은 &lt;a href=&quot;https://git-scm.com/&quot;&gt;https://git-scm.com/&lt;/a&gt; 을 보십시오.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Gulp&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g gulp&lt;/code&gt; 명령으로 설치합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ESLint&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g eslint&lt;/code&gt; 명령으로 설치합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;새 프로젝트를 시작할 때는 다음과 같은 준비가 필요합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트에 사용할 전용 디렉터리, 이 디렉터리를 &lt;strong&gt;프로젝트 루트&lt;/strong&gt;라고 부릅니다.&lt;/li&gt;
  &lt;li&gt;깃 저장소(&lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;package.json&lt;/strong&gt; 파일 (&lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Gulpfile&lt;/strong&gt; gulpfile.js 이 장에서 만든 파일을 쓰십시오.&lt;/li&gt;
  &lt;li&gt;걸프와 바벨의 로컬 패키지, &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i -D @babel/register @babel/core @babel/preset-env&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;.babelrc&lt;/strong&gt; 파일 &lt;code class=&quot;highlighter-rouge&quot;&gt;{ &quot;presets&quot;: [ &quot;@babel/preset-env&quot; ] }&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;.eslintrc&lt;/strong&gt; 파일, &lt;code class=&quot;highlighter-rouge&quot;&gt;eslint --init&lt;/code&gt; 명령으로 만들고 원하는 대로 수정합니다.&lt;/li&gt;
  &lt;li&gt;노드 소스용 서브디렉터리 &lt;strong&gt;es6&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;브라우저 소스용 서브디렉터리 &lt;strong&gt;public/es6&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이상의 준비가 끝났으면 기본적인 작업 순서는 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;코드를 수정할 때는 논리적으로 일관되게 수정합니다.&lt;/li&gt;
  &lt;li&gt;걸프를 실행해서 코드에 존재하는 실수와 잠재적 오류를 찾습니다.&lt;/li&gt;
  &lt;li&gt;수정한 내용이 잘 동작하고 린트 프로그램에서 지적하는 것이 없을 때까지 반복합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 명령을 써서 원하지 않는 파일이 커밋되지 않는지 확인하십시오. 깃에서 추적하지 말아야할 파일이 있다면 &lt;strong&gt;.gitignore&lt;/strong&gt; 파일에 추가하십시오.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add -A&lt;/code&gt; 명령으로 바꾼 내용을 저장소에 추가합니다. 한꺼번에 추가하지 않으려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt; 명령을 파일마다 내려도 됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;[description of your changes]&quot;&lt;/code&gt; 명령으로 커밋합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;프로젝트에 따라서는 걸프 작업에 테스크를 추가하거나, &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; 명령으로 코드를 깃허브나 비트버킷 같은 공유 저장소에 올리는 등 다른 단계가 추가될 수 있습니다.&lt;br /&gt;
&lt;strong&gt;하지만 여기서 제시한 단계를 생략하지는 마십시오.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;앞으로 책에서 소스 코드를 제시할 때는 빌드와 실행에 필요한 단계를 다시 설명하지는 않을 겁니다.&lt;br /&gt;
예제에서 브라우저 코드라고 명시하지 않았다면 코드 샘플은 모두 노드에서 실행해야 합니다.&lt;br /&gt;
예를 들어 &lt;strong&gt;example.js&lt;/strong&gt; 파일을 사용하는 예제가 있다면 그 파일을 &lt;strong&gt;es6&lt;/strong&gt; 폴더에 저장한 후 다음과 같이 실행하십시오.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gulp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node dist/example.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;걸프 명령을 생략하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;babel-node&lt;/code&gt;로 실행해도 됩니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-node&lt;/code&gt;도 트랜스컴파일 과정을 거치므로 시간이 줄어들지는 않습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;babel-node es6/example.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 진짜 자바스크립트를 배울 시간입니다!&lt;/p&gt;</content><author><name></name></author><summary type="html">이번 2장에서는 ES6 지원이 아직 널리 정착되지는 않았지만, 트랜스컴파일을 통해 ES5 코드로 바꿀 수 있으니 ES6의 장점을 포기할 필요는 없음을 알게 됐습니다. 개발용 컴퓨터를 설정할 때는 다음과 같은 준비가 필요합니다. 좋은 에디터(1장을 보십시오.) 깃 설치에 관한 내용은 https://git-scm.com/ 을 보십시오. Gulp npm install -g gulp 명령으로 설치합니다. ESLint npm install -g eslint 명령으로 설치합니다. 새 프로젝트를 시작할 때는 다음과 같은 준비가 필요합니다. 프로젝트에 사용할 전용 디렉터리, 이 디렉터리를 프로젝트 루트라고 부릅니다. 깃 저장소(git init) package.json 파일 (npm init) Gulpfile gulpfile.js 이 장에서 만든 파일을 쓰십시오. 걸프와 바벨의 로컬 패키지, npm i -D @babel/register @babel/core @babel/preset-env .babelrc 파일 { &quot;presets&quot;: [ &quot;@babel/preset-env&quot; ] } .eslintrc 파일, eslint --init 명령으로 만들고 원하는 대로 수정합니다. 노드 소스용 서브디렉터리 es6 브라우저 소스용 서브디렉터리 public/es6 이상의 준비가 끝났으면 기본적인 작업 순서는 다음과 같습니다. 코드를 수정할 때는 논리적으로 일관되게 수정합니다. 걸프를 실행해서 코드에 존재하는 실수와 잠재적 오류를 찾습니다. 수정한 내용이 잘 동작하고 린트 프로그램에서 지적하는 것이 없을 때까지 반복합니다. git status 명령을 써서 원하지 않는 파일이 커밋되지 않는지 확인하십시오. 깃에서 추적하지 말아야할 파일이 있다면 .gitignore 파일에 추가하십시오. git add -A 명령으로 바꾼 내용을 저장소에 추가합니다. 한꺼번에 추가하지 않으려면 git add 명령을 파일마다 내려도 됩니다. git commit -m &quot;[description of your changes]&quot; 명령으로 커밋합니다. 프로젝트에 따라서는 걸프 작업에 테스크를 추가하거나, git push 명령으로 코드를 깃허브나 비트버킷 같은 공유 저장소에 올리는 등 다른 단계가 추가될 수 있습니다. 하지만 여기서 제시한 단계를 생략하지는 마십시오. 앞으로 책에서 소스 코드를 제시할 때는 빌드와 실행에 필요한 단계를 다시 설명하지는 않을 겁니다. 예제에서 브라우저 코드라고 명시하지 않았다면 코드 샘플은 모두 노드에서 실행해야 합니다. 예를 들어 example.js 파일을 사용하는 예제가 있다면 그 파일을 es6 폴더에 저장한 후 다음과 같이 실행하십시오. $ gulp $ node dist/example.js 걸프 명령을 생략하고 babel-node로 실행해도 됩니다. babel-node도 트랜스컴파일 과정을 거치므로 시간이 줄어들지는 않습니다. $ babel-node es6/example.js 이제 진짜 자바스크립트를 배울 시간입니다!</summary></entry></feed>