<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LEE HYUNG JU</title>
    <description>Jekyll Blog</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 01 Aug 2020 00:22:23 +0900</pubDate>
    <lastBuildDate>Sat, 01 Aug 2020 00:22:23 +0900</lastBuildDate>
    <generator>Jekyll v4.0.1</generator>
    
      <item>
        <title>쓰로틀링과 디바운싱</title>
        <description>&lt;h2 id=&quot;쓰로틀링과-디바운싱&quot;&gt;쓰로틀링과 디바운싱&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;쓰로틀링&lt;/strong&gt;(throttling)과 &lt;strong&gt;디바운싱&lt;/strong&gt;(debouncing)에 대해 알아보겠습니다.&lt;br /&gt;
용어가 생소하신 분들을 위해 간단히 설명해보겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;쓰로틀링 : 마지막 함수가 호출된 후 일정시간이 지나기 전에 다시 호출되지 않도록 하는 것&lt;/li&gt;
  &lt;li&gt;디바운싱 : 연이어 호출되는 함수들 중 마지막 함수(또는 제일 처음)만 호출하도록 하는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 두 개는 &lt;strong&gt;underscore(_)에도 있는 기능&lt;/strong&gt;입니다.&lt;br /&gt;
&lt;strong&gt;underscore&lt;/strong&gt;나 &lt;strong&gt;lodash&lt;/strong&gt;를 쓰고 계신 분들이라면 그 라이브러리의 메소드를 쓰시면 편합니다.&lt;/p&gt;

&lt;p&gt;사용처가 궁금하실 겁니다.&lt;br /&gt;
&lt;strong&gt;디바운싱&lt;/strong&gt;은 주로 ajax 검색에 자주 쓰입니다.&lt;br /&gt;
&lt;strong&gt;쓰로틀링&lt;/strong&gt;은 스크롤을 올리거나 내릴 때 보통 사용합니다.&lt;br /&gt;
&lt;strong&gt;어디까지나 제 경험에 바탕한 사용처입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;디바운싱&quot;&gt;디바운싱&lt;/h3&gt;

&lt;p&gt;요즘 서비스들은 검색어 치자마자 엔터 없이도 결과가 바로바로 나옵니다.&lt;br /&gt;
만약 ‘제로초’를 검색창에 친다고 합시다.&lt;br /&gt;
엔터없이도 결과를 즉시 보여주려면 항상 &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; 이벤트에 대기하고 있어야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;여기에 ajax 요청&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실제 ajax 요청을 보내기는 힘드니 콘솔 로그로 대체합니다.&lt;br /&gt;
로그가 콘솔에 찍힐 때마다 ajax 요청이 실행된다고 생각하시면 됩니다.&lt;br /&gt;
문제는 한 글자 칠 때마다 ajax 요청이 실행된다는 것입니다.&lt;br /&gt;
‘ㅈ’, ‘제’, ‘젤’, ‘제로’, ‘제롳’, ‘제로초’ 모두 요청이 실행됩니다.&lt;br /&gt;
6번이나 요청을 했습니다(한글같은 조합형 언어는 사진처럼 6번보다 더 많이 이벤트가 발생할 수도 있습니다).&lt;br /&gt;
거기에 ‘ㅈ’, ‘젤’, ‘제롳’는 제대로 된 검색 결과가 나오지 않을 것 같은 검색어입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/202007/image01.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이와 같은 낭비는 유료 API를 사용했을 때 큰 문제가 됩니다.&lt;br /&gt;
만약 구글지도 API 같은 것을 사용할 때 위와 같이 쿼리를 10번 날리면 어마어마한 손해입니다.&lt;br /&gt;
쿼리 하나가 다 돈이거든요.&lt;br /&gt;
따라서 디바운싱은 비용적인 문제와도 관련이 있습니다.&lt;br /&gt;
우리는 마지막 ‘제로초’를 다 쳤을 때 ajax 요청을 보내고 싶습니다.&lt;/p&gt;

&lt;p&gt;먼저 어떻게 구현할지 생각해봅시다.&lt;br /&gt;
보통 사람들은 타자를 연달아 칩니다.&lt;br /&gt;
중간에 잠시 생각하느라 몇 초 쉴수는 있겠지만 대부분 한번에 검색어를 입력합니다.&lt;br /&gt;
따라서 입력이 다 끝난 후에 요청을 보내면 됩니다.&lt;br /&gt;
즉 타자를 칠 때(input 이벤트 발생)마다 타이머를 설정합니다.&lt;br /&gt;
200ms 동안 입력이 없으면 입력이 끝난 것으로 칩니다(시간은 적당히 설정하면 됩니다).&lt;br /&gt;
200ms 이전에 타자 입력이 발생하면 이전 타이머는 취소하고 새로운 타이머를 다시 설정하는 겁니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;clearTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;여기에 ajax 요청&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 더는 여러번 호출되지 않습니다.&lt;br /&gt;
이게 바로 &lt;strong&gt;디바운싱&lt;/strong&gt;입니다.&lt;br /&gt;
&lt;strong&gt;한글 특성상 마지막에 두번 호출되는 경우도 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/202007/image02.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;쓰로틀링&quot;&gt;쓰로틀링&lt;/h3&gt;

&lt;p&gt;쓰로틀링은 보통 성능 문제 때문에 많이 사용합니다.&lt;br /&gt;
특성 자체가 실행 횟수에 제한을 거는 것이기도 하고요.&lt;/p&gt;

&lt;p&gt;스크롤을 올리거나 내릴 때 scroll 이벤트가 매우 많이 발생합니다.&lt;br /&gt;
scroll 이벤트가 발생할 때 뭔가 복잡한 작업을 하도록 설정했다면 매우 빈번하게 실행되기 때문에 엄청 렉이 
걸릴 것입니다.&lt;br /&gt;
그럴 때 쓰로틀링을 걸어줍니다.&lt;br /&gt;
몇 초에 한 번, 도는 몇 밀리초에 한 번씩만 실행되게 제한을 두는 것이죠.&lt;/p&gt;

&lt;p&gt;디바운싱으로 구현했던 ajax 검색을 쓰로틀링으로 대체해도 됩니다.&lt;br /&gt;
물론 쿼리는 조금 더 날리겠지만요.&lt;br /&gt;
한번 구현해보겠습니다.&lt;br /&gt;
똑같이 200ms 초 제한을 걸었습니다.&lt;br /&gt;
타이머가 설정되어 있으면 아무 동작도 하지 않고, 타이머가 없다면 타이머를 설정합니다.&lt;br /&gt;
타이머는 일정 시간 후에 스스로를 해제하고, ajax 요청을 날리게 하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;여기에 ajax 요청&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 최소 200ms 마다 요청을 보냅니다.&lt;br /&gt;
물론 ajax 검색은 디바운싱으로 처리하는 게 더 나아보입니다.&lt;br /&gt;
하지만 중간 중간 검색 결과도 보여주고 싶다면 쓰로틀링도 괜찮은 옵션인 것 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/202007/image03.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;물론 매우 빠르게 구현한 것이기 때문에 이 코드로는 예외 사항들을 처리하지 못할수도 있습니다.&lt;br /&gt;
&lt;strong&gt;underscore&lt;/strong&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;_.debounce&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;_.throttle&lt;/code&gt;을 추천합니다.&lt;/p&gt;

&lt;p&gt;이렇게 디바운싱과 쓰로틀에 대해 알아보았습니다.&lt;br /&gt;
코드는 잊어버리셔도 좋습니다.&lt;br /&gt;
하지만 용어는 기억해두세요.&lt;br /&gt;
그래야 나중에 다시 검색할 수 있습니다.&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Jul 2020 23:23:00 +0900</pubDate>
        <link>http://localhost:4000/project/2020/07/31/project2.html</link>
        <guid isPermaLink="true">http://localhost:4000/project/2020/07/31/project2.html</guid>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>gitlab branch merged 의미</title>
        <description>&lt;h2 class=&quot;cont_title&quot; id=&quot;gitlab-branch-merged-의미&quot;&gt;gitlab branch merged 의미&lt;/h2&gt;

&lt;p&gt;gitlab branch 목록의 &lt;code class=&quot;highlighter-rouge&quot;&gt;merged&lt;/code&gt; badge 의미&lt;br /&gt;
해당 브랜치의 내용은 default 브랜치에 이미 다 있다 라는 뜻..으로 추측&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Jul 2020 14:06:00 +0900</pubDate>
        <link>http://localhost:4000/gitlab/2020/07/31/gitlab.html</link>
        <guid isPermaLink="true">http://localhost:4000/gitlab/2020/07/31/gitlab.html</guid>
        
        
        <category>gitlab</category>
        
      </item>
    
      <item>
        <title>다른 브랜치에서 특정 파일들만 갖고오고 싶을 때</title>
        <description>&lt;h2 id=&quot;다른-브랜치에서-특정-파일들만-갖고오고-싶을-때&quot;&gt;다른 브랜치에서 특정 파일들만 갖고오고 싶을 때&lt;/h2&gt;

&lt;p&gt;master 브랜치에 다른 브랜치의 특정 내용을 가져오고 싶을 때&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;브랜치이름&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; pc/dist
git checkout &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;브랜치이름&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; mobile/dist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 31 Jul 2020 14:01:00 +0900</pubDate>
        <link>http://localhost:4000/git/2020/07/31/git.html</link>
        <guid isPermaLink="true">http://localhost:4000/git/2020/07/31/git.html</guid>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>throttle, debounce &amp; difference</title>
        <description>&lt;h2 id=&quot;throttle-debounce--difference&quot;&gt;throttle, debounce &amp;amp; difference&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;스로틀(Throttle)&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;디바운스(Debounce)&lt;/code&gt;란 무엇일까?&lt;/p&gt;

&lt;p&gt;이 두 가지 방법 모두 &lt;strong&gt;DOM 이벤트를 기반으로 실행하는 자바스크립트를 성능상의 이유로 JS의 양적인 측면, 즉 이벤트(event)를 제어(제한)&lt;/strong&gt;하는 방법이다.&lt;br /&gt;
예를 들어, 웹/앱 사용자가 스크롤(scroll wheel), 트랙패드, 스크롤 막대를 드래깅한다고 가정해 봅니다.&lt;br /&gt;
스크롤(scroll wheel), 트랙패드, 스크롤 막대를 드래깅을 하게 되면 사용자는 크게 느끼지 못할 수 있으나 이 행위로 인해 수많은 스크롤 이벤트가 발생하게 됩니다.&lt;/p&gt;

&lt;p&gt;즉, &lt;strong&gt;사용자가 아래로 5000px 정도의 스크롤 다운을 한다면 100개 이상의 이벤트가 발생될 가능성이 큽니다.&lt;/strong&gt;&lt;br /&gt;
이러한 스크롤(scroll wheel), 트랙패드, 스크롤 막대를 드래깅함으로써 매번 스크롤 이벤트에 대한 콜백(callback)이 발생하고 그 콜백이 수행하는 일이 매우 큰 리소스를 잡아먹게 될 것입니다.&lt;br /&gt;
다시 말해, 과도한 이벤트 횟수의 실행으로 이벤트 핸들러가 무거운 계산 및 기타 DOM 조작과 같은 작업을 수없이 많이 수행하는 경우 성능 문제가 발생하고 이는 사용자 경험까지 떨어뜨리게 될 것입니다.&lt;/p&gt;

&lt;p&gt;다음은 위에 설명드린 상황과 유사한 예제입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codepen.io/jaehee/pen/PXzOzV&quot; target=&quot;_blank&quot;&gt;https://codepen.io/jaehee/pen/PXzOzV&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이러한 문제는 2011년에 트위터 웹사이트에서 트위터를 스크롤할 때 속도가 느려지고 응답이 없는 현상이 나타났습니다.&lt;br /&gt;
jQuery 창시자인 존 레식(John Resig)은 스크롤 이벤트에 값 비싼 기능을 직접 부착하는 것이 얼마나 나쁜 것인지에 대한 블로그 게시물을 게시했습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;존 레식 2011년 글&lt;/strong&gt;&lt;br /&gt;
지난 주 트위터에서 문제가 발생하여 많은 사용자들이 웹 사이트를 사용할 수 없게 되었습니다.&lt;br /&gt;
스크롤 시도가 너무 느려서 사이트가 응답하지 않는 것처럼 보입니다.&lt;/p&gt;

  &lt;p&gt;트위터 팀은 조사한 결과 1.4.4에서 1.4.2로 사용했던 jQuery 버전을 되돌리면 사이트가 다시 반응할 것이라고 판단했습니다.&lt;br /&gt;
더 조사한 결과 느린 코드가 컨텍스트 선택기에서 클래스 이름으로 항목을 검색하는 것으로 나타났습니다.&lt;br /&gt;
(예: $something.find(‘.class’))&lt;/p&gt;

  &lt;p&gt;어떻게 이런 일이 일어났나?&lt;br /&gt;
우선 jQuery 1.4.4에는 아무런 문제가 없습니다.&lt;br /&gt;
이 특정 성능 회귀는 jQuery 1.4.3에 있습니다.&lt;br /&gt;
1.4.3에서는 상황에 맞는 쿼리에 기존 Sizzle 선택기 엔진을 사용하는 것에서 브라우저의 기본 &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt; 메서드(있는 경우)를 사용하는 것으로 
전환했습니다.&lt;br /&gt;
이 변경 사항은 1.4.3 릴리스 노트에서 명시적으로 언급되고 강조되었으므로 정말 좋은 변경 사항입니다.&lt;br /&gt;
일반적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt;을 사용하면 특히 복잡한 쿼리 및 복잡한 문서(많은 것으로 보이는)에 대해 훨씬 빠른 쿼리가 발생합니다.&lt;/p&gt;

  &lt;p&gt;그러나 모든 성능 변경과 마찬가지로 일부 항목은 더 빨라지지만 일부 항목은 느려질 수 있습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;.find(&quot;.class&quot;)&lt;/code&gt;(존재하는 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;getElementsByClassName&lt;/code&gt;을 사용하는 경우) 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;.find(&quot;div&quot;)&lt;/code&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;getElementsByTagName&lt;/code&gt;을 사용하는 경우)와 같은 
이전에 최적화 된 쿼리의 경우입니다.&lt;br /&gt;
위에서 언급한 두 가지 방법 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt;을 통해 실행되는 쿼리보다 항상 더 빠릅니다.&lt;br /&gt;
이것이 항상 사건이 될지 여부는 전적으로 다른 질문입니다.&lt;/p&gt;

  &lt;p&gt;&lt;mark&gt;즉, 위 말은 .find() 메소드를 클래스명으로 찾냐, 태그이름으로 찾냐에 따라 `getElementsByClassName`로 찾던지 `getElementsByTagName` 이걸로 찾던지 하는게 더 빠르다는 내용이다.  
그냥 무턱대고 `querySelectorAll` 이걸로 찾는 것보다. ㅇㅋ?&lt;/mark&gt;&lt;/p&gt;

  &lt;p&gt;여기서 흥미로운 점은 jQuery의 기본 선택기 엔진에 대해 &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt;을 꽤 오랫동안 사용하고 있다는 것입니다($(‘.class’)는 &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt;을 사용함).&lt;br /&gt;
&lt;strong&gt;1.4.3의 유일한 변경 사항은 .find(‘.class’)가 &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt;을 사용하지 않는 차이를 메우는 것입니다.&lt;/strong&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;$('.class')&lt;/code&gt; 사용과 관련된 특정 성능 회귀에 대해서는 들어본 적이 없습니다.&lt;/p&gt;

  &lt;p&gt;이것은 중요한 점을 제시합니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt;에 비해 &lt;code class=&quot;highlighter-rouge&quot;&gt;getElementsByClassName&lt;/code&gt;가 얼마나 더 빠를까요?&lt;br /&gt;
예비 테스트에서는 브라우저에 따라 약 0.5 ~ 2배 더 빨랐습니다.&lt;br /&gt;
이것은 분명히 차이가 나긴 나지만 무시할만한 수준입니다.&lt;br /&gt;
&lt;strong&gt;예를 들어 Firefox 3.6에서 클래스 이름으로 검색하는 것과 쿼리하는 것의 차이점은 약 0.007입니다.&lt;/strong&gt;&lt;br /&gt;
물론 큰 응용 프로그램을 손상시킬 수 있는 것은 없습니다.&lt;/p&gt;

  &lt;p&gt;즉, 성능 회귀가 마음에 들지 않기 때문에 오늘은 일반적인 경우에 대한 성능을 향상시키기 위해 지글(jQuery의 Sizzle)로 일부 바로가기를 백포트했씁니다.&lt;br /&gt;
예를 들어 Sizzle(“div”), Sizzle(“.foo”) 및 Sizzle(“#id”)는 &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt;을 사용하여 건너뛰고 브라우저에서 제공하는 기본 메소드가 있는 경우 이를 사용하려고 합니다.&lt;br /&gt;
(jQuery는 이미 이들 중 일부를 수행했습니다.) (즉, “div” 및 “#id”, 우리는 “.foo” 바로 가기도 추가했습니다.)&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;그래서, 성능 저하가 그다지 크지 않은 경우 왜 트위터에 많은 문제가 있었습니까?&lt;/strong&gt;&lt;br /&gt;
현실은 이 특별한 변화가 낙타의 등을 부러뜨린 빨대일 뿐이라는 것입니다.&lt;br /&gt;
트위터에 문제를 일으킨 두가기 것들이 있습니다.&lt;br /&gt;
이것들은 두가지 일반적인 모범 사례로 나눌 수 있습니다.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;모범사례&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;핸들러를 창 스크롤 이벤트에 첨부하는 것은 매우 나쁜생각입니다.&lt;/strong&gt;&lt;br /&gt;
브라우저에 따라 스크롤 이벤트가 많이 발생하고 스크롤 콜백에 코드를 넣으면 페이지 스크롤 시도 속도가 느려집니다(좋은 생각은 아닙니다).&lt;br /&gt;
결과적으로 스크롤 처리기의 성능 저하는 전체적으로 스크롤 성능을 저하시킵니다.&lt;br /&gt;
대신 어떤 형태의 타이머를 사용하여 매 X밀리 초마다 확인하거나 스크롤 이벤트를 첨부하고 지연 후 (또는 주어진 실행 횟수 후-지연 후) 코드를 실행하는 것이 
훨씬 좋습니다.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;재사용중인 선택기 쿼리를 항상 캐시하십시오.&lt;/strong&gt;&lt;br /&gt;
왜 스크롤 이벤트가 발생할 때마다 트위터가 DOM을 다시 쿼리하기로 결정했는지는 확실하지 않지만 스크롤 자체가 DOM을 변경하지 않았기 때문에 이것이
필요하지 않은 것 같습니다.&lt;br /&gt;
단일 쿼리 결과를 변수에 저장하고 재사용할 때마다 찾아볼 수 있었습니다.&lt;br /&gt;
결과적으로 쿼리 오버 헤드가 전혀 발생하지 않습니다(더 빠른 &lt;code class=&quot;highlighter-rouge&quot;&gt;getElementsByClassName&lt;/code&gt; 코드를 사용하는 것보다 낫습니다.)&lt;/p&gt;

  &lt;p&gt;따라서이 두 가지 기술을 결합하면 결과 코드는 다음과 같습니다.&lt;/p&gt;

  &lt;pre&gt;&lt;code class=&quot;language-jQuery&quot;&gt;  var outerPane = $details.find(&quot;.details-pane-outer&quot;),
      didScroll = false;
    
  $(window).scroll(function() {
      didScroll = true;
  });
    
  setInterval(function() {
      if ( didScroll ) {
          didScroll = false;
          // Check your page position and then
          // Load in more results
      }
  }, 250);
&lt;/code&gt;&lt;/pre&gt;

  &lt;p&gt;이것이 명확하게 정리하고 미래의 무한 스크롤 페이지 개발자에게 좋은 조언을 제공하기를 바랍니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;당시에 존 레식이 제안안 해결책은 &lt;code class=&quot;highlighter-rouge&quot;&gt;onScroll&lt;/code&gt; 이벤트 외부에서 일정 시간마다 250ms씩 실행되는 루프였고, 그렇게하면 과도한 이벤트 처리가 되지 않습니다.&lt;br /&gt;
이 간단한 기술로 사용자 경험을 망치지 않을 수 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;요즘에는 그 당시보다 이벤트 처리하는 정교한 방법으로 사용되는 것이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Throttle&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Debounce&lt;/code&gt;이란 해결책입니다.&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Throttle&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;Debounce&lt;/code&gt;는 &lt;mark&gt;이벤트 핸들러가 많은 연산(예 : 무거운 계산 및 기타 DOM 조작)을 수행(이벤트 핸들러의 과도한 횟수가 발생하는 것)하는 경우에 대해 제약을 
걸어 제어할 수 있는 수준으로 이벤트를 발생(그 핸들러를 더 적게 실행하면 빠져나갈 수 있음)시키는 것을 목표&lt;/mark&gt;로 하는 기술입니다.&lt;/p&gt;

&lt;h3 id=&quot;throttle과-debounce-사용-사례&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Throttle&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;Debounce&lt;/code&gt; 사용 사례&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;사용자가 창 크기 조정을 멈출 때까지 기다렸다가 &lt;code class=&quot;highlighter-rouge&quot;&gt;resizing event&lt;/code&gt; 사용하기 위해&lt;/li&gt;
  &lt;li&gt;사용자가 키보드 입력을 중지(예: 검색창) 할 때까지 ajax 이벤트를 발생시키지 않기 위해&lt;/li&gt;
  &lt;li&gt;페이지의 스크롤 위치를 측정하고 최대 50ms 마다 응답하기를 바랄 경우에&lt;/li&gt;
  &lt;li&gt;앱에서 요소를 드래그할 때 좋은 성능을 보장하기 위해&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;디바운스(debounce)와 스로틀(throttle)은 시간이 지남에 따라 함수를 몇 번이나 실행할지를 제어하는 &lt;mark&gt;유사한 기술이지만 서로 다릅니다.&lt;/mark&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;디바운스 또는 스로틀은 DOM 이벤트에 함수를 첨부할 때 특히 유용합니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;그 이유는 이벤트와 함수 실행 사이에 제어 계층을 제공하기 때문입니다.&lt;/strong&gt;&lt;br /&gt;
그리고 기억해야 할 것은 DOM 이벤트가 얼마나 자주 내보내질지는 제어하지 않는다는 것을 알아야 합니다.&lt;/p&gt;

&lt;p&gt;해당 기술과 그 차이점에 대해 알아보도록 하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;debounce&quot;&gt;Debounce&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Debounce&lt;/code&gt;는 이벤트를 그룹화하여 특정시간이 지난 후 하나의 이벤트만 발생하도록 하는 기술입니다.&lt;br /&gt;
즉, 순차적 호출을 하나의 그룹으로 “그룹화”할 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;debounce&lt;/code&gt; : 연이어 호출되는 함수들 중 마지막 함수(또는 제일 처음)만 호출되도록 하는 것&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/202007/image00.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;당신이 엘레베이터 안에 있다고 상상해 보세요.&lt;br /&gt;
문이 닫히기 시작하고 갑자기 다른 사람이 타려고 한다면 엘리베이터가 층으로 이동하는 기능을 시작하지 않아서 문이 다시 열리게 됩니다.&lt;br /&gt;
그리고 또 다른 사람에 의해 층의 이동 변경 기능이 일어나게 됩니다.&lt;br /&gt;
즉, 엘리베이터는 기능을 지연시키고 있지만(층간 이동), 자원을 최적화하게 됩니다.&lt;/p&gt;

&lt;p&gt;단추를 클릭하거나 마우스 위로 움직여 디바운스의 예제를 확인해보세요.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codepen.io/jaehee/pen/XoKeRW&quot; target=&quot;_blank&quot;&gt;https://codepen.io/jaehee/pen/XoKeRW&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 예제에서 연속적인 빠른 이벤트가 단일 디바운싱 이벤트로 어떻게 표현되는지 볼 수 있습니다.&lt;br /&gt;
&lt;strong&gt;그러나 이벤트가 큰 간격으로 발생되면 디바운싱은 발생하지 않습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;리사이즈-예제resize-example&quot;&gt;리사이즈 예제(Resize Example)&lt;/h3&gt;

&lt;p&gt;데스크탑의 브라우저 창 크기를 조정하는 경우에 많은 크기 창 조정 이벤트를 내보낼 수 있습니다.&lt;br /&gt;
다음은 브라우저 창 조정에 대한 데모입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codepen.io/jaehee/pen/GPqOaK&quot; target=&quot;_blank&quot;&gt;https://codepen.io/jaehee/pen/GPqOaK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;보시다시피 resize 이벤트에 대해 마지막을 추적하고 있습니다.&lt;br /&gt;
&lt;strong&gt;왜냐하면 우리는 사용자가 브라우저 크기를 조정하지 않은 최종 값에만 관심이 있기 때문입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;ajax-요청이있는-자동-완성-양식의-키-누르기-예제&quot;&gt;Ajax 요청이있는 자동 완성 양식의 키 누르기 예제&lt;/h3&gt;

&lt;p&gt;요즘 서비스들은 검색어 치자마자 엔터 없이도 결과가 바로바로 나옵니다.&lt;br /&gt;
만약 ‘제로초’를 검색창에 친다고 합시다.&lt;br /&gt;
&lt;strong&gt;엔터 없이도 결과를 즉시 보여주려면 항상 input 이벤트에 대기하고 있어야 합니다.&lt;/strong&gt;&lt;br /&gt;
문제는 한 글자 칠 때마다 ajax 요청이 실행된다는 것입니다.&lt;br /&gt;
‘ㅈ’, ‘제’, ‘젤’, ‘제로’, ‘제롳’, ‘제로초’ 모두 요청이 실행됩니다.&lt;br /&gt;
6번이나 요청을 했습니다(&lt;strong&gt;한글같은 조합형 언어는 사진처럼 6번보다 더 많이 이벤트가 발생할 수도 있습니다&lt;/strong&gt;).&lt;br /&gt;
거기에 ‘ㅈ’, ‘젤’, ‘제롳’는 제대로 된 검색 결과가 나오지 않을 것 같은 검색어입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이와 같은 낭비는 유료 API를 사용했을 때 큰 문제가 됩니다.&lt;/strong&gt;&lt;br /&gt;
만약 구글지도 API 같은 것을 사용할 때 위와 같이 쿼리를 10번 날리면 어마어마한 손해입니다.&lt;br /&gt;
쿼리 하나가 다 돈이거든요.&lt;br /&gt;
&lt;strong&gt;따라서 디바운싱은 비용적인 문제와도 관련이 있습니다.&lt;/strong&gt;&lt;br /&gt;
그렇기 때문에 마지막 ‘제로초’를 다 쳤을 때 ajax 요청을 보내야 할 것입니다.&lt;/p&gt;

&lt;p&gt;다음은 위와 같은 유사한 예제입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codepen.io/jaehee/pen/JwKMGw&quot; target=&quot;_blank&quot;&gt;https://codepen.io/jaehee/pen/JwKMGw&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;throttle&quot;&gt;Throttle&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Throttle&lt;/code&gt;은 이벤트를 일정한 주기마다 발생하도록 하는 기술입니다.&lt;br /&gt;
예를 들어 Throttle의 설정시간으로 1ms를 주게되면 해당 이벤트는 1ms 동안 최대 한번만 발생하게 됩니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Throttle&lt;/code&gt; : 마지막 함수가 호출된 후 일정 시간이 지나기 전에 다시 호출되지 않도록 하는 것&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;특성 자체가 실행 횟수에 제한을 거는 것이기 때문에 일반적으로 성능 문제 때문에 많이 사용합니다.&lt;br /&gt;
스크롤을 올리거나 내릴 때 scroll 이벤트 핸들러 경우에 매우 많이 발생합니다.&lt;br /&gt;
scroll 이벤트가 발생할 때 뭔가 복잡한 작업을 하도록 설정했다면 매우 빈번하게 실행되기 때문에 큰 버퍼링이 걸릴지도 모를 것입니다.&lt;br /&gt;
그럴때 쓰로틀링을 사용할 수 있습니다.&lt;br /&gt;
몇 초에 한번, 또는 몇 밀리초에 한번씩만 실행되게 제한을 두는 것입니다.&lt;/p&gt;

&lt;h3 id=&quot;무한-스크롤링-페이지infinite-scrolling-page&quot;&gt;무한 스크롤링 페이지(infinite scrolling page)&lt;/h3&gt;

&lt;p&gt;사용자가 &lt;code class=&quot;highlighter-rouge&quot;&gt;footer&lt;/code&gt;에서 얼마나 떨어져 있는지 확인해야하고 사용자가 맨 아래로 스크롤 했다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ajax&lt;/code&gt;를 통해 더 많은 콘텐츠를 요청하여 페이지에 추가해야 합니다.&lt;/p&gt;

&lt;p&gt;디바운싱은 사용자가 스크롤을 멈출 때만 이벤트를 발생시키므로 디바운싱보다는 스로틀이 적합할 수 있습니다.&lt;br /&gt;
사용자가 footer에 도달하기 전에 컨텐츠를 가져와야 하기 때문입니다.&lt;br /&gt;
throttle을 통해 사용자 위치가 얼마나 footer로 부터 떨어져 있는지 항상 확인할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codepen.io/jaehee/pen/GPqyGj&quot; target=&quot;_blank&quot;&gt;https://codepen.io/jaehee/pen/GPqyGj&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;애니메이션-프레임-예제&quot;&gt;애니메이션 프레임 예제&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codepen.io/jaehee/pen/BvzJOR&quot; target=&quot;_blank&quot;&gt;https://codepen.io/jaehee/pen/BvzJOR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;debounce와-throttle-차이점&quot;&gt;Debounce와 Throttle 차이점&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Info&lt;/strong&gt;&lt;br /&gt;
디바운싱과 스로틀의 가장 큰 차이점은 스로틀은 적어도 X밀리 초마다 정기적으로 기능 실행을 보장한다는 것입니다.&lt;br /&gt;
Debounce는 아무리 많은 이벤트가 발생해도 모두 무시하고 특정 시간사이에 어떤 이벤트도 발생하지 않았을 때 딱 한번만 
마지막 이벤트를 발생시키는 기법입니다.&lt;br /&gt;
따라서 &lt;strong&gt;5ms&lt;/strong&gt;가 지나기전에 계속 이벤트가 발생할 경우 콜백에 반응하는 이벤트는 발생하지 않고 계속 무시됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;debounce와-throttle-차이점-예제-간단히-살펴보기&quot;&gt;Debounce와 Throttle 차이점 예제 간단히 살펴보기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codepen.io/jaehee/pen/jXrYQz&quot; target=&quot;_blank&quot;&gt;https://codepen.io/jaehee/pen/jXrYQz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;참고자료&quot;&gt;참고자료&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://sunkyun.com/community/bbs/board.php?bo_table=script&amp;amp;wr_id=23&quot; target=&quot;_blank&quot;&gt;http://sunkyun.com/community/bbs/board.php?bo_table=script&amp;amp;wr_id=23&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/28103125/disable-inertia-scroll-for-single-page-webapp&quot; target=&quot;_blank&quot;&gt;https://stackoverflow.com/questions/28103125/disable-inertia-scroll-for-single-page-webapp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://webclub.tistory.com/607&quot; target=&quot;_blank&quot;&gt;https://webclub.tistory.com/607&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://johnresig.com/blog/learning-from-twitter/&quot; target=&quot;_blank&quot;&gt;https://johnresig.com/blog/learning-from-twitter/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://css-tricks.com/debouncing-throttling-explained-examples/&quot; target=&quot;_blank&quot;&gt;https://css-tricks.com/debouncing-throttling-explained-examples/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zerocho.com/category/JavaScript/post/59a8e9cb15ac0000182794fa&quot; target=&quot;_blank&quot;&gt;https://www.zerocho.com/category/JavaScript/post/59a8e9cb15ac0000182794fa&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/API/Document/scroll_event&quot; target=&quot;_blank&quot;&gt;https://developer.mozilla.org/ko/docs/Web/API/Document/scroll_event&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/API/Window/resize_event&quot; target=&quot;_blank&quot;&gt;https://developer.mozilla.org/ko/docs/Web/API/Window/resize_event&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://project42da.github.io/javascript/2019/05/08/raf-perform.html&quot; target=&quot;_blank&quot;&gt;https://project42da.github.io/javascript/2019/05/08/raf-perform.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://asfirstalways.tistory.com/362&quot; target=&quot;_blank&quot;&gt;https://asfirstalways.tistory.com/362&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jbee.io/web/optimize-scroll-event/&quot; target=&quot;_blank&quot;&gt;https://jbee.io/web/optimize-scroll-event/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sculove.github.io/blog/2018/01/18/javascriptflow/&quot; target=&quot;_blank&quot;&gt;http://sculove.github.io/blog/2018/01/18/javascriptflow/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://css-tricks.com/the-difference-between-throttling-and-debouncing/&quot; target=&quot;_blank&quot;&gt;https://css-tricks.com/the-difference-between-throttling-and-debouncing/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://davidwalsh.name/javascript-debounce-function&quot; target=&quot;_blank&quot;&gt;https://davidwalsh.name/javascript-debounce-function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 30 Jul 2020 16:47:00 +0900</pubDate>
        <link>http://localhost:4000/project/2020/07/30/project.html</link>
        <guid isPermaLink="true">http://localhost:4000/project/2020/07/30/project.html</guid>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>관성(가속) 스크롤 및 100vh(window.innerHeight)</title>
        <description>&lt;h2 id=&quot;관성가속-스크롤-및-100vhwindowinnerheight&quot;&gt;관성(가속) 스크롤 및 100vh(window.innerHeight)&lt;/h2&gt;

&lt;h3 id=&quot;관성가속-스크롤에-관하여&quot;&gt;관성(가속) 스크롤에 관하여&lt;/h3&gt;

&lt;p&gt;관성 스크롤이란, 사용자가 스크롤 이벤트를 멈췄음에도 불구하고(사실은 멈췄다고 인식하는거다. 눈으로 보기엔 실제 내 손가락이 트랙패드에서 떨어졌으니까)&lt;br /&gt;
스크롤 이벤트가 바로 멈추는 것이 아니라 서서히 감속하면서 멈추는 것을 뜻한다.&lt;br /&gt;
이러한 현상은 노트북 트랙패드 및 모바일에서 볼 수 있다.&lt;br /&gt;
이러한 현상 때문에 UI 스크립트를 짤 때 예상치 못한 변수가 많이 생겼다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;상단 고정 인터렉션&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/alvarotrigo/fullPage.js/blob/master/src/fullpage.js&quot; target=&quot;_blank&quot;&gt;https://github.com/alvarotrigo/fullPage.js/blob/master/src/fullpage.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;fullpage.js에는 관성스크롤에 대한 대비가 되어있는 듯 하다. 원리를 알아보자..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;fullpage.js - 관성스크롤에 영향 X&lt;br /&gt;
원리 파악 - 모든 섹션 및 html, body 태그 height : 100% ;&lt;br /&gt;
그리고 overflow: hidden;&lt;br /&gt;
이런식의 마크업을 통해 관성스크롤에 영향을 안받게 한 것 같음.&lt;br /&gt;
하지만 내가 구현해야되는 건 모든 부분이 one page scroll이 아님.&lt;br /&gt;
상단에서도 특정부분만 그렇게 작동해야됨.&lt;br /&gt;
그래서 fullpage.js는 좀 어렵다고 판단.&lt;/p&gt;

&lt;p&gt;그래서 어찌어찌 구현했으나 관성 스크롤은….해결을 못함.&lt;/p&gt;

&lt;h3 id=&quot;100vhwindowinnerheight&quot;&gt;100vh(window.innerHeight)&lt;/h3&gt;

&lt;p&gt;처음 페이지가 로드될 때 모바일 브라우저의 상하단바(address bar…)가 사라졌을 때의 window.innerHeight 값을 읽어오고 싶었지만,&lt;br /&gt;
불가능..&lt;br /&gt;
이 부분이 아쉽..&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Jul 2020 10:02:00 +0900</pubDate>
        <link>http://localhost:4000/issue/2020/07/27/issue7.html</link>
        <guid isPermaLink="true">http://localhost:4000/issue/2020/07/27/issue7.html</guid>
        
        
        <category>issue</category>
        
      </item>
    
      <item>
        <title>페럴렉스 (시차 스크롤)</title>
        <description>&lt;h2 id=&quot;페럴렉스-시차-스크롤&quot;&gt;페럴렉스 (시차 스크롤)&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;페럴렉스 (시차 스크롤)
    &lt;ul&gt;
      &lt;li&gt;기기호환 : 윈도우, 맥&lt;/li&gt;
      &lt;li&gt;브라우저 : I.E.&lt;/li&gt;
      &lt;li&gt;mousewheel Event : 마우스휠, 트랙패드&lt;/li&gt;
      &lt;li&gt;touchmove : 테블릿, 아이패드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;마우스휠 민감도에 따라서도 차이가 있음&lt;/p&gt;

&lt;p&gt;공통 해결책 .. Scroll Speed 제어..?&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jul 2020 18:07:00 +0900</pubDate>
        <link>http://localhost:4000/issue/2020/07/24/issue6.html</link>
        <guid isPermaLink="true">http://localhost:4000/issue/2020/07/24/issue6.html</guid>
        
        
        <category>issue</category>
        
      </item>
    
      <item>
        <title>스크롤 호환문제</title>
        <description>&lt;h2 id=&quot;스크롤-호환문제&quot;&gt;스크롤 호환문제&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;윈도우마우스휠 - iMac 호환문제&lt;br /&gt;
 ㄴ 시도해볼만한 해결책 : transition: 0.2s linear 이런 속성 부여 후 iMac에서 윈도우 마우스휠로 테스트&lt;/li&gt;
  &lt;li&gt;아직 부족한 상단모션&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 23 Jul 2020 20:12:00 +0900</pubDate>
        <link>http://localhost:4000/issue/2020/07/23/issue5.html</link>
        <guid isPermaLink="true">http://localhost:4000/issue/2020/07/23/issue5.html</guid>
        
        
        <category>issue</category>
        
      </item>
    
      <item>
        <title>package-lock.json은 왜 필요할까?</title>
        <description>&lt;h2 id=&quot;package-lockjson은-왜-필요할까&quot;&gt;package-lock.json은 왜 필요할까?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/static/img/node/npm-ls.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;어느날 부터인가 npm을 사용하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; 파일이 같이 생기기 시작했습니다.&lt;br /&gt;
이 파일의 정체가 궁금했지만 바쁘다는 핑계로 넘어가기를 몇 차례… 이제서야 &lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; 파일이 
왜 생겼는지 찾아 보았씁니다.&lt;/p&gt;

&lt;h3 id=&quot;package-lockjson-파일이란&quot;&gt;package-lock.json 파일이란&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; 파일은 npm을 사용하에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; 트리나 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 파일을 수정하게 되면 
자동으로 생성되는 파일입니다.&lt;br /&gt;
이 파일은 파일이 생성되는 시점의 의존성 트리에 대한 정확한 정보를 가지고 있습니다.&lt;/p&gt;

&lt;p&gt;아래는 &lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; 파일의 일부입니다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;db-http-proxy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;lockfileVersion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;requires&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;abbrev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.1.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;resolved&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;integrity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;abstract-logging&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;resolved&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://registry.npmjs.org/abstract-logging/-/abstract-logging-1.0.0.tgz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;integrity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sha1-i33q/TEFWbwo93ck3RuzAXcnjBs=&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.0.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;resolved&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://registry.npmjs.org/accept/-/accept-3.0.2.tgz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;integrity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sha512-bghLXFkCOsC1Y2TZ51etWfKDs6q249SAoHTZVfzWWdlZxoij+mgkj9AmUJWQpDY48TfnrTDIe43Xem4zdMe7mQ==&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;requires&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;boom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;7.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;hoek&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5.0.3&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;package-lockjson이-필요한-이유&quot;&gt;package-lock.json이 필요한 이유&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 파일의 의존성 선언에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;version range&lt;/code&gt;가 사용됩니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;version range&lt;/code&gt;란 특정 버전이 아니라 버전의 범위를 의미합니다.&lt;br /&gt;
가장 흔한 예로 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install express&lt;/code&gt;를 실행하게 되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 파일에는 &lt;strong&gt;“^4.16.3”(Caret Ranges)&lt;/strong&gt;로 
버전 범위가 추가됩니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Caret Ranges&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^1.2.3&lt;/code&gt; := &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;=1.2.3 &amp;lt;2.0.0-0&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^0.2.3&lt;/code&gt; := &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;=0.2.3 &amp;lt;0.3.0-0&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^0.0.3&lt;/code&gt; := &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;=0.0.3 &amp;lt;0.0.4-0&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^1.2.3-beta.2&lt;/code&gt; := &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;=1.2.3-beta.2 &amp;lt;2.0.0-0&lt;/code&gt;&lt;br /&gt;
 1.2.3 버전의 시험판은 베타 2 이상인 경우 허용됩니다.&lt;br /&gt;
 따라서 1.2.3-beta.4는 허용되지만 1.2.4-beta.2는 다른 [주, 부 패치] 튜플의 시험판이기 때문에 허용되지 않습니다.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^0.0.3-beta&lt;/code&gt; := &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;=0.0.3-beta &amp;lt;0.0.4-0&lt;/code&gt;&lt;br /&gt;
 0.0.3 버전의 시험판은 베타보다 크거나 같은 경우에만 허용됩니다.&lt;br /&gt;
 따라서 0.0.3-pr.2가 허용됩니다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;“^4.16.3”(Caret Ranges)&lt;/strong&gt;로 버전 범위가 추가된 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 파일로 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;을 실행하면 
현재는 &lt;strong&gt;4.16.3&lt;/strong&gt; 버전이 설치되지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;express&lt;/code&gt;의 새로운 minor, patch가 publish 되면 동일한 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 파일로 
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;을 실행해도 4.17.3이나 4.16.4 같은 업데이트된 버전이 설치됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;물론 대부분의 경우에는 문제가 없지만 간혹 업데이트된 버전이 오류를 발생시키는 경우가 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; 파일은 의존성 트리에 대한 정보를 가지고 있으며 &lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; 파일이 작성된 
시점의 의존성 트리가 다시 생성될 수 있도록 보장합니다.&lt;/p&gt;

&lt;p&gt;아래 시나리오를 통해서 설명하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;시나리오-1--package-lockjson-파일을-소스-저장소에-커밋하지-않은-경우&quot;&gt;시나리오 1 : package-lock.json 파일을 소스 저장소에 커밋하지 않은 경우&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;박과장이 npm으로 프로젝트를 만들어서 git에 소스코드를 push합니다.&lt;br /&gt;
이때 node_modules 폴더를 제외하고 package.json 파일만 커밋합니다.&lt;/li&gt;
  &lt;li&gt;김대리는 소스코드를 pull하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;을 실행합니다.&lt;/li&gt;
  &lt;li&gt;의존성 트리의 일부 버전이 박대리와 다르게 설치됩니다.&lt;/li&gt;
  &lt;li&gt;프로그램 실행시 오류가 발생합니다.&lt;/li&gt;
  &lt;li&gt;김대리는 오늘도 야근을 합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;시나리오-2--package-lockjson-파일을-소스-저장소에-커밋한-경우&quot;&gt;시나리오 2 : package-lock.json 파일을 소스 저장소에 커밋한 경우&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;박과장이 npm으로 프로젝트를 만들어서 git에 소스코드를 push합니다.&lt;br /&gt;
이때 node_modules 폴더를 제외하고 package.json 파일과 package-lock.json 파일을 같이 커밋합니다.&lt;/li&gt;
  &lt;li&gt;김대리는 소스코드를 pull하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;을 실행합니다.&lt;/li&gt;
  &lt;li&gt;의존성 트리가 박대리가 세팅한 환경과 동일하게 설치됩니다.&lt;/li&gt;
  &lt;li&gt;프로그램이 정상적으로 실행됩니다.&lt;/li&gt;
  &lt;li&gt;김대리는 정시 퇴근을 합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;실제로 앱에서 사용하고 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-router-flux&lt;/code&gt;를 예로 들어볼까요?&lt;br /&gt;
아래는 프로젝트에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm ls&lt;/code&gt;로 조회한 의존성 트리에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-router-flux&lt;/code&gt; 부분만 발췌한 부분입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├─┬ react-native-router-flux@4.0.0-beta.24
│ ├── lodash.isequal@4.5.0
│ ├── mobx@3.6.2
│ ├─┬ mobx-react@4.4.3
│ │ └── hoist-non-react-statics@2.5.0
│ ├── opencollective@1.0.3
│ ├── path-to-regexp@2.2.0
│ ├── prop-types@15.6.1]
│ └── react-navigation@1.0.0-beta.19
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pakcage.json&lt;/code&gt; 파일에 버전을 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;react-native-router-flux&quot;: &quot;4.0.0-beta.24&quot;&lt;/code&gt; 지정해도 
&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-router-flux&lt;/code&gt; 프로젝트 내부의 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 파일에 
&lt;code class=&quot;highlighter-rouge&quot;&gt;react-navigation&lt;/code&gt;이 &lt;strong&gt;Caret Range&lt;/strong&gt;로 선언되어 있기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;react-navigation&lt;/code&gt;의 버전은 
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;을 수행하는 시점에 따라서 달라집니다.&lt;br /&gt;
실제로 문제가 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;react-navigation&lt;/code&gt; 1.0.0-beta21 버전이 릴리즈 된 이후 앱 빌드가 실패해서 
&lt;a href=&quot;https://github.com/aksonov/react-native-router-flux/issues/2865&quot; target=&quot;_blank&quot;&gt;이슈&lt;/a&gt;가 되기도 했습니다.&lt;br /&gt;
결국 &lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-router-flux&lt;/code&gt; 개발자가 &lt;strong&gt;Caret Range를 제거하는 패치&lt;/strong&gt;를 했습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; 파일은 npm에 의해서 프로젝트의 &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;이 수정되는 경우 
생성되거나 업데이트되며 &lt;strong&gt;당시 의존성에 대한 정보를 모두 가지고 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;따라서 생성된 &lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; 파일은 소스 저장소에 커밋해야 합니다.&lt;br /&gt;
(반드시 커밋할 필요는 없지만 저장소에 커밋하는 것을 강력추천합니다.)&lt;/p&gt;

&lt;h3 id=&quot;요약&quot;&gt;요약&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package-lcok.json&lt;/code&gt; 파일은 의존성 트리에 대한 정보를 모두 가지고 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; 파일은 저장소에 꼭 같이 커밋해야 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; 파일은 &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; 없이 배포하는 경우 반드시 필요합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;troubleshooting&quot;&gt;TroubleShooting&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;아래 로그처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;integrity checksum failed&lt;/code&gt; 오류가 나는 경우&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm cache clean --force&lt;/code&gt; 실행&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WARN registry Unexpected warning &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;https://registry.npmjs.org/: Miscellaneous Warning EINTEGRITY: sha1-w39Yfwo4PHAZ6CESDow/WPDSJ3I&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; integrity checksum failed when using sha1: wanted sha1-w39Yfwo4PHAZ6CESDow/WPDSJ3I&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; but got sha512-EhmUQodKB0sdzPPrbIWbGqA5cQeTWxYrAgNeeT1rLZWtD3tbNTnphz8J4vkXI3cPgBNlXBjzEbzDzq0Nwi4f9A&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2896 bytes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 22 Jul 2020 06:38:00 +0900</pubDate>
        <link>http://localhost:4000/node/2020/07/22/node14.html</link>
        <guid isPermaLink="true">http://localhost:4000/node/2020/07/22/node14.html</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>package-lock.json</title>
        <description>&lt;h2 id=&quot;package-lockjson&quot;&gt;package-lock.json&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;개념상으로, &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;의 기준은 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;이고 결과는 &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; 폴더입니다.&lt;/li&gt;
  &lt;li&gt;이상적인 패키지 설치 과정은 특정 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 파일이 항상 동일한 &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; 폴더를 생성하는 것입니다.&lt;/li&gt;
  &lt;li&gt;이러한 설치 과정이 몇몇의 경우에는 의도된 대로 동작하지만, 꽤 많은 경우에 의도한 대로 동작하지 않습니다.&lt;br /&gt;
그 이유는 다음과 같습니다.
    &lt;ol&gt;
      &lt;li&gt;npm 버전이 다르거나 다른 종류의 패키지 매니저 사용 (다른 설치 알고리즘 사용)&lt;/li&gt;
      &lt;li&gt;이미 설치된 패키지의 새 버전이 출시된 경우. 즉, 이미 설치된 버전과 다른 버전을 사용하는 경우&lt;/li&gt;
      &lt;li&gt;특정 패키지에 의존하는 라이브러리 중 해당 라이브러리의 새 버전이 올라간 경우, 설치할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;^1.2.3&lt;/code&gt; 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;1.2.3&lt;/code&gt;처럼 의존 라이브러리의 버전을 명시해 주더라도 업데이트됨&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;package-lockjson-개념&quot;&gt;package-lock.json 개념&lt;/h3&gt;

&lt;p&gt;어떤 개발자가 A라는 package를 개발하고 있다고 가정합니다.&lt;br /&gt;
해당 package에서는 B라는 플러그인 디펜던시를 사용하고 있으며, B package에는 C package를 디펜던시로 가지고 있습니다.&lt;br /&gt;
각각의 package를 개발한 개발자는 다릅니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;package A
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;0.1.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;package B
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;0.1.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;package C
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 세개의 모듈이 레지스트리에서 A, B, C의 유일한 버전인 경우, &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install A&lt;/code&gt;를 하게되면, &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;의 트리는 다음과 같이 생성됩니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A@0.1.0
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; B@0.0.1
    &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; C@0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러나, package B의 버전이 0.0.2 버전으로 게시되면, &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install A&lt;/code&gt;는 다음과 같은 &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; 트리를 생성합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A@0.1.0
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; B@0.0.2
    &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; C@0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;새 버전이 B의 의존성을 수정하지 않는다고 가정합니다.&lt;br /&gt;
물론 &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;의 새 버전에는 새로운 버전의 &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;와 여러가지 새로운 패키지의 의존성이 포함될 수 있습니다.&lt;br /&gt;
&lt;strong&gt;그러한 의존성 변경에 문제가 발생하는 경우, &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;의 작성자는 &lt;code class=&quot;highlighter-rouge&quot;&gt;B@0.0.1&lt;/code&gt;에 대한 의존성을 지정할 수 있습니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;그러나, A와 B의 작성자가 동일한 사람이 아닌 경우 A의 작성자는 B가 전혀 변경되지 않은 경우 새로 게시된 버전의 C를 가져오지 않겠다고 
공표할 수 없게됩니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이와 같은 잠재적 문제를 방지하기 위해서 npm은 &lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm-shrinkwrap.json&lt;/code&gt;을 사용하도록 업데이트 되었습니다.&lt;br /&gt;
이러한 파일을 &lt;strong&gt;패키지 잠금&lt;/strong&gt; 또는 &lt;strong&gt;잠금 파일&lt;/strong&gt;이라고 명칭합니다.&lt;/p&gt;

&lt;p&gt;예를 들어, &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;을 할 경우 npm은 packge lock을 생성하고, 다음과 같은 &lt;code class=&quot;highlighter-rouge&quot;&gt;packge-lock.json&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm-shrinkwrap.json&lt;/code&gt;이 작성됩니다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...metadata&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;fields...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;resolved&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://registry.npmjs.org/B/-/B-0.0.1.tgz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;integrity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sha512-DeAdb33F+&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git://github.com/org/C.git#5c380ae319fc4efe9e7f2d9c78b0faa588fd99b4&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 파일은 항상 같은 &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; 트리를 생성합니다.&lt;br /&gt;
위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt;를 명시하게 되면, 패키지를 설치할때마다 의존성을 일일이 계산하는 것이 아니라 명시된 
버전을 바로 설치합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; 파일은 설치 동작을 다음과 같이 변경합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; 파일에 명시된 대로 ㅁ듈 트리(라이브러리 의존성 구조)가 생성됩니다.&lt;br /&gt;
니는 파일에 명시된 모듈이 존재하면 해당 파일을 사용하고, 존재하지 않는 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;version&lt;/code&gt;에 맞는 파일을 사용합니다.&lt;/li&gt;
  &lt;li&gt;누락된 의존성 라이브러리가 있으면 일반적인 방식으로 설치합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;preshrinkwrap&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;shrinkwrap&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;postshrinkwrap&lt;/code&gt;이 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 파일의 &lt;code class=&quot;highlighter-rouge&quot;&gt;scripts&lt;/code&gt; 속성에 있으면 순서대로 
실행됩니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;preshrinkwrap&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;shinktwrap&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;shrinkdwrap&lt;/code&gt; 전에 실행되고, &lt;code class=&quot;highlighter-rouge&quot;&gt;postshrinkwrap&lt;/code&gt;은 나중에 실행됩니다.&lt;/p&gt;

&lt;p&gt;그리고 이 스크립트는 &lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; 파일과 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm-shrinkwrap.json&lt;/code&gt; 파일을 대상으로 실행됩니다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;postshrinkwrap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;json -I -e &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;this.myMetadata = $MY_APP_METADATA&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;잠긴-패키지-사용하기&quot;&gt;잠긴 패키지 사용하기&lt;/h3&gt;

&lt;p&gt;잠긴 패키지와 잠기지 않은 패키지는 다음 맥락에서 크게 차이가 없습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;npm rm&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;npm update&lt;/code&gt; 등의 명령어로 &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; 폴더와 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;파일의 의존성을 
업데이트하면 자동으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; 파일을 업데이트한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;만약 업데이트를 막으려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;--no-save&lt;/code&gt; 옵션으로 모두 저장하지 않거나, &lt;code class=&quot;highlighter-rouge&quot;&gt;--no-shrinkwrap&lt;/code&gt; 옵션으로 
&lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; 파일과 &lt;code class=&quot;highlighter-rouge&quot;&gt;shrinkwrap.json&lt;/code&gt; 파일을 건드리지 않고 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 파일만 업데이트할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;package-lock-관련-case-study&quot;&gt;package-lock 관련 case study&lt;/h2&gt;

&lt;p&gt;프로젝트 소스 형상 관리 차원에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; 파일을 커밋하는 걸 권고합니다.&lt;br /&gt;
이렇게 하면 개발자, 배포, CI 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt; 명령어를 실행했을 때 항상 같은 의존성 구조를 가진 파일이 
설치됩니다.&lt;br /&gt;
또한 git에 &lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; 파일의 의존성이 관리되므로 변경사항이 있는 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt;로 편하게 변경 내용을 
확인할 수 있는 이점이 생깁니다.&lt;/p&gt;

&lt;p&gt;다수의 개발자가 참여하는 프로젝트에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt; 파일을 생성하지 말아야할 때가 있습니다.&lt;br /&gt;
이러한 경우 두 가지 방법으로 수정하는 방법이 존재했습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm config package-lock false&lt;/code&gt;를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock&lt;/code&gt;을 실행하지 못하도록 하거나, 
&lt;code class=&quot;highlighter-rouge&quot;&gt;npmrc&lt;/code&gt;에 해당 &lt;code class=&quot;highlighter-rouge&quot;&gt;property&lt;/code&gt;를 추가합니다.&lt;/li&gt;
  &lt;li&gt;git에 push를 할 때마다 &lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt;을 삭제합니다.&lt;br /&gt;
1번, 2번의 경우 소스 배포 관리자는 &lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt;을 갱신해서 git에 push하기 위해서는 
옵션을 수동으로 재설정해줘야 하는 번거로움이 있었습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이러한 이슈를 수정하기 위해서 package.json 파일내 script 속성 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt; 명령어에 
&lt;code class=&quot;highlighter-rouge&quot;&gt;no-package-lock&lt;/code&gt; 옵션을 추가하여 실행해줄 수 있도록 하여 이슈를 해결하였습니다.&lt;/p&gt;

</description>
        <pubDate>Mon, 20 Jul 2020 12:13:00 +0900</pubDate>
        <link>http://localhost:4000/node/2020/07/20/node13.html</link>
        <guid isPermaLink="true">http://localhost:4000/node/2020/07/20/node13.html</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>스크롤관련 UI 스크립트</title>
        <description>&lt;h2 id=&quot;스크롤관련-ui-스크립트&quot;&gt;스크롤관련 UI 스크립트&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kr.ncsoft.com/en/whoWeAre/nc21Moments.do&quot; target=&quot;_blank&quot;&gt;https://kr.ncsoft.com/en/whoWeAre/nc21Moments.do&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.pbsc.com/&quot; target=&quot;_blank&quot;&gt;https://www.pbsc.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 15 Jul 2020 17:41:00 +0900</pubDate>
        <link>http://localhost:4000/javascript/2020/07/15/javascript6.html</link>
        <guid isPermaLink="true">http://localhost:4000/javascript/2020/07/15/javascript6.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
  </channel>
</rss>
