<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LEE HYUNG JU</title>
    <description>Jekyll Blog</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 27 Nov 2020 18:37:23 +0900</pubDate>
    <lastBuildDate>Fri, 27 Nov 2020 18:37:23 +0900</lastBuildDate>
    <generator>Jekyll v4.0.1</generator>
    
      <item>
        <title>클릭 무한 슬라이드 인터렉션</title>
        <description>&lt;h2 id=&quot;클릭-무한-슬라이드-인터렉션&quot;&gt;클릭 무한 슬라이드 인터렉션&lt;/h2&gt;

&lt;p&gt;며칠전에 예전에 다니던 학원선생님의 부탁으로 신기한 인터렉션을 만들어봤습니다.&lt;br /&gt;
느낌만 따라한거라 똑같진 않습니다.&lt;br /&gt;
해당 페이지와 따라만들어본거 공유드립니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gogoro.com/smartscooter/s-performance/s2/cafe-racer/&quot; target=&quot;_blank&quot;&gt;링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 인터렉션 따라서 만들어본 페이지 : &lt;a href=&quot;https://hyungju-lee.github.io/hyungju-lee-interactions/scroll-interaction-5/tap-event3-ie10.html&quot; target=&quot;_blank&quot;&gt;https://hyungju-lee.github.io/hyungju-lee-interactions/scroll-interaction-5/tap-event3-ie10.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;위 사이트에서 canvas 태그로 만들어서 따라서 만들어봤습니다.&lt;br /&gt;
하지만 정확히 어떤 원리로 만든건진 모르겠습니다.
저는 &lt;code class=&quot;highlighter-rouge&quot;&gt;createElement&lt;/code&gt; 메소드로 가상의 &lt;code class=&quot;highlighter-rouge&quot;&gt;canvas&lt;/code&gt; 태그를 만들어 해당 &lt;code class=&quot;highlighter-rouge&quot;&gt;canvas&lt;/code&gt; 에 이미지들을 차례대로 그려 넣었고, 그 &lt;code class=&quot;highlighter-rouge&quot;&gt;canvas&lt;/code&gt; 의 그림을 전체 추출하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; 상에 있는 &lt;strong&gt;실제 canvas 태그에 그려넣었습니다. 이때 사용한 메소드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;getImageData&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;putImageData&lt;/code&gt; 입니다.&lt;/strong&gt;&lt;br /&gt;
CORS 정책에 의하여 로컬서버에서만 제대로 작동하는 메소드인 것 같습니다. (특히, 크롬은 CORS 정책이 더 엄격합니다.)&lt;/li&gt;
  &lt;li&gt;CORS 링크 : &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTTP/CORS&quot; target=&quot;_blank&quot;&gt;https://developer.mozilla.org/ko/docs/Web/HTTP/CORS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;CORS 란 간단하게 말해 서버에서 정보를 쉽게 빼내가지 못하도록 하는 일종의 정책같은 것입니다. 그래서 코드상 문제가 없어도 서버에서 통신을 끊어버리는? 그런 개념같습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;한계&lt;/strong&gt; : IE에선 새로고침할 때 이미지들의 &lt;code class=&quot;highlighter-rouge&quot;&gt;naturalWidth&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;naturalHeight&lt;/code&gt; 값을 제대로 못불러오는 버그가 있습니다. (다른 거 만들땐 안 이랬는데..) 그래서 일단 차선책으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; 함수를 사용했습니다. 해당 내용은 코드에 &lt;strong&gt;주석&lt;/strong&gt;으로 달아놨습니다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 27 Nov 2020 18:31:00 +0900</pubDate>
        <link>http://localhost:4000/js_interaction/2020/11/27/interaction.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_interaction/2020/11/27/interaction.html</guid>
        
        
        <category>js_interaction</category>
        
      </item>
    
      <item>
        <title>libSass, dart-sass (js버전, vm 버전)2</title>
        <description>&lt;h2 id=&quot;libsass-dart-sass-js버전-vm-버전2&quot;&gt;libSass, dart-sass (js버전, vm 버전)2&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://chipcullen.com/css-min-max-clamp-functions/&quot; target=&quot;_blank&quot;&gt;css스펙 min(), max(), clamp()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sass-lang.com/documentation/at-rules/use&quot; target=&quot;_blank&quot;&gt;dart-sass @use&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sass/sass/blob/master/accepted/module-system.md#timeline&quot; target=&quot;_blank&quot;&gt;https://github.com/sass/sass/blob/master/accepted/module-system.md#timeline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;min() / max() / clamp() 는 libsass나 dart-sass랑은 상관없고 그냥 CSS 스펙입니다.&lt;br /&gt;
그냥 해당 브라우저가 지원하는 함수인지 (calc()함수처럼) 아닌지 보고 사용해야되는 것입니다..&lt;/p&gt;

&lt;p&gt;@use 처럼 기능적으로 추가되는거만 살펴보면될거같습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;@use 는 javascript에서 import나 require 같은 기능을 하는건가봐요&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;dart-sass 사용하면 @use 로 네임스페이스 분류가 가능해져서 같은 이름의 믹스인도 파일이 다른데있으면 서로 충돌안나고 쉽게 관리가 가능해질거같아요.&lt;/p&gt;

&lt;p&gt;사스도 자바스크립트랑 똑같이 관리가능하도록 저렇게 만들었나보네요.&lt;br /&gt;
dart-sass 사용하면 파일관리도 더 편해질거같아요~!&lt;/p&gt;

&lt;p&gt;기존 사스 @import는 네임스페이스 분류없이 전역으로 영향끼쳐서 그런가봐요.&lt;br /&gt;
자바스크립트는 네임스페이스로 분류가되는데.&lt;br /&gt;
그래서 dart-sass에서 @use로 네임스페이스분류도 가능하게 하려고하나봐요&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;음 근데 dart-sass로 바꾸고 현재 @import로 불러와져있는거를 @use로 바꾼다고하면 @include로 믹스인함수 불러온거 다 수정해야될수도있겠네요..&lt;br /&gt;
dart-sass로 바꿔도 기존 @import로되어있는거 수정안하면 안해도되지만..&lt;br /&gt;
@import 구문을 @use로 바꾸면 @include로 불러와진 함수 다 수정해야될수도있을거같아요&lt;/p&gt;

&lt;p&gt;2022년까지만 @import 지원.. 여튼 바꿔야되는건 피할수없음&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;넵 지금저희가쓰는건 node-sass(libsass)이고 dart-sass는 2016년에 알파버전으로 나오고 2018년에 정식릴리즈된 사스같아요&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;근데 얼마전 10/26에 node-sass쓰지말라고 권고사항? 떠서 개발자들이 슬슬 갈아타는 중인가봐요&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Nov 2020 17:07:00 +0900</pubDate>
        <link>http://localhost:4000/node_module/2020/11/27/module.html</link>
        <guid isPermaLink="true">http://localhost:4000/node_module/2020/11/27/module.html</guid>
        
        
        <category>node_module</category>
        
      </item>
    
      <item>
        <title>10-4. Object 오브젝트(ES3 기준) / 빌트인 오브젝트 구조, prototype</title>
        <description>&lt;h2 id=&quot;10-4-object-오브젝트es3-기준--빌트인-오브젝트-구조-prototype&quot;&gt;10-4. Object 오브젝트(ES3 기준) / 빌트인 오브젝트 구조, prototype&lt;/h2&gt;

&lt;p&gt;빌트인 오브젝트 구조를 정리하는 차원에서 접근하도록 하겠습니다.&lt;br /&gt;
이 내용의 키워드는 &lt;strong&gt;구조&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;h2 id=&quot;빌트인-오브젝트-구조&quot;&gt;빌트인 오브젝트 구조&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;오브젝트 이름(Object, String, Number…)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;우선 오브젝트 이름이 필요합니다.&lt;br /&gt;
Object, String, Number.. 등이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;오브젝트.prototype&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;인스턴스 생성 가능 여부 기준&lt;/p&gt;

        &lt;p&gt;prototype이 있으면 인스턴스를 생성할 수 있고,&lt;br /&gt;
prototype이 없으면 인스턴스를 생성할 수 없습니다.&lt;/p&gt;

        &lt;p&gt;예를 들면 String, Number 오브젝트는 prototype이 있습니다.&lt;br /&gt;
하지만 수학 계산용 오브젝트인 &lt;code class=&quot;highlighter-rouge&quot;&gt;Math&lt;/code&gt; 오브젝트에는 &lt;strong&gt;prototype&lt;/strong&gt;이 없습니다.&lt;br /&gt;
따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Math&lt;/code&gt; 오브젝트는 인스턴스를 만들 수가 없습니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;프로퍼티를 연결하는 오브젝트&lt;/p&gt;

        &lt;p&gt;또한 prototype은 프로퍼티를 연결하는 오브젝트입니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;prototype에 아래처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;을 찍고 프로퍼티를 연결합니다.&lt;/strong&gt;&lt;br /&gt;
이것이 prototype의 기능입니다.&lt;/p&gt;

&lt;p&gt;prototype이 있으면 인스턴스를 생성할 수 있고 프로퍼티를 연결할 수 있습니다.&lt;br /&gt;
prototype이 없으면 인스턴스도 생성할 수 없고 프로퍼티도 연결할 수 없습니다.&lt;/p&gt;

&lt;p&gt;너무 심플하죠?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;오브젝트.prototype.constructor&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;오브젝트의 생성자&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 연산자로 호출할 때 오브잭트의 생성자 함수인 &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt;가 호출됩니다.&lt;br /&gt;
호출될 때 오브젝트.prototype.constructor가 호출되는 것입니다.&lt;br /&gt;
즉, constructor가 실질적으로 인스턴스를 새성하는 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;즉, prototype이 없으면 constructor는 존재하지 않죠?&lt;/strong&gt;&lt;br /&gt;
따라서 인스턴스를 생성할 수 없게 되는 겁니다.&lt;br /&gt;
그런데 prototype이 있으면 constructor는 default로 따라 붙습니다.&lt;/p&gt;

&lt;p&gt;즉, 이러한 특성 때문에 prototype 존재여부로 인스턴스 생성가능 여부를 알 수 있는 것입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;오브젝트.prototype.method&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;메소드 이름과 함수 작성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;그리고 위와같이 작성할 수 있습니다.&lt;br /&gt;
method 자리에 다수의 method를 작성할 수 있습니다.&lt;br /&gt;
그런데요, 제가 여기서 지금 &lt;strong&gt;메소드&lt;/strong&gt;라고 했습니다.&lt;br /&gt;
&lt;strong&gt;지금까지는 메소드란 말 한번도 안쓰고, 함수라는 말을 썼습니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;함수와 메서드의 차이에 대해서는 다음절에서 다루도록 하겠습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;오브젝트 구조&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;개발자 도구 열기(Ctrl + Shift + i)&lt;/li&gt;
  &lt;li&gt;브라우저 새로고침 실행 (F5)&lt;/li&gt;
  &lt;li&gt;debugger 위치에서 실행 멈춤&lt;/li&gt;
  &lt;li&gt;debugger 종료 (F8)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;03:00&lt;/p&gt;

&lt;hr /&gt;

</description>
        <pubDate>Thu, 26 Nov 2020 15:55:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/26/beginner8.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/26/beginner8.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>10-3. Object 오브젝트(ES3 기준) / Object 인스턴스 생성, 프리미티브 값 구하기</title>
        <description>&lt;h2 id=&quot;10-3-object-오브젝트es3-기준--object-인스턴스-생성-프리미티브-값-구하기&quot;&gt;10-3. Object 오브젝트(ES3 기준) / Object 인스턴스 생성, 프리미티브 값 구하기&lt;/h2&gt;

&lt;h2 id=&quot;new-object&quot;&gt;new Object()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;값opt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;생성한 인스턴스&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;인스턴스를 생성하여 반환&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파라미터의 데이터 타입에 따라&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;생성할 인스턴스 결정&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// number&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 223&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ol&gt;
          &lt;li&gt;new Number(123)로 생성한 인스턴스 타입은 object이며 프리미티 값은 123&lt;/li&gt;
        &lt;/ol&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// object&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 223&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ol&gt;
          &lt;li&gt;new Object(123)로 생성한 인스턴스의 타입도 object이고 프리미티 값은 123&lt;/li&gt;
          &lt;li&gt;2개 인스턴스 모두 100을 더할 수 있으며 값이 더해진다는 것은 Number 타입이라는 것&lt;/li&gt;
          &lt;li&gt;new Object()는 파라미터 값 타입이&lt;br /&gt;
Number 타입이면 Number 인스턴스를 생성하고&lt;br /&gt;
String 타입이면 String 인스턴스를 생성&lt;/li&gt;
        &lt;/ol&gt;

        &lt;hr /&gt;

        &lt;ul&gt;
          &lt;li&gt;빌트인 Object 오브젝트와 다른 빌트인 오브젝트와의 차이점&lt;/li&gt;
          &lt;li&gt;new Number()는 Number 타입 인스턴스 생성&lt;/li&gt;
          &lt;li&gt;new String()은 String 타입 인스턴스 생성&lt;/li&gt;
        &lt;/ul&gt;

        &lt;hr /&gt;

        &lt;p&gt;원래 Object는 { key: value } 형태의 프로퍼티입니다.&lt;br /&gt;
  그런데 newObj+100 이 223 출력.&lt;br /&gt;
  newObj 프리미티브 값으로 123이 설정되었고, 이것의 타입은 Number 타입이라는 겁니다.&lt;br /&gt;
  즉, newObj는 Number 인스턴스인 겁니다.&lt;br /&gt;
  이와같이 new Object()는 파라미터 값에 따라서 인스턴스가 결정됩니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;파라미터 값이 undefined, null이면&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;빈 Object 인스턴스 반환&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;new Object()처럼 파라미터를 작성하지 않으면 undefined를 작성한 것과 같으며 값을 갖지 않은 Object 인스턴스 생성&lt;br /&gt;
{}는 Object의 프리미티브 디폴트 값입니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;object&quot;&gt;Object()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;값opt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;생성한 인스턴스&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Object 인스턴스 생성 &lt;mark&gt;new 연산자를 사용하지 않은것 뿐, new 있을 때와 없을 때 파라미터에서만 좀 차이있는거같음 - 아니네, 그냥 똑같음 차이점없음&lt;/mark&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;파라미터는 { key(name) : value } 형태&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;JS책&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {name: &quot;JS책&quot;} &amp;lt;- 파라미터로 작성된 값이 인스턴스의 프리미티브 값이 됨&lt;/span&gt;
    
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emptyObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emptyObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;파라미터를 작성하지 않으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;new Object()&lt;/code&gt;와 같음&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;object-생성-방법&quot;&gt;Object 생성 방법&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;var abc = {};&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;var abc = Object() 와 같음&lt;/li&gt;
      &lt;li&gt;즉, var abc = {}을 실행하면&lt;br /&gt;
Object 인스턴스가 생성됨&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {name: &quot;value&quot;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;true가 출력된 것은 Object로 생성한 인스턴스라는 것을 뜻합니다.&lt;/li&gt;
    &lt;/ol&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {name: &quot;value&quot;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;true가 출력된 것은 Object로 생성한 인스턴스라는 것을 뜻합니다.&lt;/li&gt;
      &lt;li&gt;Object()와 Object 리터럴{} 모두 Object 인스턴스를 생성합니다.&lt;/li&gt;
      &lt;li&gt;&lt;mark&gt;그래서 Object()를 사용하지 않고 간단하게 {}를 사용합니다.&lt;/mark&gt;&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;그래서 보통 자바스크립트 개발자들은 {} 중괄호를 사용해서 빌트인 오브젝트 오브젝트 인스턴스를 만듭니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;{} 표기를&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;오브젝트 리터럴(Literal)이라고 부름&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;valueof&quot;&gt;valueOf()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;data&lt;/td&gt;
      &lt;td&gt;Object 인스턴스, 숫자&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;사용하지 않음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;프리미티브 값&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;data 위치에 작성한 Object 인스턴스의 프리미티브 값 반환&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {key:&quot;value&quot;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;obj에 프리미티브 값으로 설정된 값 반환&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 26 Nov 2020 12:26:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/26/beginner7.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/26/beginner7.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>10-2. Object 오브젝트(ES3 기준) / 프로퍼티 리스트</title>
        <description>&lt;h2 id=&quot;10-2-object-오브젝트es3-기준--프로퍼티-리스트&quot;&gt;10-2. Object 오브젝트(ES3 기준) / 프로퍼티 리스트&lt;/h2&gt;

&lt;p&gt;빌트인 Object 프로퍼티(ES3)&lt;br /&gt;
빌트인 Object 오브젝트라고 부르는 것이 맞지만 편의를 위해 빌트인 Object라고 부르겠습니다.&lt;/p&gt;

&lt;p&gt;빌트인 Object 강좌는 ES3와 ES5로 나뉘어져있습니다.&lt;br /&gt;
&lt;strong&gt;이 장은 ES3 기준입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;프로퍼티-리스트es3&quot;&gt;프로퍼티 리스트(ES3)&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;이름&lt;/th&gt;
      &lt;th&gt;개요&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;new Object()&lt;/td&gt;
      &lt;td&gt;파라미터 데이터 타입의 인스턴스 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Object()&lt;/td&gt;
      &lt;td&gt;Object 인스턴스 생성&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Object.prototype&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;이름&lt;/th&gt;
      &lt;th&gt;개요&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;constructor&lt;/td&gt;
      &lt;td&gt;생성자&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;valueOf()&lt;/td&gt;
      &lt;td&gt;프리미티브 값 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;hasOwnProperty()&lt;/td&gt;
      &lt;td&gt;프로퍼티 소유 여부 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;propertyIsEnumerable()&lt;/td&gt;
      &lt;td&gt;프로퍼티 열거 여부 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;isPrototypeOf()&lt;/td&gt;
      &lt;td&gt;prototype의 존재 여부 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;toString()&lt;/td&gt;
      &lt;td&gt;문자열로 변환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;toLocaleString()&lt;/td&gt;
      &lt;td&gt;지역화 문자열로 변환&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;new-object&quot;&gt;new Object()&lt;/h3&gt;
&lt;p&gt;Number와 String은 각 타입에 맞는 인스턴스를 만들게 되지만 new Object()는 파라미터 값 타입에 따라서 인스턴스를 만들기도 합니다.&lt;br /&gt;
예를들면, 파라미터 값의 타입이 Number이면 Number 인스턴스를 만들고, String이면 String 인스턴스를 만듭니다.&lt;/p&gt;

&lt;h3 id=&quot;object&quot;&gt;Object()&lt;/h3&gt;
&lt;p&gt;Object() 함수는 Object 인스턴스를 생성합니다.&lt;br /&gt;
다만, new 연산자를 사용하지 않은 것 뿐입니다.&lt;br /&gt;
Number() 함수와 String() 함수가 값의 타입(유형)을 변형하는 것에 비하면 차이가 많이 납니다.&lt;/p&gt;

&lt;h3 id=&quot;valueof&quot;&gt;valueOf()&lt;/h3&gt;
&lt;p&gt;프리미티브 값을 반환합니다.  &lt;br /&gt;
여기서 프리미티브 값이란 인스턴스에 설정된 값입니다.&lt;/p&gt;

&lt;h3 id=&quot;hasownproperty&quot;&gt;hasOwnProperty()&lt;/h3&gt;
&lt;p&gt;프로퍼티 소유 여부를 반환합니다.  &lt;br /&gt;
프로퍼티는 { key: value } 입니다.  &lt;br /&gt;
has는 ‘가지고있다’ 라는 뜻이고 자바스크립트에서 Own은 ‘내가 만든’이라는 뜻입니다.&lt;br /&gt;
내가 만든 프로퍼티는 수정 삭제가 가능하지만 원래 있던 프로퍼티는 수정 삭제가 불가능하다는 의미가 포함되어있습니다.&lt;/p&gt;

&lt;h3 id=&quot;propertyisenumerable&quot;&gt;propertyIsEnumerable()&lt;/h3&gt;
&lt;p&gt;프로퍼티 열거 여부입니다.&lt;br /&gt;
Enumerable 열거할 수 있는, 프로퍼티를 열거할 수 있느냐 라는 뜻입니다.&lt;/p&gt;

&lt;h3 id=&quot;isprototypeof&quot;&gt;isPrototypeOf()&lt;/h3&gt;
&lt;p&gt;프로토타입의 존재여부를 반환합니다.&lt;/p&gt;

&lt;h3 id=&quot;tolocalestring&quot;&gt;toLocaleString()&lt;/h3&gt;
&lt;p&gt;Number 오브젝트의 toLocaleString()은 숫자를 지역화 문자로 변형했습니다.&lt;br /&gt;
예를 들면 숫자를 한자로 표시했죠?&lt;br /&gt;
String 오브젝트에서 locale은 위치를 나타냈습니다.&lt;br /&gt;
전, 후, 그리고 같은 위치&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;여기서 ES3 기준, 빌트인 오브젝트 오브젝트의 특징이라고 한다면, 여섯개의 함수가 있죠?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. valueOf()
2. hasOwnProperty()
3. propertyIsEnumerable()
4. isPrototypeOf()
5. toString()
6. toLocaleString()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여섯개의 함수는 빌트인 오브젝트로 인스턴스를 만드는 오브젝트에 모두 포함됩니다.&lt;br /&gt;
인스턴스를 만들 수 없는 오브젝트엔 포함되지 않지만 인스턴스를 만드는 오브젝트엔 모두 포함됩니다.&lt;br /&gt;
이것이 ES3 기준에 빌트인 오브젝트 오브젝트의 특징입니다.&lt;br /&gt;
&lt;strong&gt;그래서 ES5와 ES3를 구분했습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;~~.&lt;strong&gt;proto&lt;/strong&gt;.&lt;strong&gt;proto&lt;/strong&gt; : &amp;lt;- 여기서 마지막 __proto__에 위 6가지 함수가 포함되는 것입니다.&lt;/p&gt;

&lt;p&gt;이것이 특징입니다.&lt;br /&gt;
이에 대해서는 계속해서 살펴보겠습니다.&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Nov 2020 12:15:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/26/beginner6.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/26/beginner6.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>10-1. Object 오브젝트(ES3 기준) / 자바스크립트 오브젝트 구분, 네이티브/호스트 오브젝트, 오브젝트와 인스턴스</title>
        <description>&lt;h2 id=&quot;10-1-object-오브젝트es3-기준--자바스크립트-오브젝트-구분-네이티브호스트-오브젝트-오브젝트와-인스턴스&quot;&gt;10-1. Object 오브젝트(ES3 기준) / 자바스크립트 오브젝트 구분, 네이티브/호스트 오브젝트, 오브젝트와 인스턴스&lt;/h2&gt;

&lt;p&gt;이번장은 빌트인 오브젝트 오브젝트입니다.&lt;br /&gt;
빌트인 오브젝트를 살펴보기 앞서 자바스크립트의 오브젝트를 살펴보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;자바스크립트-오브젝트&quot;&gt;자바스크립트 오브젝트&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;오브젝트 구분&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;빌트인 오브젝트(Built-in Object)&lt;/li&gt;
      &lt;li&gt;네이티브 오브젝트(Native Object)&lt;/li&gt;
      &lt;li&gt;호스트 오브젝트(Host Object)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;네이티브-오브젝트&quot;&gt;네이티브 오브젝트&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;빌트인 오브젝트&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;사전에 만들어 놓은 오브젝트&lt;/li&gt;
      &lt;li&gt;빌트인 Number 오브젝트,&lt;br /&gt;
빌트인 String 오브젝트,&lt;br /&gt;
…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;ES5 기준으로 11개의 빌트인 오브젝트가 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;네이티브 오브젝트&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;JS 스펙에서 정의한 오브젝트&lt;/li&gt;
      &lt;li&gt;여기에 빌트인 오브젝트 포함&lt;/li&gt;
      &lt;li&gt;&lt;mark&gt;JS 코드를 실행할 때 만드는 오브젝트&lt;/mark&gt;&lt;/li&gt;
      &lt;li&gt;&lt;mark&gt;예 : Argument 오브젝트&lt;/mark&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Argument 오브젝트는 함수가 호출되면 함수 안에서 만들고 함수를 빠져나오면 자바스크립트 엔진이 자동적으로 지웁니다.&lt;br /&gt;
  물론 이것도 빌트인 오브젝트이지만 사용성에서 약간 차이가 있죠?&lt;br /&gt;
  즉 자바스크립트 오브젝트는 빌트인 오브젝트가 네이티브 오브젝트에 속하므로 네이티브 오브젝트와 호스트 오브젝트로 나눌 수 있습니다.&lt;br /&gt;
  &lt;strong&gt;ES5 기준입니다.&lt;/strong&gt;&lt;br /&gt;
  &lt;strong&gt;ES6에선 보다 더 세밀하게 구분됩니다.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;호스트-오브젝트&quot;&gt;호스트 오브젝트&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;빌트인, 네이티브 오브젝트를 제외한 오브젝트&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;예: window, DOM 오브젝트&lt;br /&gt;
DOM 오브젝트 : Document Object Model&lt;br /&gt;
이 오브젝트는 우리가 마우스를 클릭했을 때 클릭한 것을 인식하는 기능을 제공해줍니다.&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nodeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// DIV&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ol&gt;
          &lt;li&gt;querySelector()는 DOM 함수&lt;/li&gt;
          &lt;li&gt;DOM에서 제공하는 오브젝트를 호스트(Host) 오브젝트라고 부릅니다.&lt;/li&gt;
          &lt;li&gt;마치 JS 함수처럼 DOM 함수를 사용&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;querySelector&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이 함수는 자바스크립트에서 제공하는 것이 아니라, 즉 자바스크립트 스펙에 작성된 함수가 아니라 DOM 스펙에 작성된 함수입니다.&lt;br /&gt;
그런데도 마치 자바스크립트 함수처럼 보이죠?&lt;br /&gt;
그리고 어떠한 처리도 하지않고 바로 사용할 수 있죠?&lt;/p&gt;

&lt;p&gt;여기서 이 함수의 구조를 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;document.querySelector()&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;이 있죠?&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;이 있으니깐 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 앞(document)은 오브젝트가되고 그 뒤엔 함수가 되겠네요.&lt;br /&gt;
이때 이러한 오브젝트를 호스트 오브젝트라고 부릅니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JS는 호스트 환경에서&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;브라우저의 모든 요소 기술을&lt;/li&gt;
      &lt;li&gt;연결하고 융합하며 이를 제어&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;즉, 자바스크립트는 이러한 호스트 오브젝트를 마치 자바스크립트처럼 사용할 수가 있습니다.&lt;br /&gt;
그리고 호스트 오브젝트는 자바스크립트에서 사용할 수 있는 형태로 만들어서 제공합니다.&lt;br /&gt;
이러한 환경을 &lt;strong&gt;호스트 환경&lt;/strong&gt;이라고 합니다.&lt;/p&gt;

&lt;p&gt;자바스크립트는 이러한 &lt;strong&gt;호스트 환경&lt;/strong&gt;에서 브라우저의 모든 요소기술을..(요소기술 = 호스트 오브젝트)&lt;br /&gt;
이러한 기술들을 연결하고 융합하며 이를 제어합니다.&lt;/p&gt;

&lt;p&gt;예를 들어 Dom Object Model 에서 이벤트를 인식하게 하려면 이벤트를 설정해야겠죠?&lt;br /&gt;
그것도 DOM에서 제공합니다.&lt;br /&gt;
하지만 그것을 자바스크립트 파일 안에 작성합니다.&lt;br /&gt;
마치 자바스크립트처럼요.&lt;/p&gt;

&lt;p&gt;그리고 클릭을 하게되면 클릭한 것을 인식해야겠죠?&lt;br /&gt;
그것도 DOM에서 제공합니다.&lt;br /&gt;
그러나 자바스크립트처럼 사용할 수 있는거죠.&lt;br /&gt;
클릭을 했으니 뭔가 처리를 해야겠죠?&lt;br /&gt;
그때 자바스크립트로 처리하는 거죠.&lt;br /&gt;
그에따라서 연결되는 처리가 있으면 또 연결하고 .. 이러한 호스트 환경에서 자바스크립트가 실행됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이 시점에서 이러한 것을 말씀드리는 이유.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;자바스크립트 개발자는 자바스크립트 하나만으로 끝나는 것이 아니다라는 거죠.&lt;br /&gt;
즉, 이런 호스트 환경의 호스트 오브젝트들을 하나씩하나씩 배워나가야 됩니다.&lt;br /&gt;
마우스 클릭을 인식하려면 DOM을 배워야됩니다.&lt;br /&gt;
그런데 브라우저의 요소 기술들은 매우 많습니다.&lt;br /&gt;
그리고 앞으로도 계속 나올거라는 거죠.&lt;br /&gt;
&lt;strong&gt;이것이 자바스크립트 개발자의 방향성입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이것을 말씀드리기 위해서 호스트 오브젝트 개념을 말씀드렸습니다.&lt;br /&gt;
자바스크립트 개발자는 자바스크립트에서 끝나는 것이 아니다.&lt;br /&gt;
계속해서 호스트 오브젝트라는 것을 배워야된다.&lt;/p&gt;

&lt;h2 id=&quot;오브젝트와-인스턴스&quot;&gt;오브젝트와 인스턴스&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;강좌에서는&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;오브젝트, 인스턴스를 구분&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/script/image210.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 26 Nov 2020 12:00:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/26/beginner5.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/26/beginner5.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>9-10. String 오브젝트 / Unicode 관련 함수</title>
        <description>&lt;h2 id=&quot;9-10-string-오브젝트--unicode-관련-함수&quot;&gt;9-10. String 오브젝트 / Unicode 관련 함수&lt;/h2&gt;

&lt;h2 id=&quot;charcodeat&quot;&gt;charCodeAt()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;data&lt;/td&gt;
      &lt;td&gt;반환 대상&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;반환 기준 인덱스(index)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;인덱스 번째 문자&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;인덱스번째의 문자를 &lt;mark&gt;유니코드의 코드 포인트 값으로 반환&lt;/mark&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인덱스가 문자열 길이보다 크면 NaN 반환&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1Aa가&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 49&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 65&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 97&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 44032&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;charCodeAt(12)에서 12번째가 없으며 NaN 반환&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fromcharcode&quot;&gt;fromCharCode()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;data&lt;/td&gt;
      &lt;td&gt;String 오브젝트&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;유니코드, 다수 작성 가능&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;변환한 문자&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;파라미터의 유니코드를 &lt;mark&gt;문자열로 변환하고 연결하여 반환&lt;/mark&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;작성하지 않으면 빈 문자열 반환&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;작성 방법&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;data 위치에 &lt;strong&gt;&lt;span style=&quot;coloer:red&quot;&gt;String 오브젝트&lt;/span&gt;&lt;/strong&gt; 작성&lt;br /&gt;
변환 대상 값을 작성하지 않음&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;String.fromCharCode() 형태&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromCharCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44032&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1Aa가&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;여태까지 값을 메소드(함수) 앞에다 붙였었습니다.&lt;br /&gt;
값.fromCharCode() 이런식으로..&lt;br /&gt;
그럼 값을 평가해 값이 String 데이터면 빌트인 String 오브젝트에서 인스턴스를 생성해 그 인스턴스에서 fromCharCode() 함수를 호출해 처리를 했었습니다.&lt;/p&gt;

        &lt;p&gt;그런데 위 식은 그런 형태가 아닙니다.&lt;br /&gt;
함수 앞에 String 오브젝트 이름을 작성했고 값을 파라미터에다 작성했습니다.&lt;br /&gt;
&lt;strong&gt;이 형태는 어떤 형태일까요?&lt;/strong&gt;&lt;/p&gt;

        &lt;p&gt;prototype이란게 있었죠?&lt;br /&gt;
인스턴스로 값을 복사할 때 prototype 오브젝트에 속한 프로퍼티들은 복사했지만, prototype과 같은 수준에 있는 프로퍼티들은 복사하지 않았습니다.&lt;br /&gt;
&lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;그 같은 수준에 있는 프로퍼티들은 원본에서 확인하라고 했었습니다.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

        &lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;바로 그 원본에 속한 것이 fromCharCode 함수입니다.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;따라서 원본의 fromCharCode 함수를 봐야되니깐 원래 있었던 빌트인 String 오브젝트를 앞에 명시한 것입니다.&lt;br /&gt;
그래야 원본에 있는 것이 불러와지겠죠.&lt;/p&gt;

&lt;p&gt;근데 그러면 fromCharCode 함수는 왜 이렇게 만들었냐는 것이죠.&lt;br /&gt;
왜 파라미터를 다른 함수와 똑같이 앞에 작성하게 만들지 않았냐는 것이죠.&lt;/p&gt;

&lt;p&gt;49, 65, 97, 44032를 앞에 작성하려면 배열을 사용해야됩니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44032&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromCharCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;그럼 위 코드는 빌트인 String 오브젝트에 속한 fromCharCode 함수를 부르는 것이 아니라 &lt;span style=&quot;color:red&quot;&gt;빌트인 Array 오브젝트에 있는 fromCharCode 함수를 부르게될 것&lt;/span&gt;입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;자바스크립트는 함수 앞에 작성된 데이터 타입에 따라 오브젝트를 불러오기 때문입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그래서 위와 같은 형태를 취한 겁니다.&lt;br /&gt;
파라미터에다가 다수를 작성할 수 있도록 원본에 함수를 작성한 것입니다.&lt;br /&gt;
일관성이 좀 없는 것처럼 보이지만 나름대로 어려움이 있었던 겁니다.&lt;br /&gt;
49, 65, 97, 44032를 함수 앞에 작성할 수 없는 어려움입니다.&lt;br /&gt;
그래서 원 오브젝트로 올려버린겁니다.&lt;br /&gt;
이건 어쩔 수 없죠.&lt;br /&gt;
&lt;strong&gt;자바스크립트 구조를 따르다보니까 어쩔 수 없는 겁니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;localecompare&quot;&gt;localeCompare()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;data&lt;/td&gt;
      &lt;td&gt;비교 대상&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;비교할 값&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;1(앞), 0(같음), -1(뒤)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;값을 비교하여 위치를 나타내는 값으로 반환&lt;/li&gt;
  &lt;li&gt;위치 값: 1(앞), 0(같음), -1(뒤)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Unicode 사전 순으로 비교&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;나&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localeCompare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;가&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localeCompare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;나&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localeCompare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;다&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;“가”가 “나”보다 앞에 있으므로 1 반환&lt;/li&gt;
      &lt;li&gt;비교 기준과 비교 대상이 모두 “나”이므로 0&lt;/li&gt;
      &lt;li&gt;“다”가 “나”보다 뒤에 있으므로 -1 반환&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 26 Nov 2020 11:44:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/26/beginner4.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/26/beginner4.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>9-9. String 오브젝트 / 정규표현식을 사용할 수 있는 함수</title>
        <description>&lt;h2 id=&quot;9-9-string-오브젝트--정규표현식을-사용할-수-있는-함수&quot;&gt;9-9. String 오브젝트 / 정규표현식을 사용할 수 있는 함수&lt;/h2&gt;

&lt;h2 id=&quot;match&quot;&gt;match()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;data&lt;/td&gt;
      &lt;td&gt;매치 대상&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;정규표현식, 문자열&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;[매치 결과]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;매치 결과를 배열로 반환&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;매치 대상에 정규 표현식의 패턴을 적용하여 매치하고 매치 결과를 반환&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Sports&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/s/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [s]&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;spo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ol&gt;
          &lt;li&gt;매치는 정규 표현식 용어&lt;/li&gt;
          &lt;li&gt;match(/s/)에서&lt;br /&gt;
/s/는 정규 표현식으로 소문자 s를 매치&lt;/li&gt;
          &lt;li&gt;“Sports” 끝에 s가 있으므로 매치되며 매치된 문자를 반환&lt;/li&gt;
          &lt;li&gt;match(“spo”)에서 spo가 있으나 대문자 S이므로 null 반환&lt;/li&gt;
        &lt;/ol&gt;

        &lt;p&gt;보통 없을땐 undefined 를 반환합니다.&lt;br /&gt;
  그런데 위 예제에선 null 을 반환했습니다.&lt;br /&gt;
  이는 뭔가 프로세스를 한거죠?&lt;br /&gt;
  &lt;strong&gt;undefined는 아직 존재하지 않는 느낌이지만 null은 뭔가 처리를 했는데 없다라는 뉘앙스입니다.&lt;/strong&gt;&lt;br /&gt;
  &lt;strong&gt;그런 측면에서 본다면 null이 undefined 보다 적절하다고 할 수 있겠습니다.&lt;/strong&gt;&lt;/p&gt;

        &lt;p&gt;정규 표현식 오브젝트가 별도로 있습니다.&lt;br /&gt;
  &lt;code class=&quot;highlighter-rouge&quot;&gt;RegExp&lt;/code&gt; 오브젝트인데, 빌트인 오브젝트입니다.&lt;br /&gt;
  String 오브젝트에는 RegExp 오브젝트를 처리할 수 있는 게 없죠. 기능이요.&lt;/p&gt;

        &lt;p&gt;그래서 위와 같이 value.match(“spo”) 라고 입력하면,
  RegExp에 exec 와 같은 함수가 있거든요?
  그 함수를 호출합니다.
  그러면서 “spo” 파라미터값을 넘겨줍니다.&lt;/p&gt;

        &lt;p&gt;그럼 RegExp 오브젝트에선 spo를 정규표현식으로 변환하겠죠?
  /spo/ 형태로 변환할겁니다.
  그 변환한 걸로 매치를 하게됩니다.
  그래서 위와 같이 null 값이 나오는 것입니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;문자열 작성 가능, 엔진이 정규 표현식으로 변환하여 매치&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;정규표현식&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;문자열을 패턴으로 매치&lt;/li&gt;
      &lt;li&gt;패턴(pattern) 형태 : ^, $, *, + 등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;match 함수 파라미터에 정규표현식을 사용할 수 있습니다.&lt;br /&gt;
정규표현식이란 문자열을 패턴으로 매치합니다.&lt;br /&gt;
즉 문자열이 대상입니다.&lt;br /&gt;
String 오브젝트에서 이것을 다룹니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;기호마다 기능이 있습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;^ (캐럿) : 첫문자와 일치&lt;/li&gt;
  &lt;li&gt;$ : 끝문자와 일치&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이런 기능을 문자열에 매치하는 것을 패턴이라고 합니다.&lt;/p&gt;

&lt;p&gt;일치가 하나의 개념이라고 한다면 매치는 다수의 개념이라고 할 수 있습니다.&lt;br /&gt;
&lt;strong&gt;그래서 매치 결과물은 배열로 반환됩니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;매치 대상에 정규 표현식의 패턴을 적용하여 매치하고 매치 결과를 반환합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;replace&quot;&gt;replace()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;data&lt;/td&gt;
      &lt;td&gt;치환 대상&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;첫번째 파라미터 : 정규표현식, 문자열 &lt;br /&gt; 두번째 파라미터 : 대체할 값, 함수&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;치환 결과&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;매치 결과를 파라미터에 작성한 값으로 대체하여 반환&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;mark&gt;두번째 파라미터에 함수를 작성하면 먼저 함수를 실행하고 함수에서 반환한 값으로 대체&lt;/mark&gt;&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;abcabc&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;바꿈&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 바꿈bcabc&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;바꿈&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 바꿈bcabc&lt;/span&gt;
    
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;함수&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수bcabc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;정규 표현식 &lt;code class=&quot;highlighter-rouge&quot;&gt;/a/&lt;/code&gt; 뒤에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt;를 작성할 수 있습니다.&lt;br /&gt;
  g는 global의 약칭입니다.&lt;br /&gt;
  &lt;code class=&quot;highlighter-rouge&quot;&gt;/a/g&lt;/code&gt;라고 입력하면 전체에서 a를 검색합니다.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;change()&lt;/code&gt; 표현식 먼저 평가 후 반환된 값으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;replace()&lt;/code&gt;함수 실행합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;search&quot;&gt;search()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;data&lt;/td&gt;
      &lt;td&gt;검색 대상&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;정규표현식, 문자열&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;매치된 인덱스&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;검색된 첫번째 인덱스 반환&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;매치되지 않으면 &lt;strong&gt;-1&lt;/strong&gt; 반환&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;indexOf()&lt;/code&gt;와 개념이 좀 비슷합니다.&lt;br /&gt;
&lt;mark&gt;그러나 indexOf()는 하나밖에 안됩니다.&lt;/mark&gt;&lt;br /&gt;
그러나 정규표현식은 다양한 조건을 작성할 수 있습니다.&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cbacba&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ol&gt;
          &lt;li&gt;매치된 첫번째 인덱스 반환&lt;/li&gt;
          &lt;li&gt;K가 없으므로 매치되지 않음&lt;br /&gt;
매치되지 않으면 -1 반환&lt;/li&gt;
        &lt;/ol&gt;

        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;indexOf()&lt;/code&gt;는 위에(&lt;code class=&quot;highlighter-rouge&quot;&gt;search(/a/)&lt;/code&gt;) 이거처럼 하나만 비교할 수 있습니다.&lt;/p&gt;

        &lt;p&gt;하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;search()&lt;/code&gt;에선 정규 표현식을 하게되면, 다른 조건들을 사용할 수 있습니다.&lt;br /&gt;
  a이면서 다음에 오는 문자가 c이면서…. 다음 문자는 아무 문자라도 상관없고…&lt;br /&gt;
  조건을 다양하게 할 수 있습니다.&lt;/p&gt;

        &lt;p&gt;패턴으로 이와 같은 것이 가능합니다.&lt;br /&gt;
  정규표현식은 이와 같이 복잡하게 사용할 수 있습니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;split&quot;&gt;split()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;data&lt;/td&gt;
      &lt;td&gt;분리 대상&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;첫번째 파라미터 : 분리자(정규표현식, 문자열) &lt;br /&gt; 두번째 파라미터 : 반환 수&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;결과&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;분리 대상을 분리자로 분리하여 &lt;strong&gt;배열로 반환&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;12_34_56&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [12, 34, 56]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;“_“를 분리자로 사용&lt;/li&gt;
      &lt;li&gt;“12&lt;em&gt;34_56”을 “&lt;/em&gt;“로 분리&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;분리자를 작성하지 않은 경우&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [1, 2, 3]&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [123]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;분리자에 빈 문자열을 작성하면 문자를 하나씩 분리하여 반환&lt;/li&gt;
      &lt;li&gt;분리자를 작성하지 않으면 분리 대상 전체를 하나의 배열로 반환&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;두번째 파라미터에 반환 수를 작성&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;12_34_56_78&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [12, 34, 56]&lt;/span&gt;
    
  &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [123]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;두 번째 파라미터에 숫자를 작성하면 앞에서부터 수만큼만 반환&lt;/li&gt;
      &lt;li&gt;분리자가 분리대상에 없으면 분리 대상 전체를 하나의 배열로 반환&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 26 Nov 2020 10:56:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/26/beginner3.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/26/beginner3.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>9-8. String 오브젝트 / 문자열 추출</title>
        <description>&lt;h2 id=&quot;9-8-string-오브젝트--문자열-추출&quot;&gt;9-8. String 오브젝트 / 문자열 추출&lt;/h2&gt;

&lt;h2 id=&quot;substring&quot;&gt;substring()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;data&lt;/td&gt;
      &lt;td&gt;변환 대상&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;첫번째 파라미터 : 시작 인덱스 &lt;br /&gt; 두번째 파라미터 : 끝 인덱스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;결과&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;파라미터의 시작 인덱스부터 &lt;strong&gt;끝 인덱스 &lt;mark&gt;직전&lt;/mark&gt;&lt;/strong&gt;까지 반환&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;01234567&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 234&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;2번 인덱스부터 5번 인덱스 직전까지 반환&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;두번째 파라미터를 작성하지 않으면 반환 대상의 끝까지 반환&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;01234567&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 567&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 01234567&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;첫번째 파라미터만 작성하면 첫번째 인덱스부터 끝까지 반환&lt;/li&gt;
      &lt;li&gt;파라미터를 모두 작성하지 않으면 전체 반환&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다양한 추출 조건 작성&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;01234567&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 567&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;두번째 파라미터 값이 전체 length 보다 크면 전체 문자열 length 사용&lt;/li&gt;
      &lt;li&gt;따라서 시작 인덱스부터 끝까지 반환&lt;/li&gt;
    &lt;/ol&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;01234567&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 01&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1234&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 01234&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;파라미터 값이 음수이면 0으로 간주&lt;br /&gt;
0번 인덱스부터 2번 인덱스 직전까지 반환&lt;/li&gt;
      &lt;li&gt;첫번째 파라미터 값이 두번째보다 크면 파라미터 값을 바꿔서 처리&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;value.substring(1, 5)&lt;/code&gt; 형태가 됨&lt;/li&gt;
      &lt;li&gt;NaN은 0으로 간주&lt;br /&gt;
첫번째 파라미터 값이 두번째보다 크므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;value.substring(0, 5)&lt;/code&gt; 형태가 됨&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;substr&quot;&gt;substr()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;data&lt;/td&gt;
      &lt;td&gt;변환 대상&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;첫번째 파라미터 : 시작 인덱스 &lt;br /&gt; 두번째 파라미터 : 반환할 문자 수&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;결과&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;파라미터의 시작 인덱스부터 지정한 문자 수를 반환&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;01234567&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 012&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;0번 인덱스부터 문자 3개를 반환&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;첫번째 파라미터&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;값이 음수이면 length에서 파라미터 값을 더해 시작 인덱스로 사용&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;01234567&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 567&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;처음 파라미터 값이 음수이면 length 에서 처음 파라미터 값을 더해 시작 인덱스로 사용합니다.&lt;/p&gt;

        &lt;p&gt;8 - 3 = 5&lt;/p&gt;

        &lt;p&gt;즉, value.substr(5, 3)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;두번째 파라미터를 작성하지 않으면 양수 무한대로 간주&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;01234567&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 4567&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 01234567&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;두번째 파라미터를 작성하지 않으면 양수 무한대, 즉 최대값이므로&lt;/li&gt;
      &lt;li&gt;첫번째 파라미터부터 전체 반환&lt;/li&gt;
      &lt;li&gt;첫번째 파라미터를 작성하지 않으면 0으로 간주&lt;br /&gt;
따라서 전체가 반환됩니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;slice&quot;&gt;slice()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;data&lt;/td&gt;
      &lt;td&gt;변환 대상&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;첫번째 파라미터 : 시작 인덱스 &lt;br /&gt; 두번째 파라미터 : 끝 인덱스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;결과&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;파라미터의 시작 인덱스부터 끝 인덱스 직전까지 반환&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;01234567&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 123&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0123&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;1번 인덱스부터 4번 인덱스 직전까지 반환&lt;/li&gt;
      &lt;li&gt;false, undefined, null, 빈문자열은 0으로 간주&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;첫번째 파라미터&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;값을 작성하지 않거나 NaN이면 0으로 간주&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;01234567&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 01234567&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 01234567&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ol&gt;
          &lt;li&gt;첫번째 파라미터가 NaN이면 0으로 간주&lt;/li&gt;
          &lt;li&gt;파라미터를 모두 작성하지 않으면 전체 반환&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;두번째 파라미터&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;작성하지 않으면 length 사용&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;01234567&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 567&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ol&gt;
          &lt;li&gt;두번째를 작성하지 않으면 length 사용&lt;/li&gt;
          &lt;li&gt;&lt;mark&gt;첫번째가 두번째보다 크거나 같으면 빈문자열&lt;/mark&gt;&lt;/li&gt;
        &lt;/ol&gt;

        &lt;p&gt;&lt;mark style=&quot;background-color:burlywood&quot;&gt;substring()은 첫번째가 두번째보다 크거나 같으면 첫번째, 두번째 서로 바꿔서 실행했는데 slice는 그렇지 않다.&lt;/mark&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;값이 음수이면 length에 더해 사용&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;01234567&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 45&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// value.slice(4, -2 + 8);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// value.slice(4, 6);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 45&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 345&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// value.slice(-5 + 8, -2 + 8);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// value.slice(3, 6);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 345&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// value.slice(6, 3);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// &quot;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;파라미터 값이 음수라면 length 를 더해 사용.&lt;br /&gt;
더한 값이 0보다 작으면 0을 사용&lt;/li&gt;
  &lt;li&gt;3개의 결과에 대한 논리를 설명하세요.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 26 Nov 2020 00:06:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/26/beginner2.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/26/beginner2.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>9-7. String 오브젝트 / 문자열 연결, 대소문자 변환</title>
        <description>&lt;h2 id=&quot;9-7-string-오브젝트--문자열-연결-대소문자-변환&quot;&gt;9-7. String 오브젝트 / 문자열 연결, 대소문자 변환&lt;/h2&gt;

&lt;h2 id=&quot;concat&quot;&gt;concat()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;data&lt;/td&gt;
      &lt;td&gt;연결 시작 값, String 인스턴스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;연결 대상 opt, 다수 작성 가능&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;연결한 결과&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;data 위치의 값에&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;파라미터 값을 작성한 순서로&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;연결하여 문자열로 반환&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sports&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;축구&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// sports축구11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;String 인스턴스를 작성하면&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;프리미티브 값을 연결&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ABC&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 123ABC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;인스턴스의 primitive 값을 가져와 concat 합니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tolowercase&quot;&gt;toLowerCase()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;data&lt;/td&gt;
      &lt;td&gt;변환 대상&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;사용하지 않음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;변환 결과&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;영문 대문자를 소문자로 변환&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;touppercase&quot;&gt;toUpperCase()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;data&lt;/td&gt;
      &lt;td&gt;변환 대상&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;사용하지 않음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;변환 결과&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;영문 소문자를 대문자로 변환&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ABCDE&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// abcde&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;abcde&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ABCDE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 26 Nov 2020 00:01:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/26/beginner.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/26/beginner.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
  </channel>
</rss>
