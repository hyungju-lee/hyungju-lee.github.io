<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LEE HYUNG JU</title>
    <description>Jekyll Blog</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 07 Jun 2020 19:09:46 +0900</pubDate>
    <lastBuildDate>Sun, 07 Jun 2020 19:09:46 +0900</lastBuildDate>
    <generator>Jekyll v4.0.1</generator>
    
      <item>
        <title>1.1.3 이벤트 기반</title>
        <description>&lt;h2 id=&quot;113-이벤트-기반&quot;&gt;1.1.3 이벤트 기반&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;이벤트 기반(event-driven)&lt;/strong&gt;이란 &lt;strong&gt;이벤트가 발생할 때&lt;/strong&gt; 미리 지정해둔 작업을 수행하는 방식을 의미합니다.&lt;br /&gt;
이벤트로는 클릭이나 네트워크 요청 등이 있을 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이벤트 기반 시스템에서는 특정 이벤트가 발생할 때 무엇을 할지 미리 등록해두어야 합니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;이것을 이벤트 리스너(event listener)에 콜백(callBack) 함수를 등록한다고 표현합니다.&lt;/strong&gt;&lt;br /&gt;
버튼을 누르면 경고 창을 띄우도록 설정하는 것을 예로 들어 보겠습니다.&lt;br /&gt;
클릭 이벤트 리스너에 경고 창을 띄우는 콜백 함수를 등록해두면 클릭 이벤트가 발생할 때마다 콜백 함수가 
실행돼 경고 창이 뜨는 것입니다.&lt;/p&gt;

&lt;p&gt;노드도 이벤트 기반 방식으로 동작하므로 이벤트가 발생하면 이벤트 리스너에 등록해둔 콜백 함수를 
호출합니다.&lt;/p&gt;

</description>
        <pubDate>Sun, 07 Jun 2020 13:47:00 +0900</pubDate>
        <link>http://localhost:4000/nodebook/2020/06/07/node03.html</link>
        <guid isPermaLink="true">http://localhost:4000/nodebook/2020/06/07/node03.html</guid>
        
        
        <category>nodebook</category>
        
      </item>
    
      <item>
        <title>1.1.2 자바스크립트 런타임</title>
        <description>&lt;h2 id=&quot;112-자바스크립트-런타임&quot;&gt;1.1.2 자바스크립트 런타임&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Node.js는 크롬 V8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임입니다.&lt;br /&gt;
Node.js는 이벤트 기반, 논블로킹 I/O 모델을 사용해 가볍고 효율적입니다.&lt;br /&gt;
Node.js의 패키지 생태계인 npm은 세계에서 가장 큰 오픈 소스 라이브러리 생태계이기도 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;노드는 자바스크립트 런타임입니다.&lt;br /&gt;
런타임은 특정 언어로 만든 프로그램들을 실행할 수 있는 환경을 뜻합니다.&lt;br /&gt;
따라서 노드는 자바스크립트 프로그램을 컴퓨터에서 실행할 수 있게 해줍니다.&lt;/p&gt;

&lt;p&gt;기존에는 자바스크립트 프로그램을 인터넷 브라우저(브라우저도 자바스크립트 런타임입니다) 위에서만 
실행할 수 있었습니다.&lt;br /&gt;
브라우저 외의 환경에서 자바스크립트를 실행하기 위한 여러 가지 시도가 있었으나, 
자바스크립트의 실행 속도 문제 때문에 모두 큰 호응을 얻지는 못했습니다.&lt;/p&gt;

&lt;p&gt;하지만 2008년 구글이 V8 엔진을 사용하여 크롬을 출시하자 이야기가 달라졌습니다.&lt;br /&gt;
당시 V8 엔진은 다른 자바스크립트 엔진과 달리 매우 빨랐고, 오픈 소스로 코드도 공개되었습니다.&lt;br /&gt;
속도 문제가 해결되자 라이언 달은 2009년 V8 엔진 기반의 노드 프로젝트를 시작했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/nodebook/image00.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;노드는 V8 오픈 소스 자바스크립트 엔진과 함께 libuv라는 라이브러리를 사용합니다.&lt;br /&gt;
V8과 libuv는 C와 C++로 구현되어있습니다.&lt;br /&gt;
여러분이 코딩한 자바스크립트 코드는 노드가 알아서 V8과 libuv에 연결해주므로 노드를 사용할 때
C와 C++은 몰라도 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;libuv 라이브러리는 노드의 특성인 이벤트 기반, 논블로킹 I/O 모델을 구현하고 있습니다.&lt;/strong&gt;&lt;br /&gt;
노드는 스스로를 이벤트 기반, 논블로킹 I/O 모델을 사용해 가볍고 효율적이라고 표현했습니다.&lt;br /&gt;
그럼 이 모델이 무엇인지, 그리고 장단점으로는 어떤 것들이 있는지 알아봅시다.&lt;/p&gt;

</description>
        <pubDate>Sun, 07 Jun 2020 13:39:00 +0900</pubDate>
        <link>http://localhost:4000/nodebook/2020/06/07/node02.html</link>
        <guid isPermaLink="true">http://localhost:4000/nodebook/2020/06/07/node02.html</guid>
        
        
        <category>nodebook</category>
        
      </item>
    
      <item>
        <title>1. 핵심 개념 이해하기 &amp; 서버</title>
        <description>&lt;h2 id=&quot;11-핵심-개념-이해하기&quot;&gt;1.1 핵심 개념 이해하기&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Node.js&lt;/strong&gt;는 크롬 V8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임입니다.&lt;br /&gt;
Node.js는 이벤트 기반, 논블로킹 I/O 모델을 사용해 가볍고 효율적입니다.&lt;br /&gt;
Node.js의 패키지 생태계인 npm은 세계에서 가장 큰 오픈 소스 라이브러리 생태계이기도 합니다.&lt;/p&gt;

&lt;h2 id=&quot;111-서버&quot;&gt;1.1.1 서버&lt;/h2&gt;

&lt;p&gt;노드를 통해 다양한 자바스크립트 애플리케이션을 실행할 수 있지만, 노드는 서버 애플리케이션을
실행하는 데 제일 많이 사용됩니다.&lt;/p&gt;

&lt;p&gt;그럼 서버란 무엇이며, 어떤 역할을 할까요?&lt;br /&gt;
서버는 네트워크를 통해 클라이언트에 정보나 서비스를 제공하는 컴퓨터 또는 프로그램을 말합니다.&lt;br /&gt;
클라이언트란 요청을 보내는 주체로, 브라우저일 수도 있고, 데스크톱 프로그램일 수도 있고, 
모바일 앱일 수도 있고, 다른 서버에 요청을 보내는 서버일 수도 있습니다.&lt;br /&gt;
여러분이 평소에 사용하는 웹 사이트나 앱을 생각해보세요.&lt;br /&gt;
웹 사이트의 화면(HTML)은 어디에서 가져올까요?&lt;br /&gt;
앱 설치 파일은 어디에서 내려받는 걸까요?&lt;/p&gt;

&lt;p&gt;예를 들어 XXX의 웹사이트를 방문한다고 생각해봅시다.&lt;br /&gt;
주소창에 XXX의 웹 사이트 주소를 입력(&lt;strong&gt;요청&lt;/strong&gt;)하면 브라우저는 그 주소에 해당하는 XXX의 컴퓨터
위치를 파악합니다.&lt;br /&gt;
그리고 그 컴퓨터에서 XXX의 웹 사이트 페이지를 받아와 요청자의 브라우저(클라이언트)에 띄워줍니다.(&lt;strong&gt;응답&lt;/strong&gt;)&lt;br /&gt;
&lt;strong&gt;이런 일을 하는 컴퓨터가 바로 서버입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;모바일 앱을 설치하는 경우를 생각해봅시다.&lt;br /&gt;
구글의 플레이 스토어나 애플의 앱스토어에서 원하는 앱을 골라서 설치 버튼을 누르면(&lt;strong&gt;요청&lt;/strong&gt;) 내려받기(&lt;strong&gt;응답&lt;/strong&gt;)가 시작됩니다.&lt;br /&gt;
앱 설치 파일은 이미 어딘가에 저장되어 있으므로 여러분이 그곳에서 데이터를 받아와 
모바일 기기에 설치할 수 있는 것입니다.&lt;br /&gt;
&lt;strong&gt;그 어딘가가 구글과 애플의 서버입니다.&lt;/strong&gt;&lt;br /&gt;
플레이 스토어와 앱스토어는 클라이언트 역할을 하는 것이고요.&lt;/p&gt;

&lt;p&gt;웹이나 앱을 사용할 때 여러분의 데이터(아이디, 비밀번호, 이메일 등)와 서비스의 데이터가 생성됩니다.&lt;br /&gt;
이 데이터를 어딘가에 저장하고, 그 어딘가에서 클라이언트로 데이터를 받아와야 합니다.&lt;br /&gt;
&lt;strong&gt;이곳이 바로 서버입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;서버라고 해서 요청에 대한 응답만 하는 것은 아닙니다.&lt;/span&gt;&lt;br /&gt;
다른 서버에 요청을 보낼 수도 있습니다.&lt;br /&gt;
&lt;strong&gt;이때는 요청을 보낸 서버가 클라이언트 역할을 합니다.&lt;/strong&gt;(&lt;strong&gt;상대적인 관점!!&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;정리하면 서버는 클라이언트의 요청에 대해 응답을 합니다.&lt;br /&gt;
응답으로 항상 YES를 해야 하는 것은 아니고, NO를 할 수도 있습니다.&lt;br /&gt;
여러분이 어떤 사이트로부터 차단 당했다면 그 사이트의 서버는 여러분의 요청에 매번 NO를 응답할 것입니다.&lt;/p&gt;

&lt;p&gt;노드는 자바스크립트 애플리케이션이 서버로서 기능하기 위한 도구를 제공하므로 서버 역할을 수행할 수 있습니다.&lt;br /&gt;
다른 언어를 사용하지 않고 왜 굳이 노드를 사용해 서버를 만드는지 의문이 들 수도 있습니다.&lt;br /&gt;
궁금증을 해결하려면 먼저 노드의 특성에 대해 알아야 합니다.&lt;br /&gt;
공식 사이트에 게시된 노드 소개글을 바탕으로 노드의 특성에 대해 알아봅시다.&lt;/p&gt;

</description>
        <pubDate>Sun, 07 Jun 2020 13:27:00 +0900</pubDate>
        <link>http://localhost:4000/nodebook/2020/06/07/node01.html</link>
        <guid isPermaLink="true">http://localhost:4000/nodebook/2020/06/07/node01.html</guid>
        
        
        <category>nodebook</category>
        
      </item>
    
      <item>
        <title>22.6 요약</title>
        <description>&lt;h2 id=&quot;226-요약&quot;&gt;22.6 요약&lt;/h2&gt;

&lt;p&gt;자바스크립트 개발자로 향하는 여정을 시작한 걸 환영합니다!&lt;br /&gt;
이 책의 내용 일부는 무척 어려웠을 수도 있지만, 이해하려고 노력한 만큼 자바스크립트의 기초를 
확고히 다질 수 있습니다.&lt;br /&gt;
어려운 부분이 많더라도 좌절할 필요는 없습니다.&lt;br /&gt;
자바스크립트는 복잡하고 강력한 언어이며 며칠 만에 배우는 건 불가능합니다.&lt;br /&gt;
1년 정도의 시간은 누구에게나 필요할 겁니다.&lt;br /&gt;
프로그래밍이 처음이라면 나중에 이 책을 다시 한번 읽어보길 권합니다.&lt;br /&gt;
처음에는 이해하지 못했던 부분에서 새로운 영감을 얻을 수 있을 겁니다.&lt;/p&gt;

&lt;p&gt;ES6와 함께 자바스크립트 개발에 새로운 물결이 밀려오고 있습니다.&lt;br /&gt;
전에는 볼 수 없었던 멋지고 기발한 아이디어도 그 물결과 함께 밀려오고 있습니다.&lt;br /&gt;
읽을 수 있는 것은 모두 읽고, 이야기를 나눌 수 있는 자바스크립트 프로그래머 모두와 이야기를 나누고, 
접하는 모든 것에서 배우십시오.&lt;br /&gt;
자바스크립트 개발 커뮤니티에는 깊은 지식과 톡톡 튀는 아이디어를 가진 사람이 정말 많습니다.&lt;br /&gt;
필자는 이 책을 읽은 여러분도 그런 사람이 되길 진심으로 바랍니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Jun 2020 12:44:00 +0900</pubDate>
        <link>http://localhost:4000/lj/2020/06/06/javascript310.html</link>
        <guid isPermaLink="true">http://localhost:4000/lj/2020/06/06/javascript310.html</guid>
        
        
        <category>lj</category>
        
      </item>
    
      <item>
        <title>22.5 오픈 소스 프로젝트에 참가하기</title>
        <description>&lt;h2 id=&quot;225-오픈-소스-프로젝트에-참가하기&quot;&gt;22.5 오픈 소스 프로젝트에 참가하기&lt;/h2&gt;

&lt;p&gt;오픈 소스 프로젝트에 참가해 보는 것도 아주 좋은 방법입니다.&lt;br /&gt;
머리를 싸매고 도전할 만한 과제를 풀다 보면 개발 능력이 늘어나는 것은 물론이고, 커뮤니티에서 
당신의 코드를 검증받으면서 더 나은 프로그래머가 될 수 있습니다.&lt;br /&gt;
이력서에 쓸 것이 늘어나는 것도 좋은 점이죠.&lt;/p&gt;

&lt;p&gt;초보자라면 우선 문서화에 참가해보는 것도 좋습니다.&lt;br /&gt;
문서화에 돌릴 여력이 없어 고전하는 오픈 소스 프로젝트가 많습니다.&lt;br /&gt;
초보자에게 딱 알맞은 일감이죠.&lt;br /&gt;
당신이 무언가를 배우고 이해하면, 다른 초보자의 눈높이에서 설명하기가 쉬울 겁니다.&lt;/p&gt;

&lt;p&gt;오픈 소스 커뮤니티가 낯설고 벅차게 느껴질 수도 있겠지만, 끈기를 가지고 다른 사람의 건설적 비평에도 
귀를 기울이는 열린 마음을 보인다면 어느덧 모두들 당신을 환영할 겁니다.&lt;br /&gt;
스콧한셀만(Scot Hanselman)의 블로그 포스트 ‘Bringing Kindness Back to Open Source(&lt;a href=&quot;https://goo.gl/csCc41&quot; target=&quot;_blank&quot;&gt;https://goo.gl/csCc41&lt;/a&gt;)’를 
읽어보십시오.&lt;br /&gt;
이 포스트에서는 프로그래머와 오픈 소스 프로젝트를 연결하는 웹사이느 ‘Up for Grabs’(&lt;a href=&quot;http://up-for-grabs.net/&quot; target=&quot;_blank&quot;&gt;http://up-for-grabs.net/&lt;/a&gt;)를 소개하고 있습니다.&lt;br /&gt;
사이트에 방문해서 자바스크립트 태그로 검색해 보십시오.&lt;br /&gt;
도움을 원하는 오픈 소스 프로젝트를 여럿 만날 수 있을 겁니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Jun 2020 12:39:00 +0900</pubDate>
        <link>http://localhost:4000/lj/2020/06/06/javascript309.html</link>
        <guid isPermaLink="true">http://localhost:4000/lj/2020/06/06/javascript309.html</guid>
        
        
        <category>lj</category>
        
      </item>
    
      <item>
        <title>22.4 스택 오버플로</title>
        <description>&lt;h2 id=&quot;224-스택-오버플로&quot;&gt;22.4 스택 오버플로&lt;/h2&gt;

&lt;p&gt;스택 오버플로에서 필요한 답을 찾은 경험이 이미 있을 겁니다.&lt;br /&gt;
스택 오버플로는 2008년 등장하자마자 온라인 질문과 답변 사이트를 평정했습니다.&lt;br /&gt;
자바스크립트는 물론이고 이 책에서 언급한 다른 기술에 대해서도 의문이 생긴다면 스택 오버플로에서
답을 찾을 수 있습니다.&lt;br /&gt;
스택 오버플로는 커뮤니티에서 관리하며 &lt;strong&gt;명성을 통해 운영되는 사이트&lt;/strong&gt;입니다.&lt;br /&gt;
스택 오버플로가 훌륭하게 유지되는 비밀은 바로 이 &lt;strong&gt;‘명성’ 모델&lt;/strong&gt;에 있다고 해도 과언이 아닙니다.&lt;br /&gt;
사용자는 자신의 질문이나 답변이 &lt;strong&gt;‘추천’&lt;/strong&gt;을 받거나, 답변이 채택될 때마다 &lt;strong&gt;명성을 얻습니다.&lt;/strong&gt;&lt;br /&gt;
물론 명성이 전혀 없어도 질문할 수 있고, 사이트에 등록하는 것도 무료입니다.&lt;br /&gt;
무작정 질문하기보다는 요령 있게 질문을 해야 답변을 받을 확률이 높아집니다.&lt;br /&gt;
이 섹션에서는 스택 오버플로에 질문하는 요령에 대해 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;명성은 스택 오버플로의 화폐라고 할 수 있습니다.&lt;br /&gt;
대가 없이 당신을 기꺼이 도와줄 사람도 많이 있지만, 좋은 답변을 통해 명성을 얻는다는 것도 강력한 
동기 부여 수단이 됩니다.&lt;br /&gt;
스택 오버플로에는 정말 똑똑한 사람들이 많이 드나들고, 그들은 첫 번째로 가장 좋은 정확한 답을 올리기 위해 
경쟁합니다(다행히, 엉뚱한 답을 빨리 달기만 하는 사람에게는 강력한 불이익이 가해집니다).&lt;br /&gt;
다음을 잘 읽고 지키면 스택 오버플로에서 원하는 답을 얻을 가능성이 커집니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;로마에선 로마법에 따라야 합니다.&lt;/strong&gt;&lt;br /&gt;
SO 투어를 읽어보고, 좋은 질문을 올리는 요령에 관한 글도 읽어보십시오.&lt;br /&gt;
원한다면 도움말 문서를 모두 읽는 것도 괜찮습니다.&lt;br /&gt;
도움말 문서를 다 읽으면 캐릭터를 장식할 배지도 줍니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;이미 답이 있는 질문을 다시 올리지 마십시오.&lt;/strong&gt;&lt;br /&gt;
누군가 스택 오버플로에서 쉽게 답을 찾을 수 있는 질문을 올리면, 그 질문은 곧 중복으로 분류되어 닫힙니다. &lt;br /&gt;
그리고 중복된 질문을 비추천하는 사람들도 많이 있는데, 비추천을 받으면 명성에도 좋지 않은 영향이 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;코드를 대신 작성해달라고 하지 마십시오.&lt;/strong&gt;&lt;br /&gt;
무턱대고 ‘이거 어떻게 해요?’하는 식의 질문을 올리면 곧 비추천을 받고 질문이 닫히게 됩니다.&lt;br /&gt;
스택 오버플로에서는 당신이 질문하기 전에 스스로 해결하기 위해 노력하길 원합니다.&lt;br /&gt;
질문할 때는 어떤 시도를 해봤는지, 왜 그게 안됐는지 설명해야 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;한 번에 질문 하나만 하십시오.&lt;/strong&gt;&lt;br /&gt;
필자는 스택 오버플로에 답변을 많이 하는 편이지만, 서너 페이지에 달하는 코드를 들이미는 질문은 
읽지도 않고 넘어가곤 합니다(때로는 그보다 더 긴 코드를 볼 때도 있습니다).&lt;br /&gt;
5000 행짜리 파일을 질문란에 붙여넣고 답변을 바란다는 건 아무래도 상식적이지 않습니다(그런데도 이렇게 하는 사람이 정말 많습니다).&lt;br /&gt;
상식적이지도 않고, 무책임하고, 답변도 없습니다.&lt;br /&gt;
무턱대고 들이밀지 말고, 코드를 읽어보면서 ‘여기는 문제가 없어’하는 부분을 잘라내는 시도부터 해보십시오.&lt;br /&gt;
그러다 보면 질문하기도 전에 문제가 해결될 때가 많습니다.&lt;br /&gt;
이런 소거법을 연습하다 보면 디버깅 요령도 늘어나고, 사고력이 좋아지고, 스택 오버플로에서 환영받는 사용자가 됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;마크다운을 익히십시오.&lt;/strong&gt;&lt;br /&gt;
스택 오버플로에서는 마크다운(Markdown)을 통해 질문과 답을 작성합니다.&lt;br /&gt;
질문이 보기 좋게 잘 정리되어 있으면 그만큼 답을 얻을 확률도 올라갑니다.&lt;br /&gt;
마크다운은 스택 오버플로 외에도 많이 사용되고 점점 더 인기를 얻고 있으니, 시간을 내서 마크다운을 익히길 권합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;답변을 채택하고 추천하십시오.&lt;/strong&gt;&lt;br /&gt;
누군가가 당신의 질문에 만족스러운 답을 올렸다면 그 답변을 채택하고 추천하십시오.&lt;br /&gt;
답을 올린 사람은 그를 통해 명성을 얻고, 명성은 스택 오버플로가 유지되는 원동력입니다.&lt;br /&gt;
여러 사람이 괜찮은 답을 제시했다면, 그중 최고라고 생각되는 것을 골라서 채택하십시오.&lt;br /&gt;
추천은 모든 답에 다 할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;자문자답이라도 상관없습니다. 먼저 알아냈다면, 답을 다십시오.&lt;/strong&gt;&lt;br /&gt;
스택 오버플로는 커뮤니티입니다.&lt;br /&gt;
당신이 뭔가 질문할 것이 생겼다면, 다른 사람이 똑같은 질문을 할 확률도 잇습니다.&lt;br /&gt;
스스로 알아냈다면 당신의 질문에 답을 달아도 됩니다.&lt;br /&gt;
누군가가 그 답을 보고 도움을 받을 수 있을 겁니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;다른 사람을 돕기를 즐긴다면 질문에 답변을 달아 보십시오.&lt;br /&gt;
다른 사람의 질문에 대답하는 것은 유쾌한 일이고, 명성도 얻을 수 있습니다.&lt;br /&gt;
질문을 올렸는데 이틀이 지나도 유용한 답이 올라오지 않으면, 당신의 명성을 걸고 답을 현상수배 할 수 있습니다.&lt;br /&gt;
현상금으로 건 명성은 계정에서 즉시 빠져나가고 취소할 수 없습니다.&lt;br /&gt;
누군가가 당신의 질문에 만족스러운 답을 올려서 당신이 그 답변을 채택한다면 현상금으로 건 명성을 그 사람이 가져가게 됩니다.&lt;br /&gt;
당연한 일이지만, 현상수배를 하려면 우선 명성이 있어야 합니다.&lt;br /&gt;
최소한의 현상금은 명성 50입니다.&lt;br /&gt;
좋은 질문을 올려도 명성을 얻을 수 있지만, 좋은 답을 올리면 더 빨리 명성을 얻을 수 있습니다.&lt;/p&gt;

&lt;p&gt;다른 사람들의 질문에 대답하다 보면 자신도 배울 것이 많습니다.&lt;br /&gt;
필자 역시, 필자가 올린 질문에 대한 답을 볼 때보다, 오히려 다른 사람에게 대답하면서 더많은 것을 배운다고 느낄 때가 많습니다.&lt;br /&gt;
어떤 기술을 정말로 마스터하고 싶다면, 우선 기초를 배운 다음 스택 오버플로에서 다른 사람과 답변 경쟁을 해 보십시오.&lt;br /&gt;
처음에는 전문가들에게 연전연패 하겠지만, 머지않아 당신 스스로가 전문가 반열에 올라 있다고 느끼게 될 겁니다.&lt;/p&gt;

&lt;p&gt;마지막으로, 명성은 꼭 스택 오버플로 안에서만 쓰인느 것은 아닙니다.&lt;br /&gt;
명성이 높다면 이력서에 적어 보십시오.&lt;br /&gt;
최소한 필자는 이력서에 명성을 적어서 성공한 케이스에 속합니다.&lt;br /&gt;
그리고 이제 필자는 다른 개발자의 면접을 보곤 하는데, 명성이 높은 지원자에게는 항상 좋은 인상을 
받습니다(개인적으로는 3000이 넘으면 좋다고 보고, 1만 이상이라면 아주 훌륭하다고 판답합니다).&lt;br /&gt;
&lt;strong&gt;명성이 높다는 것은, 그가 자신의 분야에서 경쟁력 있는 사람임은 물론, 소통에 능하고 다른 사람을 
돕는 좋은 마음가짐을 가졌다는 증거입니다.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Jun 2020 12:23:00 +0900</pubDate>
        <link>http://localhost:4000/lj/2020/06/06/javascript308.html</link>
        <guid isPermaLink="true">http://localhost:4000/lj/2020/06/06/javascript308.html</guid>
        
        
        <category>lj</category>
        
      </item>
    
      <item>
        <title>22.3 블로그와 가이드</title>
        <description>&lt;h2 id=&quot;223-블로그와-가이드&quot;&gt;22.3 블로그와 가이드&lt;/h2&gt;

&lt;p&gt;훌륭한 블로그를 자주 방문하면 자바스크립트 개발의 최신 동향을 쉽게 접할 수 있습니다.&lt;br /&gt;
필자는 다음 블로그를 읽으며 무릎을 칠 때가 많았습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;악셀 아우슈마이어의 블로그(&lt;a href=&quot;http://www.2ality.com/&quot; target=&quot;_blank&quot;&gt;http://www.2ality.com/&lt;/a&gt;)에는 
ES6와 관련 기술에 관한 훌륭한 글이 가득합니다.&lt;br /&gt;
라우슈마이어는 컴퓨터 공학의 관점에서 자바스크립트에 접근하기는 하지만, 그의 글은 읽기 쉽고 친숙합니다.&lt;br /&gt;
컴퓨터 공학을 전공한 사람은 다른 사람의 글에서는 찾아보기 힘든 상세한 설명을 발견할 수 있을 겁니다.&lt;/li&gt;
  &lt;li&gt;놀란 로손(Nolan Lawson)의 블로그(&lt;a href=&quot;http://nolanlawson.com/&quot; target=&quot;_blank&quot;&gt;http://nolanlawson.com/&lt;/a&gt;)에는 
실제 자바스크립트 개발에 관해 대단히 상세한 글이 많습니다.&lt;br /&gt;
그 중에서도 ‘We Have a Problem with Promises’(&lt;a href=&quot;http://bit.ly/problem-promises&quot; target=&quot;_blank&quot;&gt;http://bit.ly/problem-promises&lt;/a&gt;)는 
꼭 읽어 볼 만한 글입니다.&lt;/li&gt;
  &lt;li&gt;데이빗 왈시(David Walsh)의 블로그(&lt;a href=&quot;https://davidwalsh.name/&quot; target=&quot;_blank&quot;&gt;https://davidwalsh.name/&lt;/a&gt;)에는 
자바스크립트 개발 및 관련 기술에 관한 멋진 글이 가득합니다.&lt;br /&gt;
14장을 읽으면서 잘 이해가 되지 않아 고생했다면 데이빗의 ‘The Basics of ES6 Generators’(&lt;a href=&quot;https://davidwalsh.name/es6-generators&quot; target=&quot;_blank&quot;&gt;https://davidwalsh.name/es6-generators&lt;/a&gt;)를 
꼭 읽어보십시오.&lt;/li&gt;
  &lt;li&gt;@Kangax의 블로그 ‘Perfection Kills’(&lt;a href=&quot;http://perfectionkills.com/&quot; target=&quot;_blank&quot;&gt;http://perfectionkills.com/&lt;/a&gt;)에는 
훌륭한 가이드와 연습문제, 퀴즈 등이 많이 있습니다.&lt;br /&gt;
초보자든 전문가든 그의 블로그에서 얻을 수 있는 것이 많을 겁니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 책을 다 읽었으니 온라인 강좌나 가이드는 매우 쉽게 느껴질 겁니다.&lt;br /&gt;
하지만 아직 뭔가 기본적인 것을 놓친 기분이 들거나, 기초를 더 확실히 연습하고 싶다면 다음을 추천하고 싶습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://bit.ly/lynda_js_training&quot; target=&quot;_blank&quot;&gt;Lynda.com의 자바스크립트 가이드&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://teamtreehouse.com/learn/javascript&quot; target=&quot;_blank&quot;&gt;트리하우스의 자바스크립트 강좌&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codecademy.com/learn/javascript&quot; target=&quot;_blank&quot;&gt;코드아카데미의 자바스크립트 강좌&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bit.ly/ms_js_intro&quot; target=&quot;_blank&quot;&gt;마이크로소프트 버추얼 아카데미의 자바스크립트 초급 강좌&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;윈도우에서 자바스크립트를 개발하고 있다면 마이크로소프트 버추얼 아카데미 강좌를 읽고 
&lt;strong&gt;자바스크립트 개발에 비쥬얼 스튜디오를 사용하는 법을 익히길 권합니다.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Jun 2020 12:09:00 +0900</pubDate>
        <link>http://localhost:4000/lj/2020/06/06/javascript307.html</link>
        <guid isPermaLink="true">http://localhost:4000/lj/2020/06/06/javascript307.html</guid>
        
        
        <category>lj</category>
        
      </item>
    
      <item>
        <title>22.2 주기적 발행물</title>
        <description>&lt;h2 id=&quot;222-주기적-발행물&quot;&gt;22.2 주기적 발행물&lt;/h2&gt;

&lt;p&gt;다음 세 가지는 반드시 구독하고 매주 의무적으로 읽어야 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JavaScript Weekly (&lt;a href=&quot;http://javascriptweekly.com/&quot; target=&quot;_blank&quot;&gt;http://javascriptweekly.com/&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Node Weekly (&lt;a href=&quot;http://nodeweekly.com/&quot; target=&quot;_blank&quot;&gt;http://nodeweekly.com/&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;HTML5 Weekly (&lt;a href=&quot;http://html5weekly.com&quot; target=&quot;_blank&quot;&gt;http://html5weekly.com&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이들을 읽으면 최신 뉴스와 서비스, 블로그, 가이드에 관한 소식을 접할 수 있습니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Jun 2020 12:06:00 +0900</pubDate>
        <link>http://localhost:4000/lj/2020/06/06/javascript306.html</link>
        <guid isPermaLink="true">http://localhost:4000/lj/2020/06/06/javascript306.html</guid>
        
        
        <category>lj</category>
        
      </item>
    
      <item>
        <title>22.1 온라인 문서</title>
        <description>&lt;h2 id=&quot;221-온라인-문서&quot;&gt;22.1 온라인 문서&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;자바스크립트, CSS, HTML에 관한 문서는 모질라 개발자 네트워크(MDN)가 최고입니다.&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
필자는 자바스크립트 문서가 필요할 때는 MDN에서 직접 검색하거나 검색어 앞에 mdn을 붙이곤 합니다.&lt;br /&gt;
그렇지 않으면 w3school이 반드시 검색 결과에 나타날 테니까요.&lt;br /&gt;
누가 w3schools의 SEO를 관리하는지는 알 수 없지만, 그는 천재가 분명합니다.&lt;br /&gt;
&lt;strong&gt;하지만 w3school의 문서는 읽지 마십시오.&lt;/strong&gt;&lt;br /&gt;
심각하게 함량 미달인 문서를 많이 봤습니다.&lt;/p&gt;

&lt;p&gt;MDN도 좋은 HTML 문서지만, HTML5가 처음이라면(처음이 아니더라도) 마크 필그림(Mark Pilgrim)의 
‘Dive Into HTML5’는 읽어볼 만합니다.&lt;br /&gt;
&lt;strong&gt;WHATWG&lt;/strong&gt;의 ‘살아있는 표준’ HTML5 명세도 훌륭한 문서입니다.&lt;br /&gt;
필자는 HTML에 관해 답을 찾기 어려운 의문이 있을 때마다 &lt;strong&gt;WHATWG&lt;/strong&gt;의 문서를 찾아보곤 합니다.&lt;br /&gt;
마지막으로, HTML과 CSS의 공식 명세는 &lt;strong&gt;W3C 웹사이트&lt;/strong&gt;에 있습니다.&lt;br /&gt;
이들은 무미건조하고 읽기 어려운 문서긴 하지만, 정말 어려운 문제가 생겼을 때 답을 찾을 수 있는 유일한 곳이기도 
합니다.&lt;/p&gt;

&lt;p&gt;ES6는 ECMA-262 ECMAScript 2015 언어 명세를 따릅니다.&lt;br /&gt;
&lt;strong&gt;노드와 브라우저에서 지원하는 ES6 기능은 &lt;span style=&quot;color:red&quot;&gt;@kangax의 가이드&lt;/span&gt;를 보십시오.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;제이쿼리와 부트스트랩의 온라인 문서는 모두 대단히 좋습니다.&lt;/p&gt;

&lt;p&gt;공식 노드 문서는 가장 정확하고 상세한 문서이며 첫 번째 선택 문서 &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fs&lt;/code&gt; 같은 노드 모듈에 
대해 알아볼 때 첫 번째 기준으로 삼아야 합니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; 문서도 상세하고 유용합니다.&lt;br /&gt;
특히 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 파일에 관한 페이지는 읽어볼 만합니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Jun 2020 11:59:00 +0900</pubDate>
        <link>http://localhost:4000/lj/2020/06/06/javascript305.html</link>
        <guid isPermaLink="true">http://localhost:4000/lj/2020/06/06/javascript305.html</guid>
        
        
        <category>lj</category>
        
      </item>
    
      <item>
        <title>22. 추가 자원</title>
        <description>&lt;h2 id=&quot;22-추가-자원&quot;&gt;22. 추가 자원&lt;/h2&gt;

&lt;p&gt;자바스크립트가 표현적이고 강력한 언어라는 사실을 깨달은 지는 좀 오래됐지만, 이 책을 쓰면서 그 사실을 
다시 한번 실감했습니다.&lt;br /&gt;
자바스크립트는 가볍게 볼 언어도 아니고, 초보자용이라고 치부할 언어도 아닙니다.&lt;br /&gt;
이 책을 다 읽었으니 독자 여러분도 그 사실을 잘 알게 됐을 겁니다.&lt;/p&gt;

&lt;p&gt;이 책의 목표는 자바스크립트의 모든 기능을 남김없이 설명하는 것도 아니고, 중요한 프로그래밍 테크닉을 
모두 설명하는 것도 아닙니다.&lt;br /&gt;
자바스크립트를 주요 언어로 택했다면 그 길은 이제 막 시작했을 뿐입니다.&lt;br /&gt;
전문가가 될 수 있는 튼튼한 기초를 쌓는 데 도움이 될 수 있기를 바랍니다.&lt;/p&gt;

&lt;p&gt;이 장에서 소개하는 자료 중 상당수는 필자가 처음으로 쓴 책 ‘한 권으로 끝내는 Node &amp;amp; Expres(한빛미디어, 2015)’에서 
가져왔습니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Jun 2020 11:57:00 +0900</pubDate>
        <link>http://localhost:4000/lj/2020/06/06/javascript304.html</link>
        <guid isPermaLink="true">http://localhost:4000/lj/2020/06/06/javascript304.html</guid>
        
        
        <category>lj</category>
        
      </item>
    
  </channel>
</rss>
