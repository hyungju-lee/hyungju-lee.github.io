<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LEE HYUNG JU</title>
    <description>Jekyll Blog</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 01 Dec 2020 17:44:48 +0900</pubDate>
    <lastBuildDate>Tue, 01 Dec 2020 17:44:48 +0900</lastBuildDate>
    <generator>Jekyll v4.0.1</generator>
    
      <item>
        <title>ejs locals 변수</title>
        <description>&lt;h2 id=&quot;ejs-locals-변수&quot;&gt;ejs locals 변수&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/ejs/image00.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 변수명을 안 정해서 넘겨도 {}를 &lt;code class=&quot;highlighter-rouge&quot;&gt;locals&lt;/code&gt;라는 이름으로 받아들입니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ejs&quot;&gt;&amp;lt;% console.log(locals) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위 코드로 테스트해보시면 됩니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;locals&lt;/code&gt;라는 변수로 어디에서도 넘긴것이 없는데 그렇게 받아옵니다.&lt;br /&gt;
이걸 활용하면 많은 것을 할 수 있을 것 같습니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Dec 2020 17:41:00 +0900</pubDate>
        <link>http://localhost:4000/ejs/2020/12/01/ejs.html</link>
        <guid isPermaLink="true">http://localhost:4000/ejs/2020/12/01/ejs.html</guid>
        
        
        <category>ejs</category>
        
      </item>
    
      <item>
        <title>dart-sass migration 관련 / sass-migrator</title>
        <description>&lt;h2 id=&quot;dart-sass-migration-관련--sass-migrator&quot;&gt;dart-sass migration 관련 / sass-migrator&lt;/h2&gt;

&lt;h2 id=&quot;libsass에서-dartsass로-migration-하는-방법&quot;&gt;libSass에서 dartSass로 migration 하는 방법&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sass-lang.com/documentation/cli/migrator#migrations&quot; target=&quot;_blank&quot;&gt;참고 사이트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; sass-migrator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;sass-migrator&lt;/code&gt; 모듈을 설치해줍니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;-g&lt;/code&gt; 플래그를 사용해 전역적으로 설치해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/module/issue25.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 위와 같이 scss 파일들을 import 해주는 -&amp;gt; 즉, dependencies 를 가지고 있는 파일을 migration 해주면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sass-migrator module &lt;span class=&quot;nt&quot;&gt;--verbose&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--migrate-deps&lt;/span&gt; src/scss/id-bank.scss
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 명령어를 입력해주면 &lt;code class=&quot;highlighter-rouge&quot;&gt;id-bank.scss&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;@import&lt;/code&gt; 되어있는 파일들의 &lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt;를 알아서 파악해 전부 &lt;strong&gt;migration&lt;/strong&gt; 해줍니다.&lt;/p&gt;

&lt;h2 id=&quot;옵션-설명&quot;&gt;옵션 설명&lt;/h2&gt;

&lt;p&gt;위에서 사용한 옵션은 두가지입니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://sass-lang.com/documentation/cli/migrator#migrate-deps&quot; target=&quot;_blank&quot;&gt;https://sass-lang.com/documentation/cli/migrator#migrate-deps&lt;/a&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;--migrate-deps&lt;/code&gt; 플래그(약어 &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt;)는 명령 줄에 명시적으로 전달 된 스타일 시트뿐만 아니라 &lt;code class=&quot;highlighter-rouge&quot;&gt;@use&lt;/code&gt;규칙 , &lt;code class=&quot;highlighter-rouge&quot;&gt;@forward&lt;/code&gt;규칙 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@import&lt;/code&gt;규칙 을 사용하여 의존(&lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt;)하는 스타일 시트도 변경하도록 합니다 .&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://sass-lang.com/documentation/cli/migrator#verbose&quot; target=&quot;_blank&quot;&gt;https://sass-lang.com/documentation/cli/migrator#verbose&lt;/a&gt;&lt;br /&gt;
이 플래그(축약 형 &lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt;)는 마이그레이션 자에게 추가 정보를 콘솔에 인쇄하도록 지시합니다.&lt;br /&gt;
아래와 같이 migration 한 파일들을 콘솔창에 출력합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/module/issue26.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;주의할-점&quot;&gt;주의할 점&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;dartSass는 Compile 할 때 glob 문법 컴파일을 지원하지 않습니다.&lt;/li&gt;
  &lt;li&gt;libSass는 Compile할 때 glob 문법 컴파일을 지원했습니다. (&lt;code class=&quot;highlighter-rouge&quot;&gt;@import&lt;/code&gt; 구문한정)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;즉, 아래처럼 코드를 수정한 후에 &lt;strong&gt;migration&lt;/strong&gt;을 진행해야됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/module/issue27.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;부가설명&quot;&gt;부가설명&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://sass-lang.com/documentation/cli/migrator#migrations&quot; target=&quot;_blank&quot;&gt;https://sass-lang.com/documentation/cli/migrator#migrations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;마이그레이션은 현재 하나의 마이그레이션 만 지원하지만 Sass 언어가 계속 발전함에 따라 더 많은 마이그레이션이 제공 될 것으로 예상합니다!&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Dec 2020 14:11:00 +0900</pubDate>
        <link>http://localhost:4000/node_module/2020/12/01/module2.html</link>
        <guid isPermaLink="true">http://localhost:4000/node_module/2020/12/01/module2.html</guid>
        
        
        <category>node_module</category>
        
      </item>
    
      <item>
        <title>dart-sass migration 관련 / glob 및 @use 구문</title>
        <description>&lt;h2 id=&quot;dart-sass-migration-관련--glob-및-use-구문&quot;&gt;dart-sass migration 관련 / glob 및 @use 구문&lt;/h2&gt;

&lt;p&gt;dart sass는 현재 libSass와 다르게 glob 문법을 컴파일할 때 지원하지 않습니다.&lt;br /&gt;
&lt;strong&gt;(생각해보니 지원 안하는게 맞는 것 같습니다. 할 필요가 없는 것 같습니다.)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codekitapp.com/help/sass/&quot; target=&quot;_blank&quot;&gt;참고 사이트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/module/issue24.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;그리고 @use 문법 매커니즘으로 정리하면 glob 문법은 사용 안하는게 맞는 것 같습니다.&lt;br /&gt;
그 이유는 전역적으로 관리되는게 아니라 지역적으로 관리되는 것이기 때문입니다.&lt;br /&gt;
gulpfile.js ← 현재 이런식으로 관리되고 있는 것을 모듈화해서 gulpfile.js 폴더로 관리한다고 생각하시면 될 것 같습니다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;즉, 이렇기 때문에 한가지 큰 문제가 있습니다.
현재는 변수, 믹스인들이 여러 파일에 산발적으로 들어가있습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;a.scss&lt;/code&gt; 파일에 변수, 믹스인, 스타일 정의가 있고&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;b.scss&lt;/code&gt; 파일에 변수, 믹스인, 스타일 정의가  있고&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;a.scss&lt;/code&gt; 파일에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;b.scss&lt;/code&gt; 파일의 변수, 믹스인을 가져다쓰고,&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;b.scss&lt;/code&gt; 파일에서도 &lt;code class=&quot;highlighter-rouge&quot;&gt;a.scss&lt;/code&gt; 파일의 변수, 믹스인을 가져다 쓰고 있습니다.&lt;br /&gt;
이렇게되면 지역화해서 네임스페이스로 분류하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@use&lt;/code&gt; 구문에선 에러가 생깁니다.&lt;/p&gt;

    &lt;p&gt;debendencies 를 기록하는 scss파일에 다음과같이 작성한다고 가정합시다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@use&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a.scss&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그럼 a파일을 불러옵니다.&lt;br /&gt;
그런데 a파일엔 다음과 같이 작성되어 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@use&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b.scss&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mixinAFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그럼 b 파일을 불러옵니다.&lt;br /&gt;
그런데 b 파일엔 다음과 같이 작성되어 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@use&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a.scss&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;otherFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그럼 다시 a 파일을 불러옵니다.&lt;br /&gt;
&lt;strong&gt;이렇게되면 a파일은 이미 로드한 파일이라고 에러메시지가 뜹니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/module/issue28.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;즉, 현재처럼 각 파일마다 믹스인 / 변수 / 스타일시트 이렇게 들어가있는 형태는 안됩니다.&lt;/p&gt;

&lt;p&gt;변수와 믹스인 함수들만 정의되어있는 파일과 스타일시트만 정의되어있는 파일을 정확히 구분해야 &lt;code class=&quot;highlighter-rouge&quot;&gt;@use&lt;/code&gt; 구문을 사용할 수 있을 것 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sass-lang.com/documentation/at-rules/use&quot; target=&quot;_blank&quot;&gt;참고 사이트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 사이트에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;@use&lt;/code&gt; 구문 설명을 보면&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;@use 규칙은 다른 Sass 스타일 시트에서 믹스인, 함수 및 변수를 로드하고 여러 스타일 시트의 CSS를 함께 결합합니다.&lt;br /&gt;
@use에 의해로드 된 스타일 시트를 “모듈”이라고합니다.&lt;br /&gt;
Sass는 또한 유용한 기능으로 가득 찬 내장 모듈을 제공합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;라고 되어있습니다.&lt;/p&gt;

&lt;h2 id=&quot;use-문법으로-변경-후-예상-파일-구조&quot;&gt;@use 문법으로 변경 후 예상 파일 구조&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/module/issue29.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;@use 문법으로 변경하면 위와 같이 파일들이 수정될 것입니다.&lt;/p&gt;

&lt;p&gt;@import 구문으로 했을 땐 @import를 컴파일되는 scss 파일에 전부 기재했지만,&lt;br /&gt;
@use 구문은 각 파일별로 필요한 것들을 @use로 불러다 쓰는 방식이므로&lt;br /&gt;
컴파일 되는 scss에 전부 기재할 필요가 없게 됩니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Dec 2020 14:04:00 +0900</pubDate>
        <link>http://localhost:4000/node_module/2020/12/01/module.html</link>
        <guid isPermaLink="true">http://localhost:4000/node_module/2020/12/01/module.html</guid>
        
        
        <category>node_module</category>
        
      </item>
    
      <item>
        <title>13-3. Array 오브젝트(ES3 기준) / Array 인스턴스 생성, length 프로퍼티</title>
        <description>&lt;h2 id=&quot;13-3-array-오브젝트es3-기준--array-인스턴스-생성-length-프로퍼티&quot;&gt;13-3. Array 오브젝트(ES3 기준) / Array 인스턴스 생성, length 프로퍼티&lt;/h2&gt;

&lt;h2 id=&quot;new-array&quot;&gt;new Array()&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Array 인스턴스 생성, 반환&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;배열 생성 기준 (Array 인스턴스 또는 Array 오브젝트 생성 기준입니다.)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;mark&gt;파라미터에 따라 배열 생성 기준이 다름&lt;/mark&gt;&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;파라미터를 작성하지 않으면 빈 배열&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// object&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ol&gt;
          &lt;li&gt;new Array()로 생성한 인스턴스 타입은 object&lt;/li&gt;
          &lt;li&gt;length는 배열의 엘리먼트 수를 나타내며 엘리먼트가 없으므로 0 출력&lt;/li&gt;
        &lt;/ol&gt;

        &lt;p&gt;&lt;strong&gt;typeof에서 object가 나오면 인스턴스라는 의미입니다.&lt;/strong&gt;&lt;br /&gt;
  여기서 length는 String 오브젝트에서 length가 문자의 수를 의미하듯 여기선 배열의 엘리먼트 수를 의미합니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;작성한 순서로 엘리먼트에 설정&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [10, 20]&lt;/span&gt;
        
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;two&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [[30, 40]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ol&gt;
          &lt;li&gt;값을 콤마로 구분하여 다수 작성&lt;br /&gt;
작성한 순서대로 엘리먼트 값으로 설정&lt;/li&gt;
          &lt;li&gt;배열로 작성하면 1차원을 더한 차원이 됩니다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;new Array(3)처럼 파라미터에 숫자를 작성하면 3개의 엘리먼트 생성&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [undefined, undefined, undefined]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ol&gt;
          &lt;li&gt;숫자 하나를 작성하면 엘리먼트 수가 되어 3개의 엘리먼트를 가진 배열이 됩니다.&lt;/li&gt;
          &lt;li&gt;엘리먼트에는 undefined가 설정됩니다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;new-array3&quot;&gt;new Array(3)&lt;/h2&gt;

&lt;p&gt;이렇게 배열을 만드는 이유가 뭘까?&lt;/p&gt;

&lt;p&gt;예시 시나리오를 생각해봅시다.&lt;br /&gt;
맨 처음에 배열의 엘리먼트를 하나도 작성하지 않았습니다.&lt;br /&gt;
그리고 몇개의 코드를 처리한 다음에 1, 2, 3을 넣었습니다.&lt;br /&gt;
그럼 배열의 값이 1,2,3으로 변하겠죠.&lt;/p&gt;

&lt;p&gt;그런데 우리가 시스템적인 측면에서 생각을 해봅시다.&lt;br /&gt;
배열을 만들면 메모리 어딘가에 저장이 되겠죠?&lt;br /&gt;
그것의 이름을 위 코드에선 &lt;code class=&quot;highlighter-rouge&quot;&gt;var obj&lt;/code&gt;로 했던 겁니다.&lt;br /&gt;
그렇겠죠?&lt;br /&gt;
왜냐하면 우리가 메모리의 &lt;code class=&quot;highlighter-rouge&quot;&gt;address&lt;/code&gt;를 알 수 없으니깐 &lt;strong&gt;우리는 그 메모리 주소를 obj로 사용하는 거죠.&lt;/strong&gt;&lt;br /&gt;
그런데 처음엔 엘리먼트가 없었죠.&lt;/p&gt;

&lt;p&gt;그리고나서 그 다음 코드를 실행하게되면 그 뒤에 엘리먼트를 넣는다구요.&lt;br /&gt;
그럼 이 메모리 주소가 100번이라고 했을 때, 다음에 붙인 것들이 예를 들어 1000번까지 붙였다고 칩시다.&lt;br /&gt;
그 다음에 1, 2, 3을 넣으면 메모리 주소가 1001번부터라고 가정을 하겠습니다.&lt;br /&gt;
앞의 배열과 연결된 뭔가를 알고 있어야 for문을 돌렸을 때 순서대로 읽을 수 있겠죠?&lt;/p&gt;

&lt;p&gt;이러한 것들이 chain 개념으로 계속 연결되어있다면, 처리할 때 &lt;strong&gt;부담&lt;/strong&gt;이 됩니다.&lt;br /&gt;
하나로 쫙 만들어져 있으면 통째로 읽으면 되는데, 산발적으로 물건이 흩어져있다고 하면, 쫓아다니면서 다 거둬와야될거아니에요.&lt;br /&gt;
바로 그런 개념입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;new Array(3)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;바로 위 개념이 그겁니다.&lt;br /&gt;
처음에 비록 내용이 하나도 없다고 하더라도 자리를 미리 잡아놓는 것입니다.&lt;br /&gt;
&lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;3을 넣었다는 것은 엘리먼트를 3개 안에서 사용하겠다는 의도가 강한거죠.&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
그러나&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;new Array(10, 20)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이것은 앞으로 어떻게될지 모른다라는 뉘앙스가 담겨있죠.&lt;br /&gt;
왜냐하면 앞으로 어떻게될지 알고 있다면&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;new Array(3)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이렇게 작성하고 값을 인덱스를 활용해 집어넣으면 산발적으로 여기저기 퍼져있는 그런 모습은 안되잖아요.&lt;br /&gt;
컴퓨터를 처음에 만들 때는 &lt;strong&gt;이러한 것들이 굉장히 부담&lt;/strong&gt;이 됐습니다.&lt;br /&gt;
왜냐면 그때는 컴퓨터 사양도 안좋고 프로그램 처리 속도도 빠르지 않았고 그래서 자릿수를 먼저 잡아놓는 그런 개념의 이론이 나왔던 거죠.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이렇게 배열의 자릿수를 먼저 잡아놓고 그리고 거기다 값을 집어넣는, 그런 언어들도 있습니다.&lt;/strong&gt;&lt;br /&gt;
그러니까 이거는 속도가 굉장히 빠르죠.&lt;br /&gt;
비록 엘리먼트를 100개를 만들어놓고 그 중에서 10개만 쓴다고 하더라도 다음에 추가되더라도 100개 안에서는 시스템에 영향을 미치지 않습니다.&lt;br /&gt;
자리를 이미 미리 잡아놨으니까요.&lt;br /&gt;
그런 개념이 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;new Array(3)&lt;/code&gt; 입니다.&lt;/p&gt;

&lt;p&gt;그런데 최근엔 컴퓨터 사양도 좋고요, 특히 브라우저나 모바일은 혼자서 쓰잖아요?&lt;br /&gt;
그래서 지금은 이런 개념에 크게 구애를 받지 않아도 되요.&lt;br /&gt;
&lt;strong&gt;자바스크립트는 사용자적인 측면에서 접근을 한 것이죠.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;바로 new Array(10,20) 이거죠.&lt;br /&gt;
이런 개념인거죠.&lt;br /&gt;
이렇게 만들고 나중에 필요할 때마다 넣으면, 비록 메모리에 산발적으로 저장이 되더라도 시스템 사양이 좋으니까 이런거에 대해서 부담을 안갖는다라는 거죠.&lt;/p&gt;

&lt;p&gt;ES6에 가면 &lt;strong&gt;typedArray&lt;/strong&gt;라는 것이 있습니다.&lt;br /&gt;
그것은 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;new Array(3)&lt;/code&gt;과 같은 개념을 적용&lt;/strong&gt;했습니다.&lt;br /&gt;
new Array(10, 20) 개념이 없습니다.&lt;/p&gt;

&lt;h2 id=&quot;array&quot;&gt;Array()&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Array 인스턴스 생성, 반환&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;new Array()와 생성 방법 및 기능 같음&lt;/strong&gt;&lt;br /&gt;
Array() 함수도 new Array()와 마찬가지로 Array 인스턴스를 생성하고 반환합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;인스턴스 생성 논리&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;new Array()는 new 연산자에서 생성자 함수를 호출하여 인스턴스 생성&lt;/li&gt;
      &lt;li&gt;Array()는 직접 생성자 함수를 호출하여 인스턴스를 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;new Array()는 new 연산자가 prototype에 있는 constructor를 호출합니다.&lt;br /&gt;
contsructor가 인스턴스를 생성해서 반환합니다.&lt;/p&gt;

&lt;p&gt;반면 Array() 함수는 생성자 함수(constructor)를 바로 호출하는 겁니다.&lt;br /&gt;
그래서 이것 또한 new Array() 처럼 생성자함수라고 부를 수 있지만 앞에 new 연산자가 없어서 Array() 함수라고 부른 것입니다.&lt;/p&gt;

&lt;p&gt;그러나 앞에가 A 대문자죠.&lt;br /&gt;
이걸 보면 생성자 함수라고 볼 수 있습니다.&lt;br /&gt;
일반적으로 소문자면 그건 메소드나 함수가 되겠는데요, A가 대문자니까 아 이건 생성자 함수구나, 그런데 new 연산자를 사용하지 않았구나. 라는거죠.&lt;/p&gt;

&lt;h2 id=&quot;length-프로퍼티&quot;&gt;length 프로퍼티&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;배열 [1, 2, 3]에서&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;length 값은 3&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Array 오브젝트에 { length: 3 } 형태로 설정&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ol&gt;
          &lt;li&gt;[1, 2, 3]의 length 값은 3&lt;/li&gt;
          &lt;li&gt;{length: 3} 형태로 설정되므로 length를 프로퍼티 이름으로 엑세스 할 수 있음&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;처음 인덱스는 0, 마지막 인덱스는 2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;열거 / 삭제는 할 수 없지만, 변경은 가능&lt;br /&gt;
length 프로퍼티는 열거 / 삭제는 할 수 없지만 &lt;strong&gt;변경은 가능&lt;/strong&gt;합니다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;length 값을 변경하면 배열의 엘리먼트 수가 변경됨&lt;br /&gt;
이거 조금 애매합니다.&lt;br /&gt;
왜냐하면 length 프로퍼티는 자바스크립트 엔진에서 만드는 거거든요?&lt;br /&gt;
그것을 개발자 코드로 변경할 수 있다?&lt;br /&gt;
편리해서 좋긴 하지만 변경은 좀 그렇습니다.&lt;/p&gt;

    &lt;p&gt;length 값을 변경하면 엘리먼트의 수가 변경됩니다.&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [1, 2, 3, undefined, undefined]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;늘어난 엘리먼트 값은 undefined&lt;/li&gt;
    &lt;/ol&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [1, 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;3에서 2로 줄이면 뒤의 엘리먼트가 삭제됩니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;이러한 것들은 조금 그렇습니다.&lt;br /&gt;
가독성도 많이 떨어지구요, 자세히 봐야되잖아요? 코드를?&lt;br /&gt;
&lt;strong&gt;이런거는 메소드로 처리하는 것이 더 낫습니다.&lt;/strong&gt;&lt;br /&gt;
물론 이건 제 개인 스타일입니다.&lt;br /&gt;
물론 안된다는 거는 아닙니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Nov 2020 16:54:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/30/beginner18.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/30/beginner18.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>13-2. Array 오브젝트(ES3 기준) / 프로퍼티 리스트</title>
        <description>&lt;h2 id=&quot;13-2-array-오브젝트es3-기준--프로퍼티-리스트&quot;&gt;13-2. Array 오브젝트(ES3 기준) / 프로퍼티 리스트&lt;/h2&gt;

&lt;h2 id=&quot;es3-프로퍼티-리스트&quot;&gt;ES3 프로퍼티 리스트&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;new Array() : 인스턴스 생성&lt;/li&gt;
  &lt;li&gt;Array() : 인스턴스 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;new 연산자를 사용하냐 안하냐 차이일 뿐입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Array 프로퍼티&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;length : 배열의 엘리먼트 수 반환&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Array.prototype&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;constructor : 생성자&lt;/li&gt;
  &lt;li&gt;unshift() : 배열 처음에 엘리먼트 삽입&lt;/li&gt;
  &lt;li&gt;push() : 배열 끝에 엘리먼트 첨부&lt;/li&gt;
  &lt;li&gt;&lt;mark&gt;concat() : 배열 끝에 값을 연결&lt;/mark&gt;&lt;/li&gt;
  &lt;li&gt;&lt;mark&gt;slice() : 인덱스 범위의 엘리먼트를 복사&lt;/mark&gt;&lt;/li&gt;
  &lt;li&gt;&lt;mark&gt;join() : 엘리먼트와 분리자를 결합하여 반환&lt;/mark&gt;&lt;/li&gt;
  &lt;li&gt;toString() : 엘리먼트를 문자열로 연결하여 반환&lt;/li&gt;
  &lt;li&gt;toLocaleString() : 엘리먼트를 지역화 문자로 변환하고 문자열로 연결하여 반환&lt;/li&gt;
  &lt;li&gt;shift() : 첫번째 엘리먼트를 삭제하고 &lt;strong&gt;삭제한 엘리먼트 반환&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;pop() : 마지막 엘리먼트를 삭제하고 &lt;strong&gt;삭제한 엘리먼트 반환&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;splice() : 엘리먼트를 삭제하고 새로운 엘리먼트를 삽입, &lt;strong&gt;삭제한 엘리먼트 반환&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;sort() : 엘리먼트 값을 Unicode 순서로 분류하여 반환&lt;/li&gt;
  &lt;li&gt;reverse() : 엘리먼트 위치를 역순으로 바꾸어 반환&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;concat / slice / join : string에서도 많이 쓰이는 것들입니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 11##22##33&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ##이 분리자입니다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 분리자를 사용 안할수도 있습니다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Array.prototype&lt;/strong&gt; &amp;lt;- 인스턴스 생성할 때 인스턴스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;__proto__&lt;/code&gt;에 메소드로 설정되는 것입니다.&lt;/p&gt;

&lt;h3 id=&quot;splice&quot;&gt;splice()&lt;/h3&gt;
&lt;p&gt;splice()는 두 가지 기능을 가지고 있습니다.&lt;br /&gt;
엘리먼트를 삭제하고 새로운 엘리먼트를 삽입합니다.&lt;br /&gt;
그리고 삭제한 엘리먼트를 반환합니다.&lt;/p&gt;

&lt;h3 id=&quot;sort&quot;&gt;sort()&lt;/h3&gt;
&lt;p&gt;엘리먼트 값을 Unicode 순서로 분류하여 반환합니다.&lt;br /&gt;
예를 들면, 1234 같은 경우는 숫자 값이 있으니까 값으로 sort를 하면 되지만, 영어의 abc나 한글의 가나다 같은 경우엔 sort를 할 수 없습니다.&lt;br /&gt;
그때 Unicode의 &lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;코드 포인트 값&lt;/span&gt;&lt;/strong&gt;으로 sort를 하는 것입니다.&lt;br /&gt;
그러면 Unicode 사전에 등록한 순서대로 sort가 됩니다.&lt;br /&gt;
그래서 가나다 순서로 sort를 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;하지만 가나다 순서만을 제공합니다. 
그래서 역순으로 하려면, 즉 가나다를 다나가 형태로 역순으로 할 경우엔 콜백함수로 호출하는데요, 거기에다가 작성을 해서 역순으로 해주는..&lt;br /&gt;
개발자가 그것은 작성을 해줘야합니다.&lt;/p&gt;

&lt;p&gt;기본 순서는 자바스크립트에서 제공을 하지만 역순은 개발자가 코드를 작성해서 역순을 해줘야됩니다.&lt;br /&gt;
물론 알고리즘이 있습니다만,.. 그렇게 어렵지 않습니다.&lt;br /&gt;
알고리즘에 대해선 뒤에서 sort() 메소드를 다룰때 설명드리겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;reverse&quot;&gt;reverse()&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;값이 아니라 위치를 역순으로 바꿉니다.&lt;/strong&gt;&lt;br /&gt;
즉 현재 abc가 있으면 a가 0번 인덱스, c가 2번 인덱스죠?&lt;br /&gt;
그럼 c가 맨 앞으로 0번 인덱스로 오는겁니다.&lt;br /&gt;
순서를 거꾸로 바꾸는 겁니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Nov 2020 16:35:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/30/beginner17.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/30/beginner17.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>13-1. Array 오브젝트(ES3 기준) / Array 오브젝트 개요, 배열 생성 방법, 엘리먼트 작성 방법, 배열 차원</title>
        <description>&lt;h2 id=&quot;13-1-array-오브젝트es3-기준--array-오브젝트-개요-배열-생성-방법-엘리먼트-작성-방법-배열-차원&quot;&gt;13-1. Array 오브젝트(ES3 기준) / Array 오브젝트 개요, 배열 생성 방법, 엘리먼트 작성 방법, 배열 차원&lt;/h2&gt;

&lt;p&gt;이번장은 빌트인 Array 오브젝트입니다.&lt;br /&gt;
이제 비기너 과정의 마지막 단계입니다.&lt;/p&gt;

&lt;p&gt;빌트인 Array 오브젝트 과정은 ES3와 ES5로 나뉘어져있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ES3가 프로그램 언어에 있어 배열의 기본을 다룬다고 한다면,&lt;/li&gt;
  &lt;li&gt;ES5는 활용하는 측면이 강합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;array-오브젝트-개요&quot;&gt;Array 오브젝트 개요&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;빌트인 오브젝트&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Array(배열) 형태&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;[123, “ABC”, “가나다”]&lt;/li&gt;
      &lt;li&gt;대괄호 안에 콤마로 구분하여 값 작성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;배열 엘리먼트(Element)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;[123, “ABC”]에서 123, “ABC” 각각을 엘리먼트 또는 요소라고 부름&lt;/li&gt;
      &lt;li&gt;강좌에서는 엘리먼트로 표기&lt;/li&gt;
      &lt;li&gt;2의 32승(4,294,967,296) - 1개&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;엘리먼트와 요소 : 약간의 뉘앙스 차이가 있습니다.&lt;br /&gt;
그래서 강좌에선 엘리먼트로 표기합니다.&lt;/p&gt;

&lt;p&gt;배열에서 쓰일 수 있는 엘리먼트 수는 2의 32승 -1 개입니다.&lt;br /&gt;
대략 42억개 정도 됩니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;인덱스(Index)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;엘리먼트 위치를 인덱스라고 부름&lt;/li&gt;
      &lt;li&gt;왼쪽부터 0번 인덱스, 1번 인덱스&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;배열 특징&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;엘리먼트 작성이 &lt;mark&gt;순서&lt;/mark&gt;를 갖고 있음&lt;/li&gt;
      &lt;li&gt;배열 전체를 작성한 순서로 읽거나&lt;/li&gt;
      &lt;li&gt;인덱스로 값을 추출할 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;엘리먼트 작성이 순서를 갖습니다.&lt;br /&gt;
이거 의미가 굉장히 큽니다.&lt;/p&gt;

&lt;p&gt;[123, “ABC”, “가나다”]&lt;/p&gt;

&lt;p&gt;이렇게 작성한 것이 순서를 갖는다는 것이죠.&lt;br /&gt;
배열에선 순서가 매우 중요한 의미를 갖습니다.&lt;br /&gt;
이 순서에 access하는 것이 index입니다.&lt;/p&gt;

&lt;h2 id=&quot;배열-생성-방법&quot;&gt;배열 생성 방법&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;new Array()로 생성&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;var book = new Array();&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Array()로 생성&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;var book = Array();&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;new Array()로 배열을 만들 수도 있고, Array() 함수로도 만들 수 있습니다.&lt;br /&gt;
각각 &lt;strong&gt;배열 인스턴스&lt;/strong&gt;를 만듭니다.&lt;br /&gt;
다만 new 연산자를 사용하고 안하고의 차이입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;대괄호로 생성&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;var book = [];&lt;/li&gt;
      &lt;li&gt;일반적으로 이 형태를 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;이와같이 [] 대괄호로도 배열 인스턴스를 만들 수 있습니다.&lt;br /&gt;
이 대괄호를 &lt;strong&gt;배열 리터럴&lt;/strong&gt;이라고 부릅니다.&lt;br /&gt;
우리과 중괄호{} - 오브젝트 리터럴로 오브젝트 인스턴스를 만든 것과 같은 개념입니다.&lt;/p&gt;

&lt;p&gt;자바스크립트 개발자들은 일반적으로 배열리터럴[]을 많이 사용합니다.&lt;br /&gt;
위에 new Array()와 Array()도 나름대로의 특징이 있습니다.
&lt;strong&gt;배열 리터럴 [] 대괄호와 차이가 있습니다.&lt;/strong&gt;&lt;br /&gt;
이것은 나중에 다루도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;엘리먼트-작성-방법&quot;&gt;엘리먼트 작성 방법&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;var book = [“책1”, “책2”];&lt;/li&gt;
  &lt;li&gt;대괄호 안에 콤마로 구분하여 다수 작성 가능&lt;/li&gt;
  &lt;li&gt;String 타입은 큰 따옴표, 작은 따옴표 모두 가능&lt;/li&gt;
  &lt;li&gt;JS의 모든 타입의 값, 오브젝트 사용 가능 (인스턴스도 작성할 수 있습니다.)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;값을 작성하지 않고 콤마만 작성하면 undefined가 설정됨&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;값을 작성하지 않았다, 정의하지 않았다. 이런 뉘앙스입니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;배열-차원&quot;&gt;배열 차원&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1차원 배열&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;대괄호 하나에 엘리먼트 작성&lt;/li&gt;
      &lt;li&gt;[12, 34, 56] 형태&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 12&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 34&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 56&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;[12, 34, 56] - Array 인스턴스를 만들어 list 변수에 할당합니다.&lt;/p&gt;

    &lt;p&gt;그런데 new 연산자를 사용 안했으므로 우리는 이것을 오브젝트라고 부르겠다는 것입니다.&lt;br /&gt;
  즉 &lt;strong&gt;배열 오브젝트&lt;/strong&gt;입니다.&lt;/p&gt;

    &lt;p&gt;배열은 순서를 가지고 있습니다.&lt;br /&gt;
  그래서 이 순서애도 읽는 것이 중요합니다.&lt;br /&gt;
  &lt;strong&gt;그리고 배열은 전체를 읽는 경우가 대부분입니다.&lt;/strong&gt;&lt;br /&gt;
  &lt;strong&gt;물론 홀수번째만 읽거나, 짝수번째만 읽거나, 또는 특정 조건을 부여해서 읽을 수도 있습니다만은, 어쨌든 그런 개념을 배열은 갖고 있습니다.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;String 오브젝트에서 length는 문자 수였습니다.&lt;br /&gt;
  위 코드에서 length는 배열 엘리먼트의 수입니다.&lt;/p&gt;

    &lt;p&gt;length는 1부터 시작하기 때문에 위 list의 length를 구하면 3&lt;br /&gt;
  index는 0, 1, 2&lt;/p&gt;

    &lt;p&gt;배열은 index 개념으로 값을 추출하게되고, 물론 값을 추가할 수도 있고, 변경할 수도 있습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;2차원 배열&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;배열 안에 1차원 배열을 작성&lt;/li&gt;
      &lt;li&gt;[[12, 34, 56]]&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 12&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 34&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 56&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;3차원 배열&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;배열 안에 2차원 배열을 작성&lt;/li&gt;
      &lt;li&gt;[[[12, 34, 56]]]&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;two&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 12&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 34&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 56&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 그렇게 좋은 모습이 아닙니다.&lt;br /&gt;
3단계까지 내려가는 것은 좀 &lt;strong&gt;가독성이 많이 떨어지죠?&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;그래서 저는 3단계까지 내려가게되면 3단계 부분을 함수로 떼어냅니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그래서 함수를 호출하면서 위의 &lt;code class=&quot;highlighter-rouge&quot;&gt;one[m]&lt;/code&gt; 값을 파라미터로 넘겨줍니다.&lt;br /&gt;
그렇게하면 가독성이 좋아질 것입니다.&lt;/p&gt;

&lt;p&gt;또 다른 방법은 서버 개발자와 최대한 2차원 배열까지 데이터를 만들어달라고 협의하는 것입니다.&lt;br /&gt;
&lt;mark&gt;왜냐하면 되도록이면 1차원이 좋습니다만,&lt;/mark&gt; 2차원은.. 배열 형태, row column이 있죠?&lt;/p&gt;

&lt;p&gt;행과 열.&lt;/p&gt;

&lt;p&gt;이는 어쩔 수 없는 2차원입니다.&lt;br /&gt;
그렇기 때문에 2차원까진 하는 것입니다.&lt;/p&gt;

&lt;p&gt;어쩔수 없이 3차원이 온다고하면, 저 같은 경우는 &lt;mark&gt;for문에 들어가기 전&lt;/mark&gt;에 2차원으로 정리하는 처리를 합니다.&lt;br /&gt;
배열을 두개로 나누는 방법.. 즉, 오브젝트와 프로퍼티죠?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프로퍼티와 배열로 나누는 형태로 분리를 시켜서 되도록이면 for 문이 3개가 중첩되는 것을 피합니다.&lt;/strong&gt;&lt;br /&gt;
나름대로의 제 스타일이라 이것이 반드시 옳다라고 얘기하기엔 그렇지만, 저는 그렇게합니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Nov 2020 15:57:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/30/beginner16.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/30/beginner16.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>12-7. Global 오브젝트 / eval() 함수</title>
        <description>&lt;h2 id=&quot;12-7-global-오브젝트--eval-함수&quot;&gt;12-7. Global 오브젝트 / eval() 함수&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;JS 코드&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;JS 코드를 실행하여 반환한 것&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;문자열을 기계어로 변환 후 실행까지 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;파라미터 문자열을&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;JS 코드로 간주하여 실행&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;parseInt('-123.45')&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -123&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;위에 보시면 eval 함수 안의 파라미터가 전체 다 문자열입니다.&lt;br /&gt;
  그래서 악의적인 해커가 악의적인 의도로 문자열 코드를 작성하여 위의 파라미터에다 집어넣는다면, 그것이 String으로 출력되는 것이 아니라 자바스크립트 코드로 간주하여 실행해버립니다.&lt;/p&gt;

        &lt;p&gt;&lt;strong&gt;실행을 한다는 것이 문제입니다.&lt;/strong&gt;&lt;/p&gt;

        &lt;p&gt;그러면 악의적인 코드가 그대로 실행이 되어버릴거아니에요?&lt;br /&gt;
  그러면 어떤 코드가 어떻게 움직일지 모르죠?&lt;br /&gt;
  그래서 eval()은 되도록이면 사용하지 않는 것이 좋습니다.&lt;/p&gt;

        &lt;p&gt;어쩔 수 없다면 그때 사용하시구요,&lt;br /&gt;
  보안에 문제가 있다고 알려져있는데, 이것을 덜커덩 썼다가 악의적인 해커의 공격을 받으면 그것은 또 다른 각도에서 접근하게 되거든요.&lt;/p&gt;

        &lt;p&gt;보안에 문제가 있다고 그러면, 좌우지간 멀리하면 멀리할수록 좋습니다.&lt;br /&gt;
  되도록이면 친하게 안지내는 것이 좋습니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;실행 결과를 반환 값으로 사용&lt;br /&gt;
값을 반환하지 않으면 undefined 반환&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;eval() 함수 실행 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/script/image232.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/static/img/script/image233.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/static/img/script/image234.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/static/img/script/image235.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;보안에 문제가 있다고 알려져 있음&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;사용 비권장&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;eval 함수는 보안에 문제가 있다고 알려져 있습니다.&lt;br /&gt;
그래서 사용을 권장하지 않습니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Nov 2020 15:44:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/30/beginner15.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/30/beginner15.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>12-6. Global 오브젝트 / 인코딩, 디코딩</title>
        <description>&lt;h2 id=&quot;12-6-global-오브젝트--인코딩-디코딩&quot;&gt;12-6. Global 오브젝트 / 인코딩, 디코딩&lt;/h2&gt;

&lt;h2 id=&quot;encodeuri&quot;&gt;encodeURI()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;URI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;인코딩 결과&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;URI를 인코딩(Encoding)하여 반환 &lt;strong&gt;(URI란 주소창 끝에 첨부되는 값을 뜻합니다.)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Uniform Resource Identifier&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;인코딩 제외 문자를 제외하고 &lt;strong&gt;“%16진수%16진수”&lt;/strong&gt; 형태로 변환&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;data?a=번&amp;amp;b=호&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;encodeURI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// data?a=%EB%B2%88&amp;amp;b=%ED%98%B8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;data?a=&lt;mark&gt;%EB%B2%88&lt;/mark&gt;&amp;amp;b=&lt;mark&gt;%ED%98%B8&lt;/mark&gt;&lt;br /&gt;
“번, 호” 이렇게 두 글자만 인코딩 되었습니다.&lt;br /&gt;
나머진 인코딩 제외 문자입니다.&lt;br /&gt;
이렇게 인코딩 되는 이유는 주소창 끝에 이렇게 ‘번’, ‘호’를 그대로 표시하면 가독성이 좋죠?&lt;br /&gt;
그럼 데이터를 쉽게 볼 수 있습니다.&lt;br /&gt;
그런데 위와 같이 인코딩해서 표시하면 &lt;strong&gt;가독성이 아무래도 좀 떨어지죠?&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;이를 위한 목적이 가장 큽니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이렇게 사용하게 된 것은..&lt;br /&gt;
2005년에 Ajax가 나왔는데, Ajax에서는 비동기 통신을 제공하거든요.&lt;br /&gt;
그런데 Ajax에선 위와 같이 인코딩하지 않고 JSON으로 파싱해서 보내줍니다.&lt;/p&gt;

&lt;p&gt;JSON 형태는 문자열 형태입니다.&lt;br /&gt;
즉 “” 큰 따옴표 안에 작성된 형태거든요.&lt;br /&gt;
그래서 인코딩을 위와 같이 하지 않습니다. 인코딩을 안합니다.&lt;br /&gt;
단, 주소창 끝에 표시하지 않고 &lt;strong&gt;보이지 않는 영역으로 서버로 전송됩니다.&lt;/strong&gt;&lt;br /&gt;
요즘엔 대부분 이런 Ajax, JSON 비동기 통신을 사용해서 데이터를 전송합니다.&lt;/p&gt;

&lt;p&gt;JSON에 대해선 뒤에서 다루겠습니다.&lt;/p&gt;

&lt;p&gt;여튼 이 인코딩 방법은 Ajax가 나오기 전에 동기 방법을 썼습니다.&lt;br /&gt;
여기서 동기와 비동기를 자세하게 말씀드리기 좀 그렇습니다만, 간단히 말씀드리자면, 웹 페이지에 id와 비밀번호를 입력했습니다.&lt;br /&gt;
그리고 회원가입 버튼을 클릭하면, 서버로 전송되죠?&lt;br /&gt;
이때 동기 방법은 서버에서 처리가 끝나서 웹페이지로 돌아올 때까지 &lt;strong&gt;다른 것을 하나도 처리 못합니다.&lt;/strong&gt;&lt;br /&gt;
즉, 웹페이지가 먹통상태가 되어가지고 웹페이지의 다른 버튼을 클릭하더라도 클릭이 안됩니다.&lt;/p&gt;

&lt;p&gt;반면 비동기 통신은 똑같은 방법이더라도 서버하고 브라우저하고 통신하는 와중에도 웹페이지의 다른 버튼을 클릭해도 클릭이 작동합니다.&lt;br /&gt;
그래서 비동기 통신방식의 UI가 굉장히 좋습니다.&lt;br /&gt;
아무때라도 다른 처리를 할 수 있기 때문입니다.&lt;/p&gt;

&lt;p&gt;그래서 요즘 대부분의 웹페이지는 비동기 통신방법을 사용하고 있습니다.&lt;br /&gt;
그렇다고 위와 같은 인코딩 방식을 아주 사용 안하는 것은 아니니까 ‘이런 것이 있다’ 주소창에 위와 같은 데이터가 표시되면, 아 저것은 인코딩한 거구나.&lt;br /&gt;
이정도만 아셔도 될 거 같습니다.&lt;/p&gt;

&lt;p&gt;이러한 개념정도만 아셔도 나중에 인코딩 관련에 대해서 찾아보시기 수월할겁니다.&lt;br /&gt;
인코딩 제외 문자만 유의하시면 됩니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;인코딩 제외 문자&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;영문자, 숫자&lt;/li&gt;
      &lt;li&gt;# ; / ? : @ &amp;amp; = + $ , - _ . ! ~ * ( ) 따옴표&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;encodeuricomponent&quot;&gt;encodeURIComponent()&lt;/h2&gt;

&lt;p&gt;이것은 앞의 &lt;code class=&quot;highlighter-rouge&quot;&gt;encodeURI()&lt;/code&gt;와 같습니다.&lt;br /&gt;
&lt;strong&gt;다만, 인코딩 제외 문자가 적습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;URI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;인코딩 결과&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;URI를 인코딩하여 반환&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;mark&gt;&quot;; / ? : @ &amp;amp; = + $ ,&quot;를 인코딩하는 것이 encodeURI()와 다릅니다.&lt;/mark&gt;&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;인코딩 제외 문자를 제외하고 “%16진수%16진수” 형태로 변환&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;data?a=번&amp;amp;b=호&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// data%3Fa%3D%EB%B2%88%26b%3D%ED%98%B8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;encodeURIComponent()&lt;/code&gt; 함수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;encodeURI()&lt;/code&gt; 함수보다 인코딩 제외 문자가 적다 정도만 알고 넘어가면 됩니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;인코딩 제외 문자&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;영문자, 숫자&lt;/li&gt;
      &lt;li&gt;# - _ . ! ~ * ( ) 따옴표&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;decodeuri&quot;&gt;decodeURI()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;인코딩 문자열&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;디코딩 결과&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;인코딩을 디코딩(Decoding)하여 반환&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파라미터에 encodeURI()로 인코딩한 문자열 작성&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;data?a=%EB%B2%88&amp;amp;b=%ED%98%B8&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;decodeURI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// data?a=번&amp;amp;b=호&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;decodeuricomponent&quot;&gt;decodeURIComponent()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;인코딩 문자열&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;디코딩 결과&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;인코딩을 디코딩하여 반환&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;mark&gt;파라미터에 encodeURIComponent()로 인코딩한 문자열 작성&lt;/mark&gt;&lt;br /&gt;
제외하는 문자의 정도가 다릅니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;디코딩 / 인코딩 : 사람이 알아볼 수 있는 문자로 변환 / 없는 문자로 변환&lt;/li&gt;
  &lt;li&gt;디코딩 / 인코딩에서 제외하는 문자가 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 정도로만 익히시고 필요할 때 검색해서 사용하시면 됩니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Nov 2020 15:24:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/30/beginner14.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/30/beginner14.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>12-5. Global 오브젝트 / NaN, 유한대 체크 함수</title>
        <description>&lt;h2 id=&quot;12-5-global-오브젝트--nan-유한대-체크-함수&quot;&gt;12-5. Global 오브젝트 / NaN, 유한대 체크 함수&lt;/h2&gt;

&lt;h2 id=&quot;isnan&quot;&gt;isNaN()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;값&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;true, false&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;값의 NaN 여부 반환&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;숫자 값이 아니면 true 반환&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isNaN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ABC&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isNaN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;값이 String 타입이므로 true 반환&lt;/li&gt;
      &lt;li&gt;&lt;mark&gt;파라미터를 작성하지 않으면 undefined와 같음&lt;/mark&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;숫자 값이면 false 반환&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;span style=&quot;color:red;text-decoration:underline&quot;&gt;값이 숫자로 변환되면 숫자로 인식&lt;/span&gt;&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isNaN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isNaN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isNaN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ol&gt;
          &lt;li&gt;String 타입이라도 값이 숫자이면 숫자로 인식&lt;/li&gt;
          &lt;li&gt;null을 숫자로 변환하면 0&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;NaN === NaN 결과는 false&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;설계 실수&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;ES6의 Object.is() 사용&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;NaN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;NaN과 NaN을 비교하는데 false가 나오면 이는 문제가 될 수 있습니다.&lt;br /&gt;
  NaN을 비교할 땐 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.is()&lt;/code&gt; 함수를 사용하는 것이 안전합니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;NaN === NaN은 false가 나옵니다.&lt;br /&gt;
&lt;strong&gt;이는 설계 실수입니다.&lt;/strong&gt;&lt;br /&gt;
true가 나오도록 해야되는데 false가 나오도록 한겁니다.&lt;br /&gt;
이거 관련해서 개발자들 사이에서도 말이 많습니다.&lt;/p&gt;

&lt;p&gt;그런데 ES6의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.is()&lt;/code&gt; 함수를 사용하면, NaN과 NaN을 비교할 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;가 반환됩니다.&lt;/p&gt;

&lt;h2 id=&quot;isfinite&quot;&gt;isFinite()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;값&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;true, false&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;값이 Infinity, NaN이면&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;false 반환&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;아니면 즉, finite(유한)이면 true 반환&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isFinite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Infinity&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isFinite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isFinite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ABC&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;mark&gt;값이 숫자로 변환되면 숫자로 인식&lt;/mark&gt;&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isFinite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isFinite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isFinite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;false는 0으로 변환됩니다.&lt;br /&gt;
  0은 유한한 수이므로 true가 반환됩니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 30 Nov 2020 14:54:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/30/beginner13.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/30/beginner13.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
      <item>
        <title>12-4. Global 오브젝트 / 정수, 실수 변환</title>
        <description>&lt;h2 id=&quot;12-4-global-오브젝트--정수-실수-변환&quot;&gt;12-4. Global 오브젝트 / 정수, 실수 변환&lt;/h2&gt;

&lt;h2 id=&quot;parseint&quot;&gt;parseInt()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;첫번째 파라미터 : 값 &lt;br /&gt; 두번째 파라미터 : 진수, 디폴트(10진수)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;변환한 값&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;값을 &lt;strong&gt;정수&lt;/strong&gt;로 변환화여 반환&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;값이 123.56이면 123 반환&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;123.56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 123&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ol&gt;
          &lt;li&gt;소수를 제외하고 정수만 반환&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;값이 “123px”이면 123 반환&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;이 용도로도 많이 사용&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-123.45&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -123&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;123px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 123&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;12AB34&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;ol&gt;
          &lt;li&gt;String 타입이라도 값이 숫자이면 변환&lt;/li&gt;
          &lt;li&gt;“123px”에서 123은 변환하고 px은 변환하지 않음 (이는 스타일에서 많이 씁니다.)&lt;/li&gt;
          &lt;li&gt;“12AB34”에서 12는 변환하고 AB와 34는 변환하지 않음&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;0 또는 빈 문자열을 제외시킴&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0012&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 12&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;   123&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 123&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;0012에서 00은 없어짐&lt;/li&gt;
      &lt;li&gt;“   123”에서 앞의 공백을 무시하고 변환&lt;/li&gt;
      &lt;li&gt;&lt;mark&gt;값을 작성하지 않으면 NaN&lt;/mark&gt;&lt;br /&gt;
&lt;mark&gt;undefined가 아닌 것은 기준이 Number이기 때문&lt;/mark&gt;&lt;br /&gt;
&lt;strong&gt;파라미터를 숫자 개념으로 처리하기 때문에 NaN을 반환합니다.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;진수를 적용하여 값을 변환&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 19&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0x13&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 19&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;두번째 파라미터에 16진수 작성&lt;br /&gt;
13을 16진수로 변환&lt;br /&gt;
16 + 3은 19&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0(숫자)x&lt;/code&gt;는 16진수를 나타냄&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;parsefloat&quot;&gt;parseFloat()&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;데이터(값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;파라미터&lt;/td&gt;
      &lt;td&gt;값&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;반환&lt;/td&gt;
      &lt;td&gt;변환한 값&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;값을 &lt;strong&gt;실수&lt;/strong&gt;로 변환하여 반환&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;JS는 기본적으로 &lt;strong&gt;실수&lt;/strong&gt;로 처리하므로&lt;/li&gt;
      &lt;li&gt;실수로 변환하는 것이 의미가 없지만&lt;/li&gt;
      &lt;li&gt;&lt;mark&gt;문자열의 실수 변환은 의미가 있음&lt;/mark&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-123.45&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -117.45&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;12.34AB56&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 12.34&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;String 타입이지만 소수를 포함하여 변환&lt;br /&gt;
-123.45에 6을 더하면 -117.45&lt;/li&gt;
      &lt;li&gt;12.34AB56에서 12.34는 변환되고 AB56은 변환되지 않음&lt;/li&gt;
      &lt;li&gt;문자 이후는 변환하지 않습니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;지수, 공백 변환&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1.2e3&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1200&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;   12.34   &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 32.34&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;지수를 변환&lt;/li&gt;
      &lt;li&gt;앞뒤 공백을 제외하고 변환&lt;br /&gt;
Number 타입의 12.34로 변환하므로 20을 더할 수 있음&lt;/li&gt;
      &lt;li&gt;값을 작성하지 않으면 NaN&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 30 Nov 2020 14:36:00 +0900</pubDate>
        <link>http://localhost:4000/js_beginner/2020/11/30/beginner12.html</link>
        <guid isPermaLink="true">http://localhost:4000/js_beginner/2020/11/30/beginner12.html</guid>
        
        
        <category>js_beginner</category>
        
      </item>
    
  </channel>
</rss>
