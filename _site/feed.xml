<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-04-20T00:48:03+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">LHJ</title><subtitle>coding blog</subtitle><entry><title type="html">4.4 요약</title><link href="http://localhost:4000/javascript/2020/04/20/javascript78/" rel="alternate" type="text/html" title="4.4 요약" /><published>2020-04-20T00:39:50+09:00</published><updated>2020-04-20T00:39:50+09:00</updated><id>http://localhost:4000/javascript/2020/04/20/javascript78</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/20/javascript78/">&lt;p&gt;&lt;strong&gt;제어문은 실제로 프로그램이 동작하게 하는 가장 중요한 열쇠&lt;/strong&gt;입니다.&lt;br /&gt;
변수와 상수에 중요한 정보가 아무리 많이 들어있다 해도 제어문을 써야 그 데이터에 따라 필요한 선택을 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;순서도는 프로그램의 흐름을 시각적으로 표현하는 좋은 방법&lt;/strong&gt;이고, 코드를 작성하기 전에 추상적인 순서도를 그려 보면 문제를 어떻게 해결할지 결정하는 데 도움이 될 수 있습니다.&lt;br /&gt;
하지만 순서도는 간단하게 그리기가 어려우며, 충분히 훈련된 사람은 프로그램의 흐름을 코드만으로도 자연스럽게 표현할 수 있습니다.&lt;br /&gt;
&lt;strong&gt;사실 순서도를 그리듯, 레고 블록을 조립하듯 시각적으로 프로그램을 만드는 언어를 만들려는 시도는 여러 가지가 있었지만, 텍스트 기반 프로그래밍 언어가 이런 시도에 위협받았던 적은 한 번도 없습니다.&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">제어문은 실제로 프로그램이 동작하게 하는 가장 중요한 열쇠입니다. 변수와 상수에 중요한 정보가 아무리 많이 들어있다 해도 제어문을 써야 그 데이터에 따라 필요한 선택을 할 수 있습니다. 순서도는 프로그램의 흐름을 시각적으로 표현하는 좋은 방법이고, 코드를 작성하기 전에 추상적인 순서도를 그려 보면 문제를 어떻게 해결할지 결정하는 데 도움이 될 수 있습니다. 하지만 순서도는 간단하게 그리기가 어려우며, 충분히 훈련된 사람은 프로그램의 흐름을 코드만으로도 자연스럽게 표현할 수 있습니다. 사실 순서도를 그리듯, 레고 블록을 조립하듯 시각적으로 프로그램을 만드는 언어를 만들려는 시도는 여러 가지가 있었지만, 텍스트 기반 프로그래밍 언어가 이런 시도에 위협받았던 적은 한 번도 없습니다.</summary></entry><entry><title type="html">4.3.4 배열을 수정할 때 감소하는 인덱스 사용하기</title><link href="http://localhost:4000/javascript/2020/04/20/javascript77/" rel="alternate" type="text/html" title="4.3.4 배열을 수정할 때 감소하는 인덱스 사용하기" /><published>2020-04-20T00:24:39+09:00</published><updated>2020-04-20T00:24:39+09:00</updated><id>http://localhost:4000/javascript/2020/04/20/javascript77</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/20/javascript77/">&lt;p&gt;&lt;strong&gt;배열에 루프를 실행하면서 루프 바디에서 배열을 수정하는 건 위험할 수 있습니다.&lt;/strong&gt;&lt;br /&gt;
뜻하지 않게 종료 조건을 바꿀 수도 있으니까요.&lt;br /&gt;
운이 좋다면 원하지 않는 결과가 나오는 정도겠지만, 운이 나쁘면 무한 루프가 발생할 겁니다.&lt;br /&gt;
이런 경우 널리 쓰이는 패턴은 &lt;strong&gt;감소하는 인덱스&lt;/strong&gt;를 써서, &lt;strong&gt;배열 마지막 요소에서 루프를 시작하는 방법&lt;/strong&gt;입니다.&lt;br /&gt;
이렇게 하면 배열에 요소를 추가하거나 제거해도 종료 조건이 바뀌는 일은 없습니다.&lt;/p&gt;

&lt;p&gt;예를 들어 bitArrayOfNumbers 에서 찾은 모든 소수를 제거하고 싶다고 합시다.&lt;br /&gt;
8장에서 배우겠지만, 다음 코드의 &lt;strong&gt;splice 메서드&lt;/strong&gt;는 배열 요소를 추가하거나 제거할 때 사용합니다.&lt;br /&gt;
이 예제는 예상대로 동작하지 않습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bigArrayOfNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bigArrayOfNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bigArrayOfNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;인덱스는 점점 커지는데 우리는 요소를 제거하고 있으므로, 소수가 연달아 존재한다면 그중 일부를 제거하지 않고 넘어갈 가능성이 있습니다.&lt;/strong&gt;&lt;br /&gt;
감소하는 인덱스를 쓰면 이 문제는 간단히 해결됩니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bigArrayOfNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bigArrayOfNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bigArrayOfNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;초기 조건과 종료 조건을 봅시다.&lt;br /&gt;
배열의 인덱스는 0에서 시작하므로 &lt;strong&gt;배열 길이보다 1 작은 값&lt;/strong&gt;으로 시작해야 합니다.&lt;br /&gt;
그리고 루프의 &lt;strong&gt;종료 조건을 i가 0보다 크거나 같을 때&lt;/strong&gt;로 정했습니다.&lt;br /&gt;
그렇지 않다면 이 루프는 배열의 첫 번째 요소에서는 실행되지 않으므로, 첫 번째 요소가 소수라면 문제가 생길 겁니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">배열에 루프를 실행하면서 루프 바디에서 배열을 수정하는 건 위험할 수 있습니다. 뜻하지 않게 종료 조건을 바꿀 수도 있으니까요. 운이 좋다면 원하지 않는 결과가 나오는 정도겠지만, 운이 나쁘면 무한 루프가 발생할 겁니다. 이런 경우 널리 쓰이는 패턴은 감소하는 인덱스를 써서, 배열 마지막 요소에서 루프를 시작하는 방법입니다. 이렇게 하면 배열에 요소를 추가하거나 제거해도 종료 조건이 바뀌는 일은 없습니다. 예를 들어 bitArrayOfNumbers 에서 찾은 모든 소수를 제거하고 싶다고 합시다. 8장에서 배우겠지만, 다음 코드의 splice 메서드는 배열 요소를 추가하거나 제거할 때 사용합니다. 이 예제는 예상대로 동작하지 않습니다. for(let i=0; i&amp;lt;bigArrayOfNumbers.length; i++) { if(isPrime(bigArrayOfNumbers[i])) bigArrayOfNumbers.splice(i, 1); } 인덱스는 점점 커지는데 우리는 요소를 제거하고 있으므로, 소수가 연달아 존재한다면 그중 일부를 제거하지 않고 넘어갈 가능성이 있습니다. 감소하는 인덱스를 쓰면 이 문제는 간단히 해결됩니다. for(let i = bigArrayOfNumbers.length-1; i&amp;gt;=0; i--){ if(isPrime(bigArrayOfNumbers[i])) bigArrayOfNumbers.splice(i, 1); } 초기 조건과 종료 조건을 봅시다. 배열의 인덱스는 0에서 시작하므로 배열 길이보다 1 작은 값으로 시작해야 합니다. 그리고 루프의 종료 조건을 i가 0보다 크거나 같을 때로 정했습니다. 그렇지 않다면 이 루프는 배열의 첫 번째 요소에서는 실행되지 않으므로, 첫 번째 요소가 소수라면 문제가 생길 겁니다.</summary></entry><entry><title type="html">4.3.3 루프를 완료한 뒤 인덱스 값 사용하기</title><link href="http://localhost:4000/javascript/2020/04/20/javascript76/" rel="alternate" type="text/html" title="4.3.3 루프를 완료한 뒤 인덱스 값 사용하기" /><published>2020-04-20T00:17:00+09:00</published><updated>2020-04-20T00:17:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/20/javascript76</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/20/javascript76/">&lt;p&gt;break 문을 써서 루프를 일찍 종료했을 때 인덱스 변수의 값이 필요할 때가 있습니다.&lt;br /&gt;
for 루프가 끝나도 인덱스 변수의 값은 그대로 유지된다는 점을 활용할 수 있습니다.&lt;br /&gt;
&lt;strong&gt;이 패턴은 break 문을 써서 루프를 끝내도록 해야만 사용할 수 있습니다.&lt;/strong&gt;&lt;br /&gt;
예를 들어 이 패턴을 써서 배열에 들어 있는 첫 번째 소수의 인덱스를 찾을 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bigArrayOfNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bigArrayOfNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bigArrayOfNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;No prime numbers!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`First prime number found at position &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">break 문을 써서 루프를 일찍 종료했을 때 인덱스 변수의 값이 필요할 때가 있습니다. for 루프가 끝나도 인덱스 변수의 값은 그대로 유지된다는 점을 활용할 수 있습니다. 이 패턴은 break 문을 써서 루프를 끝내도록 해야만 사용할 수 있습니다. 예를 들어 이 패턴을 써서 배열에 들어 있는 첫 번째 소수의 인덱스를 찾을 수 있습니다. let i = 0; for(; i &amp;lt; bigArrayOfNumbers.length; i++){ if(isPrime(bigArrayOfNumbers[i])) break; } if(i === bigArrayOfNumbers.length) console.log('No prime numbers!'); else console.log(`First prime number found at position ${i}`);</summary></entry><entry><title type="html">4.3.2 break나 return 문을 써서 불필요한 연산 줄이기</title><link href="http://localhost:4000/javascript/2020/04/19/javascript75/" rel="alternate" type="text/html" title="4.3.2 break나 return 문을 써서 불필요한 연산 줄이기" /><published>2020-04-19T23:47:00+09:00</published><updated>2020-04-19T23:47:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/19/javascript75</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/19/javascript75/">&lt;p&gt;뭔가를 찾기 위해서 루프를 실행했다면, 찾으려는 것을 이미 찾은 후에는 루프 바디를 계속 실행할 필요가 없습니다.&lt;/p&gt;

&lt;p&gt;예를 들어 봅시다. 어떤 숫자가 소수(prime)인지 판단하는 작업은 CPU 부하가 비교적 높은 일 중 하나입니다.&lt;br /&gt;
숫자 수천개의 리스트에서 가장 앞에 있는 소수를 찾는다고 했을 때, 다음 코드는 일단 원하는 작업을 하기는 합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstPrime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bigArrayOfNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstPrime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstPrime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;bigArrayOfNumbers에 들어 있는 숫자가 백만 개쯤 되고, 소수는 그 리스트의 마지막쯤에 있다면 이 방법을 써도 상관은 없습니다.&lt;br /&gt;
하지만 첫 번째 숫자가 소수였다면?&lt;br /&gt;
아니면, 다섯 번째나 열다섯 번째쯤 있었다면 어떨까요?&lt;br /&gt;
쓸모없는 작업을 백만번이나 한 셈입니다.&lt;br /&gt;
생각만 해도 힘이 빠지는 소리군요.&lt;br /&gt;
break 문을 쓰면 원하는 것을 찾은 즉시 루프에서 빠져나갈 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstPrime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bitArrayOfNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;firstPrime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;이 루프가 함수 안에 있었다면 break 대신 return 문을 써도 됩니다.&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">뭔가를 찾기 위해서 루프를 실행했다면, 찾으려는 것을 이미 찾은 후에는 루프 바디를 계속 실행할 필요가 없습니다. 예를 들어 봅시다. 어떤 숫자가 소수(prime)인지 판단하는 작업은 CPU 부하가 비교적 높은 일 중 하나입니다. 숫자 수천개의 리스트에서 가장 앞에 있는 소수를 찾는다고 했을 때, 다음 코드는 일단 원하는 작업을 하기는 합니다. let firstPrime = null; for(let n of bigArrayOfNumbers){ if(isPrime(n) &amp;amp;&amp;amp; firstPrime === null) firstPrime = n; } bigArrayOfNumbers에 들어 있는 숫자가 백만 개쯤 되고, 소수는 그 리스트의 마지막쯤에 있다면 이 방법을 써도 상관은 없습니다. 하지만 첫 번째 숫자가 소수였다면? 아니면, 다섯 번째나 열다섯 번째쯤 있었다면 어떨까요? 쓸모없는 작업을 백만번이나 한 셈입니다. 생각만 해도 힘이 빠지는 소리군요. break 문을 쓰면 원하는 것을 찾은 즉시 루프에서 빠져나갈 수 있습니다. let firstPrime = null; for(let n of bitArrayOfNumbers){ if(isPrime(n)){ firstPrime = n; break; } } 이 루프가 함수 안에 있었다면 break 대신 return 문을 써도 됩니다.</summary></entry><entry><title type="html">4.3.1 continue 문을 사용하여 조건 중첩 줄이기</title><link href="http://localhost:4000/javascript/2020/04/19/javascript74/" rel="alternate" type="text/html" title="4.3.1 continue 문을 사용하여 조건 중첩 줄이기" /><published>2020-04-19T23:38:00+09:00</published><updated>2020-04-19T23:38:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/19/javascript74</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/19/javascript74/">&lt;p&gt;특정 조건이 맞을 때만 루프 바디를 실행해야 할 때가 많습니다.&lt;br /&gt;
다시 말해 반복문 안에 조건문을 써야 하는 경우입니다.&lt;br /&gt;
다음 예제를 보십시오.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;funds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Unlucky! Skip this round....&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 플레이...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런 경우를 &lt;strong&gt;제어문 중첩(nested control flow)&lt;/strong&gt; 이라 부릅니다.&lt;br /&gt;
while 루프의 바디에서 할 일은 대부분 else 절에 들어있고, if 절이 하는 일은 &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt;를 호출하는 것뿐입니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;continue&lt;/code&gt; 문을 써서 이 구조를 간결하게 만들 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;funds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Unlucky! Skip this round...&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 플레이...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 단순한 예제에서는 대체 뭐가 좋아졌다는 건지 실감이 잘 안 나겠지만, 루프 바디가 20행 쯤 된다고 생각해 보십시오.&lt;br /&gt;
중첩을 제거하면 코드를 읽고 이해하기 쉬워집니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">특정 조건이 맞을 때만 루프 바디를 실행해야 할 때가 많습니다. 다시 말해 반복문 안에 조건문을 써야 하는 경우입니다. 다음 예제를 보십시오. while(funds &amp;gt; 1 &amp;amp;&amp;amp; funds &amp;lt; 100) { let totalBet = rand(1, funds); if (totalBet === 13) { console.log(&quot;Unlucky! Skip this round....&quot;); } else { // 플레이... } } 이런 경우를 제어문 중첩(nested control flow) 이라 부릅니다. while 루프의 바디에서 할 일은 대부분 else 절에 들어있고, if 절이 하는 일은 console.log를 호출하는 것뿐입니다. continue 문을 써서 이 구조를 간결하게 만들 수 있습니다. while(funds &amp;gt; 1 &amp;amp;&amp;amp; funds &amp;lt; 100) { let totalBet = rand(1, funds); if (totalBet === 13) { console.log(&quot;Unlucky! Skip this round...&quot;); continue; } // 플레이... } 이 단순한 예제에서는 대체 뭐가 좋아졌다는 건지 실감이 잘 안 나겠지만, 루프 바디가 20행 쯤 된다고 생각해 보십시오. 중첩을 제거하면 코드를 읽고 이해하기 쉬워집니다.</summary></entry><entry><title type="html">4.3 유용한 제어문 패턴</title><link href="http://localhost:4000/javascript/2020/04/19/javascript73/" rel="alternate" type="text/html" title="4.3 유용한 제어문 패턴" /><published>2020-04-19T23:35:00+09:00</published><updated>2020-04-19T23:35:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/19/javascript73</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/19/javascript73/">&lt;p&gt;이제 자바스크립트의 제어문 기본을 알았으니 널리 쓰이는 패턴에 대해 알아봅시다.&lt;/p&gt;</content><author><name></name></author><summary type="html">이제 자바스크립트의 제어문 기본을 알았으니 널리 쓰이는 패턴에 대해 알아봅시다.</summary></entry><entry><title type="html">4.2.7 for … of 루프</title><link href="http://localhost:4000/javascript/2020/04/19/javascript72/" rel="alternate" type="text/html" title="4.2.7 for ... of 루프" /><published>2020-04-19T23:29:00+09:00</published><updated>2020-04-19T23:29:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/19/javascript72</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/19/javascript72/">&lt;p&gt;&lt;strong&gt;for … of 문은 ES6에서 새로 생긴 반복문이며 컬렉션의 요소에 루프를 실행하는 다른 방법입니다.&lt;/strong&gt;&lt;br /&gt;
문법은 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;statement&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;for … of 루프는 배열은 물론 (9장에서 설명할) &lt;strong&gt;이터러블(iterable) 객체&lt;/strong&gt;에 모두 사용할 수 있는 &lt;strong&gt;법용적인 루프&lt;/strong&gt;입니다.&lt;br /&gt;
다음 예제에서는 배열에 루프를 실행했습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randFace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randFace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randFace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;face&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`you rolled ... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;face&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;for … of 는 배열에 루프를 실행해야 하지만 각 요소의 인덱스를 알 필요는 없을 때 알맞습니다.&lt;/strong&gt;&lt;br /&gt;
인덱스를 알아야 한다면 일반적인 &lt;strong&gt;for 루프&lt;/strong&gt;를 사용하십시오.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randFace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randFace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randFace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Roll &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">for … of 문은 ES6에서 새로 생긴 반복문이며 컬렉션의 요소에 루프를 실행하는 다른 방법입니다. 문법은 다음과 같습니다. for (variable of object) statement for … of 루프는 배열은 물론 (9장에서 설명할) 이터러블(iterable) 객체에 모두 사용할 수 있는 법용적인 루프입니다. 다음 예제에서는 배열에 루프를 실행했습니다. const hand = [randFace(), randFace(), randFace()]; for (let face of hand) console.log(`you rolled ... ${face}!`); for … of 는 배열에 루프를 실행해야 하지만 각 요소의 인덱스를 알 필요는 없을 때 알맞습니다. 인덱스를 알아야 한다면 일반적인 for 루프를 사용하십시오. const hand = [randFace(), randFace(), randFace()]; for (let i = 0; i&amp;lt;hand.length; i++) console.log(`Roll ${i+1}: ${hand[i]}`);</summary></entry><entry><title type="html">4.2.6 for … in 루프</title><link href="http://localhost:4000/javascript/2020/04/19/javascript71/" rel="alternate" type="text/html" title="4.2.6 for ... in 루프" /><published>2020-04-19T23:16:00+09:00</published><updated>2020-04-19T23:16:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/19/javascript71</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/19/javascript71/">&lt;p&gt;for … in 루프는 &lt;strong&gt;객체의 프로퍼티&lt;/strong&gt;에 루프를 실행하도록 설계된 루프입니다.&lt;br /&gt;
문법은 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;statement&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음 예제를 보십시오.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Thomas&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Midshipman&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;지금 당장은 혼라스러워 보이겠지만 걱정하지 마십시오.&lt;br /&gt;
9장에서 이 예제에 대해 더 배우게 됩니다.&lt;br /&gt;
여기서 &lt;code class=&quot;highlighter-rouge&quot;&gt;player.hasOwnProperty&lt;/code&gt;를 호출할 필요는 없지만, &lt;strong&gt;이 메서드를 생략하면 에러가 생길 때가 많습니다.&lt;/strong&gt;&lt;br /&gt;
이것 역시 9장에서 설명합니다.&lt;br /&gt;
지금 당장은 for … in 루프라는 반복문이 있다는 걸 아는 정도로 충분합니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">for … in 루프는 객체의 프로퍼티에 루프를 실행하도록 설계된 루프입니다. 문법은 다음과 같습니다. for (variable in object) statement 다음 예제를 보십시오. const player = { name: 'Thomas', rank: 'Midshipman', age: 25 }; for (let prop in player) { if(!player.hasOwnProperty(prop)) continue; console.log(prop + ': ' + player[prop]); } 지금 당장은 혼라스러워 보이겠지만 걱정하지 마십시오. 9장에서 이 예제에 대해 더 배우게 됩니다. 여기서 player.hasOwnProperty를 호출할 필요는 없지만, 이 메서드를 생략하면 에러가 생길 때가 많습니다. 이것 역시 9장에서 설명합니다. 지금 당장은 for … in 루프라는 반복문이 있다는 걸 아는 정도로 충분합니다.</summary></entry><entry><title type="html">4.2.5 switch 문</title><link href="http://localhost:4000/javascript/2020/04/19/javascript70/" rel="alternate" type="text/html" title="4.2.5 switch 문" /><published>2020-04-19T22:38:00+09:00</published><updated>2020-04-19T22:38:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/19/javascript70</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/19/javascript70/">&lt;p&gt;if … else 문은 두 가지 중 하나를 선택하지만, switch 문은 조건 하나로 여러 가지 중 하나를 선택할 수 있습니다.&lt;br /&gt;
따라서 &lt;strong&gt;참 같은 값/거짓 같은 값&lt;/strong&gt;보다는 다양하게 나뉘는 조건을 사용합니다.&lt;br /&gt;
switch 문의 조건은 값으로 평가할 수 있는 &lt;strong&gt;표현식&lt;/strong&gt; 입니다.&lt;br /&gt;
switch 문의 문법은 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// expression을 평과한 결과가 value1 일 때 실행됩니다.&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;]&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// expression을 평가한 결과가 value2일 때 실행됩니다.&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;valueN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// expression을 평가한 결과가 valueN일 때 실행됩니다.&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;]&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// expression을 평가한 결과에 맞는 것이 없을 때 실행됩니다.&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;자바스크립트는 expression을 평가하고 그에 일치하는 첫 번째 case를 찾아서 break, return, continue, throw를 만나거나 swith 문이 끝날 때까지 문을 실행합니다.&lt;/p&gt;

&lt;p&gt;return과 continue, throw는 나중에 설명합니다.&lt;br /&gt;
복잡해 보이나요?&lt;br /&gt;
당신만 그렇게 느끼는 건 아닙니다.&lt;br /&gt;
&lt;strong&gt;switch 문은 그 미묘한 성격 때문에 실수를 초래한다는 비판을 받고 있습니다.&lt;/strong&gt;&lt;br /&gt;
초보 프로그래머는 switch 문을 쓰지 말라는 조언을 듣기도 합니다.&lt;br /&gt;
필자는 switch 문을 적재적소에 쓰기만 하면 매우 유용한 도구라고 생각합니다.&lt;br /&gt;
물론, 모든 도구가 그렇듯 주의하는 습관을 들여야 하고 알맞은 상황에 써야 합니다.&lt;/p&gt;

&lt;p&gt;아주 단순한 예제부터 시작해 봅시다.&lt;br /&gt;
&lt;strong&gt;토마스가 숫자에 대한 미신도 갖고 있다면 switch 문을 써서 토마스의 미신을 존중하도록 처리할 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;지금까지는 아주 단순합니다.&lt;br /&gt;
토마스는 주머니에서 꺼낸 돈이 11이나 13펜스면 돈을 걸지 않습니다.&lt;br /&gt;
&lt;strong&gt;하지만 13은 11보다 훨씬 불길한 숫자라서, 돈을 걸지 않는 것으로는 모자라고 1펜스를 기부해야 한다면 어떻게 해야 할까요?&lt;/strong&gt;&lt;br /&gt;
switch 문을 다음과 같이 바꾸면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;funds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1펜스를 기부합니다!&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
		&lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;totalBet이 13이면 1펜스를 기부합니다.&lt;br /&gt;
그리고 break 문이 없으므로 다음 case 11로 넘어가서 totalBet을 0으로 만듭니다.&lt;br /&gt;
이 코드는 유효한 자바스크립트이며, 우리가 원하는 일을 정확히 수행합니다.&lt;br /&gt;
&lt;strong&gt;하지만 약점도 있습니다.&lt;/strong&gt;&lt;br /&gt;
이 코드는 정확한데도 불구하고 &lt;strong&gt;실수처럼 보입니다.&lt;/strong&gt;&lt;br /&gt;
동료가 이 코드를 보고 break 문을 깜빡 잊은 거로 생각할 수도 있습니다.&lt;br /&gt;
그 동료는 break 문을 추가할 테고, 코드는 원하는 대로 동작하지 않게 될 겁니다.&lt;br /&gt;
&lt;strong&gt;break 없는 case 절이 장점보다는 단점이 더 많다고 생각하는 사람들이 많으니, 이 기능을 활용하고 싶다면 항상 주석을 남겨서 의도적으로 break 문을 생략했다는 것을 명확히 하십시오.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;default 는 특별한 경우입니다.&lt;br /&gt;
default 절은 일치하는 case 절이 없을 때 실행됩니다.&lt;br /&gt;
default 절은 필수는 아니지만, 보통 땐 마지막에 사용합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;funds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1 펜스를 기부합니다!&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;No superstition here!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;default 뒤에는 case가 없으므로 break 문이 없어도 되지만, &lt;strong&gt;항상 break 문을 사용하는 게 좋은 습관입니다.&lt;/strong&gt;&lt;br /&gt;
언제든 break 문을 주석 처리할 수 있으므로, 설령 break 없는 case 절을 사용하더라도 항상 break 문을 쓰는 습관을 들여야 합니다.&lt;br /&gt;
break 문이 필요한데도 쓰지 않았다면 매우 찾기 어려운 버그가 생길 수 있습니다.&lt;br /&gt;
&lt;strong&gt;이 규칙의 예외는 switch 문을 함수 안에서 쓸 때뿐입니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;return 문은 즉시 함수를 빠져나가므로 break 문 대신 쓸 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adjustBet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;자바스크립트는 공백이 몇 칸이든 신경 쓰지 않으므로 break나 return 문을 실행할 문과 같은 행에 넣으면 switch 문을 더 간결하게 만들 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalBet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;11펜스와 13펜스일 때 같은 일을 하지만, 여기서는 break 없는 case 절을 쓰지 않았습니다.&lt;br /&gt;
&lt;strong&gt;이렇게 switch 문을 줄바꿈 없이 쓸 때는 case마다 실행문이 하나씩 있고, break 없는 case 절을 쓰지 않아야 의도가 명확하게 드러납니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;switch 문은 표현식 하나로 여러 가지 옵션 중에서 하나를 선택해야 할 때 아주 유용합니다.&lt;br /&gt;
그렇긴 하지만, 9장에서 &lt;strong&gt;동적 디스패치(dynamic dispatch) 에 대해 배우고 나면 switch 문을 그리 많이 쓰지는 않게 될 겁니다.&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">if … else 문은 두 가지 중 하나를 선택하지만, switch 문은 조건 하나로 여러 가지 중 하나를 선택할 수 있습니다. 따라서 참 같은 값/거짓 같은 값보다는 다양하게 나뉘는 조건을 사용합니다. switch 문의 조건은 값으로 평가할 수 있는 표현식 입니다. switch 문의 문법은 다음과 같습니다. switch (expression) { case value1 : // expression을 평과한 결과가 value1 일 때 실행됩니다. [break;] case value2 : // expression을 평가한 결과가 value2일 때 실행됩니다. [break;] ... case valueN : // expression을 평가한 결과가 valueN일 때 실행됩니다. [break;] default: // expression을 평가한 결과에 맞는 것이 없을 때 실행됩니다. [break;] } 자바스크립트는 expression을 평가하고 그에 일치하는 첫 번째 case를 찾아서 break, return, continue, throw를 만나거나 swith 문이 끝날 때까지 문을 실행합니다. return과 continue, throw는 나중에 설명합니다. 복잡해 보이나요? 당신만 그렇게 느끼는 건 아닙니다. switch 문은 그 미묘한 성격 때문에 실수를 초래한다는 비판을 받고 있습니다. 초보 프로그래머는 switch 문을 쓰지 말라는 조언을 듣기도 합니다. 필자는 switch 문을 적재적소에 쓰기만 하면 매우 유용한 도구라고 생각합니다. 물론, 모든 도구가 그렇듯 주의하는 습관을 들여야 하고 알맞은 상황에 써야 합니다. 아주 단순한 예제부터 시작해 봅시다. 토마스가 숫자에 대한 미신도 갖고 있다면 switch 문을 써서 토마스의 미신을 존중하도록 처리할 수 있습니다. switch (totalBet) { case 7: totalBet = funds; break; case 11: totalBet = 0; break; case 13: totalBet = 0; break; case 21: totalBet = 21; break; } 지금까지는 아주 단순합니다. 토마스는 주머니에서 꺼낸 돈이 11이나 13펜스면 돈을 걸지 않습니다. 하지만 13은 11보다 훨씬 불길한 숫자라서, 돈을 걸지 않는 것으로는 모자라고 1펜스를 기부해야 한다면 어떻게 해야 할까요? switch 문을 다음과 같이 바꾸면 됩니다. switch(totalBet) { case 7: totalBet = funds; break; case 13: funds = funds - 1; // 1펜스를 기부합니다! case 11: totalBet = 0; break; case 21: totalBet = 21; break; } totalBet이 13이면 1펜스를 기부합니다. 그리고 break 문이 없으므로 다음 case 11로 넘어가서 totalBet을 0으로 만듭니다. 이 코드는 유효한 자바스크립트이며, 우리가 원하는 일을 정확히 수행합니다. 하지만 약점도 있습니다. 이 코드는 정확한데도 불구하고 실수처럼 보입니다. 동료가 이 코드를 보고 break 문을 깜빡 잊은 거로 생각할 수도 있습니다. 그 동료는 break 문을 추가할 테고, 코드는 원하는 대로 동작하지 않게 될 겁니다. break 없는 case 절이 장점보다는 단점이 더 많다고 생각하는 사람들이 많으니, 이 기능을 활용하고 싶다면 항상 주석을 남겨서 의도적으로 break 문을 생략했다는 것을 명확히 하십시오. default 는 특별한 경우입니다. default 절은 일치하는 case 절이 없을 때 실행됩니다. default 절은 필수는 아니지만, 보통 땐 마지막에 사용합니다. switch(totalBet) { case 7: totalBet = funds; break; case 13: funds = funds - 1; // 1 펜스를 기부합니다! case 11: totalBet = 0; break; case 21: totalBet = 21; break; default: console.log(&quot;No superstition here!&quot;); break; } default 뒤에는 case가 없으므로 break 문이 없어도 되지만, 항상 break 문을 사용하는 게 좋은 습관입니다. 언제든 break 문을 주석 처리할 수 있으므로, 설령 break 없는 case 절을 사용하더라도 항상 break 문을 쓰는 습관을 들여야 합니다. break 문이 필요한데도 쓰지 않았다면 매우 찾기 어려운 버그가 생길 수 있습니다. 이 규칙의 예외는 switch 문을 함수 안에서 쓸 때뿐입니다. return 문은 즉시 함수를 빠져나가므로 break 문 대신 쓸 수 있습니다. function adjustBet (totalBet, funds) { switch(totalBet) { case 7: return funds; case 13: return 0; default: return totalBet; } } 자바스크립트는 공백이 몇 칸이든 신경 쓰지 않으므로 break나 return 문을 실행할 문과 같은 행에 넣으면 switch 문을 더 간결하게 만들 수 있습니다. switch (totalBet) { case 7: totalBet = funds; break; case 11: totalBet = 0; break; case 13: totalBet = 0; break; case 21: totalBet = 21; break; } 11펜스와 13펜스일 때 같은 일을 하지만, 여기서는 break 없는 case 절을 쓰지 않았습니다. 이렇게 switch 문을 줄바꿈 없이 쓸 때는 case마다 실행문이 하나씩 있고, break 없는 case 절을 쓰지 않아야 의도가 명확하게 드러납니다. switch 문은 표현식 하나로 여러 가지 옵션 중에서 하나를 선택해야 할 때 아주 유용합니다. 그렇긴 하지만, 9장에서 동적 디스패치(dynamic dispatch) 에 대해 배우고 나면 switch 문을 그리 많이 쓰지는 않게 될 겁니다.</summary></entry><entry><title type="html">4.2.4 for 루프의 다른 패턴</title><link href="http://localhost:4000/javascript/2020/04/19/javascript69/" rel="alternate" type="text/html" title="4.2.4 for 루프의 다른 패턴" /><published>2020-04-19T17:53:00+09:00</published><updated>2020-04-19T17:53:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/19/javascript69</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/19/javascript69/">&lt;p&gt;쉼표 연산자를 쓰면 초기화와 마지막 표현식에 여러 문을 결합할 수 있습니다.&lt;br /&gt;
예를 들어 다음 &lt;strong&gt;for 루프&lt;/strong&gt;는 피보나치 수열의 숫자 중 처음 여덟 개를 출력합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 예제에서는 초기화를 하면서 변수 temp와 i, j를 동시에 선언했고, 마지막 표현식에서 세 변수를 동시에 조작했습니다.&lt;br /&gt;
for 루프의 제어부에 아무것도 쓰지 않으면 무한 루프가 만들어집니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(;;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;I will repeat forever!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;for 루프에서 조건을 생략하면 항상 true로 평가되므로 루프를 빠져나갈 수 없습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;for 루프는 보통 정수 인덱스를 늘이거나 줄이면서 반복하지만, 꼭 그래야 하는 건 아닙니다.&lt;br /&gt;
어떤 표현식이든 쓸 수 있습니다.&lt;br /&gt;
다음 예제를 보십시오.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 숫자가 들어있는 문자열&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 문자열의 길이를 조건으로 썼습니다.&lt;/span&gt;
                                    &lt;span class=&quot;c1&quot;&gt;// 여기서 사용한 for 루프 마지막에 세미콜론이 없으면&lt;/span&gt;
																    &lt;span class=&quot;c1&quot;&gt;// 에러가 일어납니다.&lt;/span&gt;
																		
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 제어 변수가 정수가 아니어도 괜찮습니다.&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isBroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 조건에 객체 프로퍼티를 썼습니다.&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Still playing!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;for 루프는 모두 while 루프로 고쳐 쓸 수 있습니다.&lt;br /&gt;
예를 들어 다음 코드를 보십시오.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;final&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;statement&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;앞에서 본 코드는 다음 코드와 똑같이 동작합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;statement&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;final&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;for 루프를 while 루프를 바꿀 수 있다는 것뿐이지, 그렇게 해야 한다는 건 아닙니다.&lt;br /&gt;
&lt;strong&gt;for 루프의 장점&lt;/strong&gt;은 &lt;strong&gt;루프의 제어부가 첫 번째 행에 모여 있어서 일목요연하게 파악할 수 있다&lt;/strong&gt;는 겁니다.&lt;br /&gt;
또한, &lt;strong&gt;for 루프에서는 let으로 초기화한 변수가 for 루프 안에서만 유효하다는 장점&lt;/strong&gt;도 있습니다(7장에서 더 설명합니다).&lt;br /&gt;
이런 for문을 while 문으로 바꾸면, 컨트롤 변수는 루프 바깥에서도 볼 수 있게 됩니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">쉼표 연산자를 쓰면 초기화와 마지막 표현식에 여러 문을 결합할 수 있습니다. 예를 들어 다음 for 루프는 피보나치 수열의 숫자 중 처음 여덟 개를 출력합니다. for (let temp, i =0, j=1; j&amp;lt;30; temp = i, i = j, j = i+temp) console.log(j); 이 예제에서는 초기화를 하면서 변수 temp와 i, j를 동시에 선언했고, 마지막 표현식에서 세 변수를 동시에 조작했습니다. for 루프의 제어부에 아무것도 쓰지 않으면 무한 루프가 만들어집니다. for(;;) console.log(&quot;I will repeat forever!&quot;); for 루프에서 조건을 생략하면 항상 true로 평가되므로 루프를 빠져나갈 수 없습니다. for 루프는 보통 정수 인덱스를 늘이거나 줄이면서 반복하지만, 꼭 그래야 하는 건 아닙니다. 어떤 표현식이든 쓸 수 있습니다. 다음 예제를 보십시오. let s = '3'; // 숫자가 들어있는 문자열 for(; s.length&amp;lt;10; s = ' ' + s); // 문자열의 길이를 조건으로 썼습니다. // 여기서 사용한 for 루프 마지막에 세미콜론이 없으면 // 에러가 일어납니다. for (let x= 0.2; x&amp;lt;3.0; x +=0.2) // 제어 변수가 정수가 아니어도 괜찮습니다. console.log(x); for (; !player.isBroke;) // 조건에 객체 프로퍼티를 썼습니다. console.log(&quot;Still playing!&quot;); for 루프는 모두 while 루프로 고쳐 쓸 수 있습니다. 예를 들어 다음 코드를 보십시오. for([initialization]; [condition]; [final-expression]) statement 앞에서 본 코드는 다음 코드와 똑같이 동작합니다. [initialization] while([condition]) { statement [final-expression] } for 루프를 while 루프를 바꿀 수 있다는 것뿐이지, 그렇게 해야 한다는 건 아닙니다. for 루프의 장점은 루프의 제어부가 첫 번째 행에 모여 있어서 일목요연하게 파악할 수 있다는 겁니다. 또한, for 루프에서는 let으로 초기화한 변수가 for 루프 안에서만 유효하다는 장점도 있습니다(7장에서 더 설명합니다). 이런 for문을 while 문으로 바꾸면, 컨트롤 변수는 루프 바깥에서도 볼 수 있게 됩니다.</summary></entry></feed>