<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-02-11T08:22:57+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">LHJ</title><subtitle>coding blog</subtitle><entry><title type="html">Jekyll 설치 및 세팅</title><link href="http://localhost:4000/jekyll/2020/02/11/jekyll02/" rel="alternate" type="text/html" title="Jekyll 설치 및 세팅" /><published>2020-02-11T08:00:00+09:00</published><updated>2020-02-11T08:00:00+09:00</updated><id>http://localhost:4000/jekyll/2020/02/11/jekyll02</id><content type="html" xml:base="http://localhost:4000/jekyll/2020/02/11/jekyll02/">&lt;h2 id=&quot;jekyll-설치-및-세팅하기&quot;&gt;Jekyll 설치 및 세팅하기&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/img05.jpg&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll&lt;/code&gt; 명령어로 jekyll을 설치합니다.&lt;br /&gt;
jekyll template 라는 검색어를 통해 마음에 드는 template을 다운받습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;http://jekyllthemes.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;원하는 template를 다운받고 압축을 푼 후, gemfile을 제외한 나머지 파일을 모두 jekyll root 폴더로 복붙합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/img07.jpg&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 이미지는 다운받은 template의 gemfile 내용입니다.&lt;br /&gt;
확인하면 필요 모듈이 적혀있습니다.&lt;br /&gt;
해당 내용을 내 jekyll root 폴더에 있는 gemfile에 옮겨 적습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/img06.jpg&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; 란 명령어로 server를 작동시킵니다.&lt;br /&gt;
그리고 &lt;a href=&quot;http://localhost:4000&quot;&gt;localhost:4000&lt;/a&gt; 으로 접속합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/img08.jpg&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그럼 위와 같은 template이 적용된 jekyll 블로그로 접속될 것입니다.&lt;br /&gt;
&lt;strong&gt;admin&lt;/strong&gt; 페이지로 접속하기 위해선&lt;br /&gt;
gemfile 파일에 다음 문구를 추가합니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;gem 'jekyll-admin', group:jekyll_plugins&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/img09.jpg&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; 로 다시 서버를 실행시키고&lt;br /&gt;
&lt;a href=&quot;http://localhost:4000/admin&quot;&gt;localhost:4000/admin&lt;/a&gt; 페이지로 접속합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/img10.jpg&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그럼 이러한 admin 페이지로 접속이 가능해집니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">Jekyll 설치 및 세팅하기 gem install jekyll 명령어로 jekyll을 설치합니다. jekyll template 라는 검색어를 통해 마음에 드는 template을 다운받습니다. http://jekyllthemes.org/ 원하는 template를 다운받고 압축을 푼 후, gemfile을 제외한 나머지 파일을 모두 jekyll root 폴더로 복붙합니다. 위 이미지는 다운받은 template의 gemfile 내용입니다. 확인하면 필요 모듈이 적혀있습니다. 해당 내용을 내 jekyll root 폴더에 있는 gemfile에 옮겨 적습니다. 그리고 jekyll serve 란 명령어로 server를 작동시킵니다. 그리고 localhost:4000 으로 접속합니다. 그럼 위와 같은 template이 적용된 jekyll 블로그로 접속될 것입니다. admin 페이지로 접속하기 위해선 gemfile 파일에 다음 문구를 추가합니다. gem 'jekyll-admin', group:jekyll_plugins 그리고 jekyll serve 로 다시 서버를 실행시키고 localhost:4000/admin 페이지로 접속합니다. 그럼 이러한 admin 페이지로 접속이 가능해집니다.</summary></entry><entry><title type="html">Jekyll 사용환경 만들기</title><link href="http://localhost:4000/jekyll/2020/02/10/jekyll01/" rel="alternate" type="text/html" title="Jekyll 사용환경 만들기" /><published>2020-02-10T22:00:00+09:00</published><updated>2020-02-10T22:00:00+09:00</updated><id>http://localhost:4000/jekyll/2020/02/10/jekyll01</id><content type="html" xml:base="http://localhost:4000/jekyll/2020/02/10/jekyll01/">&lt;h2 id=&quot;jekyll-사용환경-만들기&quot;&gt;Jekyll 사용환경 만들기&lt;/h2&gt;

&lt;h3 id=&quot;1-ruby-다운로드&quot;&gt;1. Ruby 다운로드&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/img00.jpg&quot; alt=&quot;이미지&quot; /&gt;
&lt;img src=&quot;/assets/img/img01.jpg&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;먼저 Ruby를 설치해 Jekyll 을 사용할 수 있는 환경을 만들어야합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://rubyinstaller.org/&quot;&gt;https://rubyinstaller.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;위 사이트로 접속해 Ruby를 다운받으십시오.&lt;/p&gt;

&lt;h3 id=&quot;2-ruby-설치&quot;&gt;2. Ruby 설치&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/img02.jpg&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;UTF-8 엔코딩에 체크한 후&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/img03.jpg&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치를 진행합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/img04.jpg&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 Ruby가 제대로 설치되었는지 &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby -v&lt;/code&gt; 명령어를 통해 확인해봅니다.&lt;br /&gt;
위는 git bash 창입니다. &lt;br /&gt;
&lt;strong&gt;Ruby를 설치했어도 &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby -v&lt;/code&gt; 명령어가 &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby: command not found&lt;/code&gt;라는 오류가 발생하면서 실행이 안될 수도 있습니다.&lt;/strong&gt;&lt;br /&gt;
그럴 때는 git bash창 말고 &lt;strong&gt;cmd&lt;/strong&gt; 창을 이용합니다.&lt;br /&gt;
그러면 &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby -v&lt;/code&gt; 명령어를 제대로 인식할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/img04-0.jpg&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;cmd 창을 활용하는 경우는 해당 드라이브로 가는 명령어(&lt;code class=&quot;highlighter-rouge&quot;&gt;드라이브이름:&lt;/code&gt;), 폴더 옮기는 명령어 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd (폴더명)&lt;/code&gt; 등을 이용해 Jekyll 모듈을 사용할 root 폴더로 직접 이동해야됩니다.&lt;/p&gt;

&lt;p&gt;위와 같이 ruby 설치와 ruby가 제대로 설치되었는지 확인 작업까지 마치면 Jekyll 사용환경이 완성된 겁니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">Jekyll 사용환경 만들기 1. Ruby 다운로드 먼저 Ruby를 설치해 Jekyll 을 사용할 수 있는 환경을 만들어야합니다. https://rubyinstaller.org/ 위 사이트로 접속해 Ruby를 다운받으십시오. 2. Ruby 설치 UTF-8 엔코딩에 체크한 후 설치를 진행합니다. 그리고 Ruby가 제대로 설치되었는지 ruby -v 명령어를 통해 확인해봅니다. 위는 git bash 창입니다. Ruby를 설치했어도 ruby -v 명령어가 ruby: command not found라는 오류가 발생하면서 실행이 안될 수도 있습니다. 그럴 때는 git bash창 말고 cmd 창을 이용합니다. 그러면 ruby -v 명령어를 제대로 인식할 수도 있습니다. cmd 창을 활용하는 경우는 해당 드라이브로 가는 명령어(드라이브이름:), 폴더 옮기는 명령어 cd (폴더명) 등을 이용해 Jekyll 모듈을 사용할 root 폴더로 직접 이동해야됩니다. 위와 같이 ruby 설치와 ruby가 제대로 설치되었는지 확인 작업까지 마치면 Jekyll 사용환경이 완성된 겁니다.</summary></entry><entry><title type="html">Jekyll(지킬) 이란?</title><link href="http://localhost:4000/jekyll/2020/02/10/jekyll00/" rel="alternate" type="text/html" title="Jekyll(지킬) 이란?" /><published>2020-02-10T21:30:00+09:00</published><updated>2020-02-10T21:30:00+09:00</updated><id>http://localhost:4000/jekyll/2020/02/10/jekyll00</id><content type="html" xml:base="http://localhost:4000/jekyll/2020/02/10/jekyll00/">&lt;h2 id=&quot;jekyll-이란&quot;&gt;Jekyll 이란?&lt;/h2&gt;

&lt;p&gt;평범한 텍스트 파일을 정적 웹사이트 또는 블로그로 변신시켜 주는 모듈입니다.&lt;/p&gt;

&lt;h3 id=&quot;특징&quot;&gt;특징&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;심플함&lt;/strong&gt;&lt;br /&gt;
데이터베이스도 댓글 관리도, 성가신 업데이트도 없습니다. 오직 당신의 컨텐츠뿐입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;정적&lt;/strong&gt;&lt;br /&gt;
Markdown (또는 Textile), Liquid, HTML &amp;amp; CSS 를 넣으면, 당장 게시할 수 있는 사이트가 완성됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;블로그 지향적&lt;/strong&gt;&lt;br /&gt;
고유주소, 카테고리, 페이지, 포스트, 사용자 레이아웃 등의 기능이 기본적으로 포함되어 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">Jekyll 이란? 평범한 텍스트 파일을 정적 웹사이트 또는 블로그로 변신시켜 주는 모듈입니다. 특징 심플함 데이터베이스도 댓글 관리도, 성가신 업데이트도 없습니다. 오직 당신의 컨텐츠뿐입니다. 정적 Markdown (또는 Textile), Liquid, HTML &amp;amp; CSS 를 넣으면, 당장 게시할 수 있는 사이트가 완성됩니다. 블로그 지향적 고유주소, 카테고리, 페이지, 포스트, 사용자 레이아웃 등의 기능이 기본적으로 포함되어 있습니다.</summary></entry><entry><title type="html">JavaScript00</title><link href="http://localhost:4000/javascript/2020/02/10/javascript00/" rel="alternate" type="text/html" title="JavaScript00" /><published>2020-02-10T19:34:19+09:00</published><updated>2020-02-10T19:34:19+09:00</updated><id>http://localhost:4000/javascript/2020/02/10/javascript00</id><content type="html" xml:base="http://localhost:4000/javascript/2020/02/10/javascript00/">&lt;p&gt;안녕&lt;/p&gt;</content><author><name></name></author><summary type="html">안녕</summary></entry><entry><title type="html">포스트1</title><link href="http://localhost:4000/jekyll/update/2020/02/10/welcome-to-jekyll/" rel="alternate" type="text/html" title="포스트1" /><published>2020-02-10T01:32:09+09:00</published><updated>2020-02-10T01:32:09+09:00</updated><id>http://localhost:4000/jekyll/update/2020/02/10/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2020/02/10/welcome-to-jekyll/">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. Jekyll requires blog post files to be named according to the following format: YEAR-MONTH-DAY-title.MARKUP Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts &quot;Hi, #{name}&quot; end print_hi('Tom') #=&amp;gt; prints 'Hi, Tom' to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.</summary></entry><entry><title type="html">Hello, Jekyll and TtskchTheme</title><link href="http://localhost:4000/2015/01/01/hello/" rel="alternate" type="text/html" title="Hello, Jekyll and TtskchTheme" /><published>2015-01-01T00:00:00+09:00</published><updated>2015-01-01T00:00:00+09:00</updated><id>http://localhost:4000/2015/01/01/hello</id><content type="html" xml:base="http://localhost:4000/2015/01/01/hello/">&lt;p&gt;You can use most of standard Markdown features.&lt;/p&gt;

&lt;h2 id=&quot;list&quot;&gt;List&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;foo&lt;/li&gt;
  &lt;li&gt;bar
    &lt;ul&gt;
      &lt;li&gt;indentation
        &lt;ul&gt;
          &lt;li&gt;nesting indentation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;indentation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;buz&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;quote&quot;&gt;Quote&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;quote&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;nesting quote&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;quote&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;strikethrough&quot;&gt;Strikethrough&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;Mistaken text.&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;syntax-highlighting&quot;&gt;Syntax highlighting&lt;/h2&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello, World!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;tables&quot;&gt;Tables&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;First Header&lt;/th&gt;
      &lt;th&gt;Second Header&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Content Cell&lt;/td&gt;
      &lt;td&gt;Content Cell&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Content Cell&lt;/td&gt;
      &lt;td&gt;Content Cell&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;emoji&quot;&gt;Emoji&lt;/h2&gt;

&lt;p&gt;You can use GitHub flavored emoji :+1:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br /&gt;
It’s not a very good idea to use emoji before &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; because jekyll can’t render emoji in the excerpted content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;see-also&quot;&gt;See also&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="hello" /><category term="jekyll" /><category term="theme" /><summary type="html">You can use most of standard Markdown features. List foo bar indentation nesting indentation indentation buz</summary></entry></feed>