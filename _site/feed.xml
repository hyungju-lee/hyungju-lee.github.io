<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LEE HYUNG JU</title>
    <description>Jekyll Blog</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 29 Sep 2020 15:00:20 +0900</pubDate>
    <lastBuildDate>Tue, 29 Sep 2020 15:00:20 +0900</lastBuildDate>
    <generator>Jekyll v4.0.1</generator>
    
      <item>
        <title>2.1 Types for JavaScript's primitive values</title>
        <description>&lt;h2 id=&quot;21-types-for-javascripts-primitive-values&quot;&gt;2.1 Types for JavaScript’s primitive values&lt;/h2&gt;

&lt;p&gt;JavaScript에는 여러 가지 기본 유형이 있습니다. :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Booleans&lt;/li&gt;
  &lt;li&gt;Strings&lt;/li&gt;
  &lt;li&gt;Numbers&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;void&lt;/code&gt; in Flow types)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;primitive values(원시값)은 언어에서 literal 값으로 나타납니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;또는 개체 생성자로 나타납니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;booleans&quot;&gt;Booleans&lt;/h2&gt;

&lt;p&gt;Booleans는 자바스크립트에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; 값입니다.&lt;br /&gt;
JavaScript는 또한 암시 적으로 다른 유형의 값을 부울로 변환 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 42 =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;&quot; =&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Flow는 이러한 변환을 이해하고 if 문의 일부 및 기타 유형의 표현식으로 허용합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Boolean 유형과 비교할 땐 Boolean 유형이 아닌 값을 변환하여 적어야합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Boolean과 boolean은 서로 다른 유형입니다.&lt;br /&gt;
boolean은 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;와 같은 리터럴 값 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;a === b&lt;/code&gt;와 같은 표현식의 결과입니다.&lt;br /&gt;
Boolean은 전역 &lt;code class=&quot;highlighter-rouge&quot;&gt;new Boolean(x)&lt;/code&gt; 생성자가 만든 래퍼 객체입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;number&quot;&gt;Number&lt;/h2&gt;

&lt;p&gt;다른 많은 언어와 달리 자바스크립트에는 한 가지 유형의 숫자만 있습니다.&lt;br /&gt;
이러한 값은 42 또는 3.14로 나타날 수 있습니다.&lt;br /&gt;
자바스크립트는 또한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Infinity&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;을 숫자로 간주합니다.&lt;br /&gt;
숫자 유형은 자바스크립트가 숫자로 간주하는 모든 것을 캡쳐합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Number와 number는 서로 다른 유형입니다.&lt;br /&gt;
number는 42 또는 3.14 처럼 리터럴 값이거나 &lt;code class=&quot;highlighter-rouge&quot;&gt;paseFloat(x)&lt;/code&gt;와 같은 표현식의 결과입니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt;는 전역 &lt;code class=&quot;highlighter-rouge&quot;&gt;new Number(x)&lt;/code&gt; 생성자에 의해 생성된 래퍼 객체입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;string&quot;&gt;String&lt;/h2&gt;

&lt;p&gt;문자열은 자바스크립트에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;''&lt;/code&gt;로 감싸진 데이터를 말합니다.&lt;br /&gt;
JavaScript는 다른 유형의 값을 연결하여 암시적으로 문자열로 변환합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;foo42&quot;&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;foo[object Object]&quot;&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;foofoo&quot;&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;foo&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;foo[object object]&quot;&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;foo&quot;&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;{}&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;String과 string은 서로 다른 유형임을 기억하십시오.&lt;/p&gt;

&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 29 Sep 2020 10:03:00 +0900</pubDate>
        <link>http://localhost:4000/js/2020/09/29/javascript2-1.html</link>
        <guid isPermaLink="true">http://localhost:4000/js/2020/09/29/javascript2-1.html</guid>
        
        
        <category>js</category>
        
      </item>
    
      <item>
        <title>플러그인</title>
        <description>&lt;h2 id=&quot;플러그인&quot;&gt;플러그인&lt;/h2&gt;

&lt;p&gt;웹팩에서 알아야할 마지막 기본 개념이 플러그인이다.&lt;br /&gt;
&lt;strong&gt;로더가 파일 단위로 처리하는 반면 플러그인은 번들된 결과물을 처리한다.&lt;/strong&gt;&lt;br /&gt;
번들된 자바스크립트를 &lt;strong&gt;난독화&lt;/strong&gt; 한다거나 &lt;strong&gt;특정 텍스트를 추출&lt;/strong&gt;하는 용도로 사용한다.&lt;/p&gt;

&lt;p&gt;이것도 사용하기에 앞서 동작 원리를 이해하기 위해 플러그인을 직접 만들어 보자.&lt;/p&gt;

&lt;h2 id=&quot;커스텀-플러그인-만들기&quot;&gt;커스텀 플러그인 만들기&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://webpack.js.org/contribute/writing-a-plugin/#creating-a-plugin&quot; target=&quot;_blank&quot;&gt;커스텀 플러그인 설명 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;웹팩 문서의 &lt;strong&gt;Writing a plugin&lt;/strong&gt;을 보면 클래스로 플러그인을 정의하도록 한다.&lt;br /&gt;
헬로월드 코드를 가져다 그대로 실행해보자.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// my-webpack-plugin.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyWebpackPlugin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;My Plugin&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;MyPlugin: done&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyWebpackPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;로더와 다르게 플러그인은 클래스로 제작한다.&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt; 함수를 구현하면 되는데 이 코드에서는 인자로 받은 compiler의 tap 함수를 사용했다.&lt;br /&gt;
플러그인 작업이 완료되는(done) 시점에 로그를 찍는 코드인 것 같다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;MyWebpackPlugin&lt;/code&gt; 클래스를 만들었다.&lt;br /&gt;
클래스의 맨 앞글자는 보통 대문자로 쓴다.&lt;br /&gt;
그리고 이 플러그인의 메서드 &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt;를 하나 만들었다.&lt;br /&gt;
그리고 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt; 메서드를 만들게되면 웹팩은 &lt;strong&gt;compiler&lt;/strong&gt;라는 객체를 파라미터로 주입해준다.&lt;/p&gt;

&lt;p&gt;그러면 이 &lt;strong&gt;compiler&lt;/strong&gt;라는 객체에 &lt;code class=&quot;highlighter-rouge&quot;&gt;hooks.done.tap&lt;/code&gt; 으로 접근할 수 있는데, 여기에 인자를 두개 넣었다.&lt;br /&gt;
‘My Plugin’이라는 인자와 콜백함수를 전달한다.&lt;br /&gt;
이 콜백함수는 플러그인이 완료되었을 때 동작하는 플러그인이라고 보시면 된다.&lt;br /&gt;
플러그인이 잘 동작했는지를 알기위해 console.log에 MyPlugin: done 이라는 문자열을 전달했다.&lt;/p&gt;

&lt;p&gt;그럼 이 커스텀 플러그인을 웹팩 설정에 추가해보자.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// webpack.config.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyWebpackPlugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./my-webpack-plugin&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;development&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./src/app.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./dist&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[name].js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;css$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                    &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;style-loader&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;css-loader&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;png|jpg|gif|svg&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;url-loader&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;publicPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./dist&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;[name].[ext]?[hash]&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 20kb&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyWebpackPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/node/webpack2/image45.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 콘솔로 찍히는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;로더&lt;/strong&gt;가 src 폴더에 있는 여러개 파일에 대해서 ‘각각’ 실행했다면, 플러그인은 이를 하나로 합쳐놓은 번들 파일에 대해서 딱 한번 실행되는 것을 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;번들된-결과-처리하기&quot;&gt;번들된 결과 처리하기&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://webpack.js.org/plugins/banner-plugin/&quot; target=&quot;_blank&quot;&gt;웹팩 내장 플러그인 - BannerPlugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그러면 어떻게 번들된 결과물에 접근할 수 있을까?&lt;br /&gt;
웹팩 내장 플러그인 &lt;strong&gt;BannerPlugin 코드&lt;/strong&gt;를 참고하자.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// my-webpack-plugin.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyWebpackPlugin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 플러그인이 종료되었을 때 실행되는 함수&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// compiler.hooks.done.tap('My Plugin', stats =&amp;gt; {&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//     console.log('MyPlugin: done');&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// })&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// compiler.plugin()&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;main.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// compilation.assets['main.js'].source = () =&amp;gt; {&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//    const banner = [&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//        '/**',&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//        ' * 이것은 BannerPlugin이 처리한 결과입니다.',&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//        ' * Build Date: 2019-10-10',&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//        ' */'&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//    ].join('\n');&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//    return banner + '\n\n' + source;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// }&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyWebpackPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;compiler 객체에 plugin이라는 메서드(함수)가 있고 인자로 ‘emit’ 이라는 문자열과 콜백 함수를 넘겨준다.&lt;br /&gt;
콜백함수가 실행될 때 &lt;strong&gt;번들된 결과물에 접근할 수 있는 것이다.&lt;/strong&gt;&lt;br /&gt;
이 콜백 함수는 compilation, callback 이렇게 두 개의 인자를 받는데,&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;compilation&lt;/code&gt;를 통해서 웹팩이 번들링한 결과물에 접근할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;compilation.assets('main.js').source();&lt;/code&gt; 그 중에 main.js 파일의 소스 코드를 가져오는 함수이다.&lt;br /&gt;
일단 위와 같이 주석처리를 한 다음에 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt;를 실행해보자.&lt;/p&gt;

&lt;p&gt;그러면 번들된 &lt;code class=&quot;highlighter-rouge&quot;&gt;main.js&lt;/code&gt;의 내용이 콘솔창에 뜬다.&lt;br /&gt;
너무 길어서 일부만 적었다.&lt;br /&gt;
아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;main.js&lt;/code&gt;의 내용이 쭈르륵 뜬다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm run build

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; webpack-middle-class@1.0.0 build D:&lt;span class=&quot;se&quot;&gt;\w&lt;/span&gt;ebpack&lt;span class=&quot;se&quot;&gt;\w&lt;/span&gt;ebpack-middle-class
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; webpack

&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;node:13228&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; DeprecationWarning: Tapable.plugin is deprecated. Use new API on &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.hooks&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; instead
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/ &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;modules&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; // webpackBootstrap
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        // The module cache
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        var installedModules &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        // The require &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        &lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;__webpack_require__&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;moduleId&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                // Check &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;module is &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;cache
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;installedModules[moduleId]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                        &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;installedModules[moduleId].exports&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                // Create a new module &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;and put it into the cache&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                var module &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; installedModules[moduleId] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                        i: moduleId,
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                        l: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                        exports: &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                // Execute the module &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                modules[moduleId].call&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;module.exports, module, module.exports, __webpack_require__&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                // Flag the module as loaded
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                module.l &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                // Return the exports of the module
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;module.exports&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        // expose the modules object &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;__webpack_modules__&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        __webpack_require__.m &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; modules&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        // expose the module cache
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        __webpack_require__.c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; installedModules&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        // define getter &lt;span class=&quot;k&quot;&gt;function for &lt;/span&gt;harmony exports
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        __webpack_require__.d &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;exports, name, getter&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;__webpack_require__.o&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;exports, name&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                        Object.defineProperty&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;exports, name, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; enumerable: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;, get: getter &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        // define __esModule on exports
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        __webpack_require__.r &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;exports&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;typeof Symbol &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'undefined'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; Symbol.toStringTag&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                        Object.defineProperty&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;exports, Symbol.toStringTag, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; value: &lt;span class=&quot;s1&quot;&gt;'Module'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                Object.defineProperty&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;exports, &lt;span class=&quot;s1&quot;&gt;'__esModule'&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; value: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        // create a fake namespace object
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        // mode &amp;amp; 1: value is a module &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;, require it
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        // mode &amp;amp; 2: merge all properties of value into the ns
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        // mode &amp;amp; 4: &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;value when already ns object
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        // mode &amp;amp; 8|1: behave like require
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        __webpack_require__.t &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;value, mode&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mode &amp;amp; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; value &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; __webpack_require__&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mode &amp;amp; 8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;value&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;mode &amp;amp; 4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; typeof value &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'object'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; value &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; value.__esModule&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;value&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                var ns &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Object.create&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;null&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                __webpack_require__.r&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ns&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                Object.defineProperty&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ns, &lt;span class=&quot;s1&quot;&gt;'default'&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; enumerable: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;, value: value &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mode &amp;amp; 2 &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; typeof value &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'string'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;var key &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;value&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; __webpack_require__.d&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ns, key, &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;value[key]&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;.bind&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;null, key&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/                &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;ns&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
/&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;/        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 &lt;code class=&quot;highlighter-rouge&quot;&gt;compilation&lt;/code&gt; 객체를 이용해서 웹팩이 번들링한 결과물에 접근할 수 있다라는 사실을 알게됐다.&lt;br /&gt;
우리는 이걸 웹팩 내장 플러그인 중 하나인 &lt;strong&gt;BannerPlugin&lt;/strong&gt;을 통해 알아냈습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;그럼 이번엔 이걸 한번 해보자.&lt;br /&gt;
번들한 결과물에 내용을 더 추가해보자.&lt;br /&gt;
웹팩으로 빌드한 시간을 주석으로 달아놓는 로직을 추가해보도록 하자.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// my-webpack-plugin.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyWebpackPlugin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 플러그인이 종료되었을 때 실행되는 함수&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// compiler.hooks.done.tap('My Plugin', stats =&amp;gt; {&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//     console.log('MyPlugin: done');&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// })&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// compiler.plugin()&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;main.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;compilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;main.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;banner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                    &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/**&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; * 이것은 BannerPlugin이 처리한 결과입니다.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; * Build Date: 2019-10-10&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; */&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;banner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyWebpackPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;compilation.assets&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;main.js&lt;/code&gt;라는 키를 통해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;source()&lt;/code&gt; 함수에 접근할 수 있었다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;main.js&lt;/code&gt; 파일이 갖게될 소스 내용을 &lt;code class=&quot;highlighter-rouge&quot;&gt;source()&lt;/code&gt; 메서드로 얻어낼 수 있었다.&lt;/p&gt;

&lt;p&gt;그런데 그 아래 다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;source()&lt;/code&gt;라는 메서드를 &lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;재정의&lt;/span&gt;&lt;/strong&gt;했다.&lt;br /&gt;
그래서 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; 메서드가 하는 역할은..&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;banner&lt;/code&gt;를 하나 만들고, 이렇게 만든 &lt;code class=&quot;highlighter-rouge&quot;&gt;banner&lt;/code&gt; 문자열 플러스(+) 줄바꿈하고(‘\n\n’) 다시 원본 source를 합한(+) 이 문자열을 
&lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;하는 함수이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이렇게하면 원본 코드 맨 상단에 주석문자열이 추가될 것이다.&lt;/strong&gt;&lt;br /&gt;
이렇게 해서 번들 결과가 어떻게 바뀌는지 한번 확인해보겠다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/node/webpack2/image46.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 번들된 결과에 후처리를 한 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/node/webpack2/image47.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다시한번 위 그림을 보자.&lt;br /&gt;
웹팩이 하는 역할을 나타내는 그림인데, 웹팩의 &lt;strong&gt;로더&lt;/strong&gt;는 위 그림에 있는 모듈로 연결된 각 파일들을 처리한다.&lt;br /&gt;
그래서 오른쪽처럼 하나로 만들어주는데, 그 직전에 plugin 이라는 녀석이 개입해서 아웃풋으로 만들어질 번들링에 &lt;strong&gt;후처리&lt;/strong&gt;를 해주게된다.&lt;/p&gt;

&lt;p&gt;우리가 커스텀으로 만들었던 것은 아웃풋 내용물 상단에 주석으로 내요을 추가하는 플러그인이었다.&lt;br /&gt;
이것이 바로 플러그인의 역할이다.&lt;/p&gt;

&lt;p&gt;실제 플러그인을 직접 만드는 경우는 거의 없다.&lt;br /&gt;
우리가 실무에서 필요한 플러그인은 이미 제공이 되어있고 ‘어떤 플러그인을 사용할지’ 아는 것이 더 중요하다.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Sep 2020 23:27:00 +0900</pubDate>
        <link>http://localhost:4000/node_webpack2/2020/09/28/webpack.html</link>
        <guid isPermaLink="true">http://localhost:4000/node_webpack2/2020/09/28/webpack.html</guid>
        
        
        <category>node_webpack2</category>
        
      </item>
    
      <item>
        <title>36. ES2020 New Features</title>
        <description>&lt;h2 id=&quot;36-es2020-new-features&quot;&gt;36. ES2020 New Features&lt;/h2&gt;

&lt;p&gt;프로그래밍의 한 가지 장점은 지속적인 학습 없이는 프로그래밍 언어의 전문가가 될 수 없다는 것입니다.&lt;br /&gt;
모든 주요 릴리스에 추가 기능이 도입됨에 따라 프로그래밍 언어는 시간이 지남에 따라 지속적으로 발전합니다.&lt;/p&gt;

&lt;p&gt;즉, 버전 업데이트와 함께 더 나은 대안이 출시 될 것이므로 개념에 대한 전문 지식이 구식이되거나 향후 10 년 내에 더 이상 사용되지 않을 것입니다.&lt;br /&gt;
이것은 모든 프로그래밍 언어에서 매우 일반적인 시나리오입니다.&lt;/p&gt;

&lt;p&gt;ES2020은 선택적 체인, nullish 병합, 동적 가져 오기 등을 포함한 몇 가지 새로운 기능을 출시했습니다.&lt;br /&gt;
빠르게 변화하는 IT 세계에 발 맞춰 이러한 새로운 개념을 배우는 것이 중요합니다.&lt;br /&gt;
여기 내 블로그 게시물에서 새로 출시 된 기능을 확인할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.bitsrc.io/es2020-has-been-finalized-here-is-what-im-excited-about-414959bc2f7f&quot; target=&quot;_blank&quot;&gt;ES2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;언어를 습득하려면 수년 간의 경험과 시간이 필요하지만 무엇을 습득해야하는지 알면 작업이 쉬워집니다.&lt;/p&gt;

&lt;p&gt;아래 언급 된 리소스를 통해 위의 36 개 개념 각각에 대한 학습 자료를 찾으십시오.&lt;br /&gt;
이 Github 저장소는 시작하기에 좋은 곳입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/leonardomso/33-js-concepts&quot; target=&quot;_blank&quot;&gt;자바스크립트 공부 사이트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 28 Sep 2020 23:20:00 +0900</pubDate>
        <link>http://localhost:4000/js/2020/09/28/javascript36.html</link>
        <guid isPermaLink="true">http://localhost:4000/js/2020/09/28/javascript36.html</guid>
        
        
        <category>js</category>
        
      </item>
    
      <item>
        <title>35. Destructuring Assignment (해체 할당)</title>
        <description>&lt;h2 id=&quot;35-destructuring-assignment-해체-할당&quot;&gt;35. Destructuring Assignment (해체 할당)&lt;/h2&gt;

&lt;p&gt;비 구조화 할당 연산자는 ES6에서 도입되었습니다.&lt;br /&gt;
확실히 잘 알고 있어야 할 사용 사례가 많이 있습니다.&lt;br /&gt;
이전 코딩 방식보다 훨씬 효율적입니다.&lt;br /&gt;
이를 스프레드 연산자라고도합니다.&lt;/p&gt;

&lt;p&gt;내 기사에서 구조 해제 할당에 대해 자세히 읽을 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/better-programming/5-uses-of-the-es6-spread-operator-ef90bdff4d56&quot; target=&quot;_blank&quot;&gt;비구조화 할당&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 28 Sep 2020 23:18:00 +0900</pubDate>
        <link>http://localhost:4000/js/2020/09/28/javascript35.html</link>
        <guid isPermaLink="true">http://localhost:4000/js/2020/09/28/javascript35.html</guid>
        
        
        <category>js</category>
        
      </item>
    
      <item>
        <title>34. Clean Code Principles</title>
        <description>&lt;h2 id=&quot;34-clean-code-principles&quot;&gt;34. Clean Code Principles&lt;/h2&gt;

&lt;p&gt;이것은 프로그래밍 언어에 관계없이 모든 개발자가 습득해야하는 필수 기술입니다.&lt;br /&gt;
각 프로그래밍 언어에는 별도의 우수 사례 세트가 있습니다.&lt;br /&gt;
이러한 “좋은”관행은 주관적이고 직장마다 다르지만 “좋은”것으로 합의 된 몇 가지 관행이 있습니다.&lt;/p&gt;

&lt;p&gt;이러한 코드 원칙을 따르면 모든 사람이 코드를 읽고 유지 관리 할 수 있습니다.&lt;br /&gt;
이를 통해 귀하와 귀하의 팀이 애플리케이션 개발 중에 원활하게 협력 할 수 있습니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Sep 2020 23:17:00 +0900</pubDate>
        <link>http://localhost:4000/js/2020/09/28/javascript34.html</link>
        <guid isPermaLink="true">http://localhost:4000/js/2020/09/28/javascript34.html</guid>
        
        
        <category>js</category>
        
      </item>
    
      <item>
        <title>33. Functional Programming</title>
        <description>&lt;h2 id=&quot;33-functional-programming&quot;&gt;33. Functional Programming&lt;/h2&gt;

&lt;p&gt;Wiki에 따르면 “함수형 프로그래밍은 컴퓨터 프로그램의 구조와 요소를 구축하는 스타일 인 프로그래밍 패러다임으로, 
계산을 수학적 함수의 평가로 취급하고 &lt;strong&gt;스테이트(state)와 데이터(data)를 변경하는 것을 방지&lt;/strong&gt;합니다.”&lt;/p&gt;

&lt;p&gt;마스터해야 할 함수형 프로그래밍의 몇 가지 개념이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;순수 함수(Pure functions)&lt;/li&gt;
  &lt;li&gt;불변성(Immutability)&lt;/li&gt;
  &lt;li&gt;참조 투명성(Referential transparency)&lt;/li&gt;
  &lt;li&gt;고차 함수(Higher-order functions)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;함수형 프로그래밍의 이러한 개념을 이해하면 확실히 우위를 점할 수 있습니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Sep 2020 23:14:00 +0900</pubDate>
        <link>http://localhost:4000/js/2020/09/28/javascript33.html</link>
        <guid isPermaLink="true">http://localhost:4000/js/2020/09/28/javascript33.html</guid>
        
        
        <category>js</category>
        
      </item>
    
      <item>
        <title>32. Design Patterns</title>
        <description>&lt;h2 id=&quot;32-design-patterns&quot;&gt;32. Design Patterns&lt;/h2&gt;

&lt;p&gt;소프트웨어 엔지니어링에서 디자인 패턴은 일반적으로 발생하는 문제에 대한 잘 알려진 반복 가능한 솔루션입니다.&lt;br /&gt;
여러 디자인 패턴이 있으며 각각 고유한 사용 사례가 있습니다.&lt;br /&gt;
23 Gang of Four(GoF) 패턴은 일반적으로 다른 모든 패턴의 기초로 간주됩니다.&lt;br /&gt;
그것들을 모두 아는 것은 매우 어렵지만 적어도 그들의 사용 사례를 이해하려고 노력할 수 있습니다.&lt;/p&gt;

&lt;p&gt;다음은 JavaScript에서 23 개의 GoF 패턴을 구현 한 Felipe의 훌륭한 저장소입니다.&lt;br /&gt;
이 기사 끝에 언급 된 자원을 살펴보고 이 기사에 영감을 준 Leonardo의 멋진 자원에 익숙해 지십시오.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fbeline/Design-Patterns-JS&quot; target=&quot;_blank&quot;&gt;저장소&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 28 Sep 2020 23:12:00 +0900</pubDate>
        <link>http://localhost:4000/js/2020/09/28/javascript32.html</link>
        <guid isPermaLink="true">http://localhost:4000/js/2020/09/28/javascript32.html</guid>
        
        
        <category>js</category>
        
      </item>
    
      <item>
        <title>31. Inheritance, Polymorphism, and Code Reuse (상속, 다형성 및 코드 재사용)</title>
        <description>&lt;h2 id=&quot;31-inheritance-polymorphism-and-code-reuse-상속-다형성-및-코드-재사용&quot;&gt;31. Inheritance, Polymorphism, and Code Reuse (상속, 다형성 및 코드 재사용)&lt;/h2&gt;

&lt;p&gt;JavaScript의 &lt;strong&gt;상속&lt;/strong&gt;은 프로토타입과 함께 작동합니다.&lt;br /&gt;
이는 JavaScript가 비 OOP 언어이기 때문입니다.&lt;br /&gt;
그러나 JavaScript는 프로토타입 상속을 제공하여 OOP의 일부 기능을 제공합니다.&lt;/p&gt;

&lt;p&gt;반면 &lt;strong&gt;다형성&lt;/strong&gt;은 객체, 변수 또는 함수가 여러 형태를 취할 수있는 개념입니다.&lt;br /&gt;
JavaScript에서는 다형성의 효과를 보기가 조금 더 어렵습니다.&lt;br /&gt;
보다 고전적인 유형의 다형성이 정적으로 형식화 된 시스템에서 더 분명하기 때문입니다.&lt;/p&gt;

&lt;p&gt;위의 두 개념은 JavaScript에서 코드를 &lt;strong&gt;재사용&lt;/strong&gt;하는 데 도움이됩니다.&lt;br /&gt;
특히 JavaScript를 사용하여 위의 두 가지 개념을 확실히 이해하면 매우 높은 품질과 실용성을 갖춘 코드를 작성할 수 있습니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Sep 2020 23:01:00 +0900</pubDate>
        <link>http://localhost:4000/js/2020/09/28/javascript31.html</link>
        <guid isPermaLink="true">http://localhost:4000/js/2020/09/28/javascript31.html</guid>
        
        
        <category>js</category>
        
      </item>
    
      <item>
        <title>30. Algorithms</title>
        <description>&lt;h2 id=&quot;30-algorithms&quot;&gt;30. Algorithms&lt;/h2&gt;

&lt;p&gt;이것은 컴퓨터 과학 과정에서 가장 먼저 배우게 될 것 중 하나입니다.&lt;br /&gt;
간단히 말해서 알고리즘은 당신이 무언가를 성취하는 방법에 대한 단계별 프로세스입니다.&lt;br /&gt;
프로그래머는 알고리즘 관점에서 모든 문제를 볼 수 있어야합니다.&lt;br /&gt;
그들은 단계별 프로세스에서 문제와 해결책을 구조화 할 수 있어야합니다.&lt;br /&gt;
이 알고리즘은 나중에 프로그램으로 작성할 것입니다.&lt;/p&gt;

&lt;p&gt;수천 개의 사용 사례에 대한 수많은 알고리즘이 있지만 두 가지 사용 사례는 매우 일반적입니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Search&lt;/li&gt;
  &lt;li&gt;Sort&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 두 가지 사용 사례는 프로그래머에게 매우 일반적이며, 최소한 사용 가능한 잘 알려진 알고리즘에 대한 철저한 지식이 있어야합니다.&lt;br /&gt;
이러한 알고리즘 중 하나를 사용해야한다는 고정 된 규칙은 없지만 이러한 알고리즘은 성능 측면에서 잘 알려져 있고 잘 문서화되어 있습니다.&lt;/p&gt;

&lt;p&gt;자신 만의 알고리즘을 만들어 세상에 소개 할 수도 있습니다.&lt;br /&gt;
현재 알려진 알고리즘보다 낫다면 다음 프로그래밍 스타가 될 수 있습니다!&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Sep 2020 22:59:00 +0900</pubDate>
        <link>http://localhost:4000/js/2020/09/28/javascript30.html</link>
        <guid isPermaLink="true">http://localhost:4000/js/2020/09/28/javascript30.html</guid>
        
        
        <category>js</category>
        
      </item>
    
      <item>
        <title>29. Time Complexity (시간 복잡성)</title>
        <description>&lt;h2 id=&quot;29-time-complexity-시간-복잡성&quot;&gt;29. Time Complexity (시간 복잡성)&lt;/h2&gt;

&lt;p&gt;시간 복잡도 분석은 프로그래밍 언어에 관계없이 컴퓨터 프로그래밍의 또 다른 기본입니다.&lt;br /&gt;
더 나은 애플리케이션을 구축하려면 더 나은 솔루션을 작성해야합니다.&lt;br /&gt;
그러기 위해서는 시간 복잡성의 개념을 이해해야합니다.&lt;br /&gt;
때때로 Big O라고도합니다.&lt;/p&gt;

&lt;p&gt;Big O 표기법은 필요한 실행 시간 또는 알고리즘에서 사용하는 공간을 설명합니다.&lt;br /&gt;
Big O 표기법은 특히 최악의 시나리오를 설명합니다.&lt;/p&gt;

&lt;p&gt;이를 통해 최악의 시나리오에서도 최상의 성능을 발휘할 알고리즘을 선택하고 구현할 수 있습니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Sep 2020 22:57:00 +0900</pubDate>
        <link>http://localhost:4000/js/2020/09/28/javascript29.html</link>
        <guid isPermaLink="true">http://localhost:4000/js/2020/09/28/javascript29.html</guid>
        
        
        <category>js</category>
        
      </item>
    
  </channel>
</rss>
