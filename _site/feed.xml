<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LEE HYUNG JU</title>
    <description>Jekyll Blog</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 02 Aug 2020 07:49:22 +0900</pubDate>
    <lastBuildDate>Sun, 02 Aug 2020 07:49:22 +0900</lastBuildDate>
    <generator>Jekyll v4.0.1</generator>
    
      <item>
        <title>3. 자바스크립트 기초</title>
        <description>&lt;h2 id=&quot;자바스크립트-기초&quot;&gt;자바스크립트 기초&lt;/h2&gt;

&lt;h3 id=&quot;lexical-grammar&quot;&gt;Lexical Grammar&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Control Character (제어문자)&lt;/li&gt;
  &lt;li&gt;White Space (공백문자) : 유니코드 공백문자 50개 넘게 있음&lt;/li&gt;
  &lt;li&gt;Line Terminators (개행문자) : 한 줄을 끊는 것도 수많은 유니코드가 있음&lt;/li&gt;
  &lt;li&gt;Comments (주석)&lt;/li&gt;
  &lt;li&gt;Keyword (예약어)&lt;/li&gt;
  &lt;li&gt;Literals (리터럴) : 값이나 객체를 표현하는 더 이상 나눌 수 없는 최소 단위&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;language-element&quot;&gt;Language Element&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Statements 문&lt;/p&gt;

    &lt;p&gt;컴파일러, 실행기에 주는 힌트다.&lt;br /&gt;
메모리에 남지 않는다.
실행기가 그 힌트를 받아서 처리할 뿐.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;공문 : 빈문(아무것도 없는 문을 문으로 인정)&lt;/li&gt;
      &lt;li&gt;식문&lt;/li&gt;
      &lt;li&gt;제어문&lt;/li&gt;
      &lt;li&gt;선언문 : 메모리에 변수를 할당하는 문이다. 변수(메모리 주소의 별명, 타입, 크기) - 이를 Vtable에 써놓는다.&lt;/li&gt;
      &lt;li&gt;단문&lt;/li&gt;
      &lt;li&gt;중문 : 중괄호로 묶어서 여러개의 문을 넣는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Expression 식&lt;/p&gt;

    &lt;p&gt;식이란 값이다. 식은 무조건 값으로 도출된다. 함수도 값으로 도출&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;값식&lt;/li&gt;
      &lt;li&gt;연산식&lt;/li&gt;
      &lt;li&gt;호출식 : 호출하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;든 뭐든 값으로 도출&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Identifier 식별자&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;기본형&lt;/li&gt;
      &lt;li&gt;참조형&lt;/li&gt;
      &lt;li&gt;변수&lt;/li&gt;
      &lt;li&gt;상수&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 공문 예시&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;;;;;;;;;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 자바스크립트는 if else문만 존재. else if 문은 존재X&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{;;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;{}&lt;/h3&gt;

&lt;p&gt;리터럴을 만들기 위한 {} 뒤엔 ;&lt;br /&gt;
중문을 만들기 위한 {} 뒤엔 ;를 안붙인다.&lt;br /&gt;
중문 {}뒤에 ; 들어가면 공문이 하나 더 들어간 것이다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 {}는 함수 바디로 인식한다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이때는 오브젝트 리터럴로 인식한다.&lt;/p&gt;

&lt;h3 id=&quot;다음시간부터-배울-내용&quot;&gt;다음시간부터 배울 내용&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Sync Flow : 동기화 흐름 (적재된 명령이 실행되는 동안 못 멈춘다.)&lt;/li&gt;
  &lt;li&gt;Flow Control : 흐름제어문&lt;/li&gt;
  &lt;li&gt;Sub Flow : 어떤 플로우는 반복적으로 쓰인다. (함수 또는 클래스)&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 02 Aug 2020 07:07:00 +0900</pubDate>
        <link>http://localhost:4000/festudy/2020/08/02/festudy3.html</link>
        <guid isPermaLink="true">http://localhost:4000/festudy/2020/08/02/festudy3.html</guid>
        
        
        <category>festudy</category>
        
      </item>
    
      <item>
        <title>2. 참조의 참조를 쓰는 이유</title>
        <description>&lt;h2 id=&quot;참조의-참조를-쓰는-이유&quot;&gt;참조의 참조를 쓰는 이유&lt;/h2&gt;

&lt;p&gt;참조의 참조 : 링크드 리스트, 인터페이스와 구상 클래스, 클래스와 인스턴스, 디자인 패턴(데코레이터 패턴) 등등&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Memory&lt;/li&gt;
  &lt;li&gt;Address (메모리의 주소)&lt;/li&gt;
  &lt;li&gt;Pointer (메모리의 주소를 가리키는 pointer)&lt;/li&gt;
  &lt;li&gt;Variables (위 모두를 아우르는 variables)&lt;/li&gt;
  &lt;li&gt;Dispatch&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;메모리 주소의 크기 : 32bit 컴퓨터인지 64bit 컴퓨터인지가 여기서 나뉘어진다.&lt;br /&gt;
32bit 컴퓨터 메모리 하나당 최대 용량 4GB이다.&lt;br /&gt;
메모리 한개 블록은 32bit, 64bit 상관없이 4byte로 나누는 경우도 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;코드 순서&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A = “TEST” (A라는 변수에 TEST 값을 할당)&lt;/li&gt;
  &lt;li&gt;B = &amp;amp;A (B라는 변수에 A의 메모리 주소값을 할당)&lt;/li&gt;
  &lt;li&gt;C = B, D = B (C라는 변수와 D라는 변수에 B값(A의 주소값)을 할당)&lt;/li&gt;
  &lt;li&gt;B = &amp;amp;K (B에 K의 메모리 주소값을 할당)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3번에서 C와 D에는 B값(A의 주소값)이 할당되어있다.&lt;br /&gt;
하지만 4번에서 B는 K의 메모리 주소값을 할당받았다.&lt;br /&gt;
결과적으로 코드상에선 C = B, D = B라고 되어있지만 사실 같지 않다.&lt;br /&gt;
여기서부터 코드가 오류를 발생시킬 리스크가 엄청나게 커지는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;해결방법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;함수형 패러다임 : 참조사용 금지, 값만 사용&lt;/li&gt;
  &lt;li&gt;객체 지향 : 직접참조사용 금지&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3; 더블 디스패치, 디스패치 후 value랑 또 디스패치&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;A = “TEST” (A라는 변수에 TEST 값을 할당)&lt;/li&gt;
  &lt;li&gt;B = {VALUE: &amp;amp;A, V: 3} (B라는 객체 안의 VALUE 프로퍼티에 A의 메모리 주소값 할당)&lt;/li&gt;
  &lt;li&gt;C = B, D = B (C라는 변수와 D라는 변수에 B 객체의 주소 할당)&lt;/li&gt;
  &lt;li&gt;B.VALUE = &amp;amp;K (B의 VALUE값을 K의 메모리 주소값으로 재할당)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이렇게해도 C와 D는 B 객체 주소만을 가지고 있으므로 문제없다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;링크드 리스트&lt;/li&gt;
  &lt;li&gt;클래스와 인터페이스&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;모두 위와 같은 원리를 따른다.&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Aug 2020 06:54:00 +0900</pubDate>
        <link>http://localhost:4000/festudy/2020/08/02/festudy2.html</link>
        <guid isPermaLink="true">http://localhost:4000/festudy/2020/08/02/festudy2.html</guid>
        
        
        <category>festudy</category>
        
      </item>
    
      <item>
        <title>1. Program &amp; Timing</title>
        <description>&lt;h2 id=&quot;program--timing&quot;&gt;Program &amp;amp; Timing&lt;/h2&gt;

&lt;h3 id=&quot;컴파일-프로그램&quot;&gt;컴파일 프로그램&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Language code&lt;/li&gt;
  &lt;li&gt;Machine Language(컴파일)&lt;/li&gt;
  &lt;li&gt;File(컴파일 후 파일화)&lt;/li&gt;
  &lt;li&gt;Load(메모리에 로드) : exe 파일 클릭 -&amp;gt; 메모리에 적재 후 실행&lt;/li&gt;
  &lt;li&gt;Run(실행)&lt;/li&gt;
  &lt;li&gt;Terminate&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Load 시점부터 프로그램이라고 부른다.&lt;br /&gt;
이런 프로그램을 만드는 행위를 프로그래밍이라고 한다.&lt;br /&gt;
1~4번까지가 다 프로그래밍의 영역이다.&lt;br /&gt;
기계가 실행(Run)하는 영역은 프로그래밍의 영역이 아니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;Language code - Lint time&lt;/li&gt;
  &lt;li&gt;Machine Language - Compile time&lt;/li&gt;
  &lt;li&gt;File&lt;/li&gt;
  &lt;li&gt;Load&lt;/li&gt;
  &lt;li&gt;Run - Run time&lt;/li&gt;
  &lt;li&gt;Terminate&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lint time error - Compile error : 프로그래머가 잡을 수 있는 영역&lt;br /&gt;
Run time error부터 프로그래머가 잡기 힘들어진다.
&lt;strong&gt;Context Error&lt;/strong&gt; : Run time에서도 안 걸리는 논리적인 이유로 일어나는 에러다.&lt;/p&gt;

&lt;p&gt;자신이 짠 코드가 Run time 때 error가 발생한다면 본인의 코드 스타일을 점검해봐야된다.&lt;/p&gt;

&lt;h3 id=&quot;context-error&quot;&gt;Context Error&lt;/h3&gt;

&lt;p&gt;팀의 커뮤니케이션으로 해결해야될 문제다.&lt;br /&gt;
팀원 개개인이 서로 오해를 불러일으키게끔 코드를 짰다던가 의사소통이 제대로 안될때 
컨텍스트 에러가 일어나는 경우가 많다.&lt;/p&gt;

&lt;h3 id=&quot;스크립트-프로그램&quot;&gt;스크립트 프로그램&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Language code&lt;/li&gt;
  &lt;li&gt;File&lt;/li&gt;
  &lt;li&gt;Load&lt;/li&gt;
  &lt;li&gt;Machine Language&lt;/li&gt;
  &lt;li&gt;Run&lt;/li&gt;
  &lt;li&gt;Terminate&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;스크립트 언어는 컴파일 언어처럼 Machine Language(컴파일)을 거치지 않고 바로 File을 생성한다.&lt;br /&gt;
그 후에 바로 브라우저에 적재된다.&lt;br /&gt;
적재된 후에 Machine Language로 컴파일된다.&lt;br /&gt;
그리고 그 후에 실행되는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;run-time-컴파일-프로그램&quot;&gt;Run Time (컴파일 프로그램)&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Language code&lt;/li&gt;
  &lt;li&gt;Machine Language(컴파일)&lt;/li&gt;
  &lt;li&gt;File(컴파일 후 파일화)&lt;/li&gt;
  &lt;li&gt;Load(메모리에 로드)&lt;/li&gt;
  &lt;li&gt;Run(실행)&lt;/li&gt;
  &lt;li&gt;Terminate&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Run Time은 기본적으로 메모리에 적재되어있는 프로그램을 실행하는 과정이다.&lt;br /&gt;
프로그램이 실행될 때 &lt;strong&gt;‘폰노이만 머신 구조’&lt;/strong&gt;를 따른다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;폰노이만 머신구조&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Memory에 명령어들과 값들을 적재한다. (프로그램이라 불리는 영역)&lt;/li&gt;
  &lt;li&gt;CPU의 제어유닛은 Memory에 적재되어있는 명령어와 값들을 인스트럭션 패치(연산유닛 명령어로 패치) &amp;amp; 디코딩한다. (연산유닛이 알아들을 수 있도록)&lt;/li&gt;
  &lt;li&gt;CPU의 연산유닛은 이를 실행한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;컴파일 프로그램에서 컴파일 할 때(Machine Language) 어떻게 error를 잡아내는 것일까?&lt;/strong&gt;&lt;br /&gt;
Compile 할 때는 아직 Memory에 적재되기 이전이다.&lt;br /&gt;
그런데 어떻게 error를 잡아내는 것일까?&lt;br /&gt;
이는 Compile time 때 ‘가짜 메모리’를 만들어 할당하기 때문이다.&lt;br /&gt;
그래서 컴파일 타임 때 만들어진 파일들은 가짜 메모리에 ‘매핑’되어 있다.&lt;br /&gt;
이를 File 단계에서 해줘야될 것은 가짜 메모리 테이블을 진짜 메모리 테이블로 ‘매핑’해줘야된다.&lt;br /&gt;
이걸 &lt;strong&gt;‘버츄얼 메모리 테이블’&lt;/strong&gt;이라고 한다. (V-TABLE)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Loading&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instruction Fetch &amp;amp; Decoding -&amp;gt; Execution -&amp;gt; Instruction Fetch &amp;amp; Decoding -&amp;gt; … 반복&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Essential Definition Loading&lt;/li&gt;
  &lt;li&gt;V-Table Mapping&lt;/li&gt;
  &lt;li&gt;Run&lt;/li&gt;
  &lt;li&gt;Runtime Definition Loading (자바스크립트 콜백펑션, json…등등)
…&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이런 과정의 연속&lt;/p&gt;

&lt;h3 id=&quot;run-time-스크립트-프로그램&quot;&gt;Run Time (스크립트 프로그램)&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Language code&lt;/li&gt;
  &lt;li&gt;File&lt;/li&gt;
  &lt;li&gt;Load&lt;/li&gt;
  &lt;li&gt;Machine Language&lt;/li&gt;
  &lt;li&gt;Run&lt;/li&gt;
  &lt;li&gt;Terminate&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Run time 때 (상대주의)&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Declare Base Function, Class… (Static Time)&lt;/li&gt;
  &lt;li&gt;Declare Extended Function, Class… (Run time)
…&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이런 과정의 연속&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Aug 2020 06:20:00 +0900</pubDate>
        <link>http://localhost:4000/festudy/2020/08/02/festudy.html</link>
        <guid isPermaLink="true">http://localhost:4000/festudy/2020/08/02/festudy.html</guid>
        
        
        <category>festudy</category>
        
      </item>
    
      <item>
        <title>2.1.7 async/await</title>
        <description>&lt;h2 id=&quot;217-asyncawait&quot;&gt;2.1.7 async/await&lt;/h2&gt;

&lt;p&gt;노드 7.6 버전부터 지원되는 기능입니다.&lt;br /&gt;
자바스크립트 스팩은 ES2017입니다.&lt;br /&gt;
&lt;strong&gt;최신 기능이면서 정말 혁신적인 기능&lt;/strong&gt;입니다.&lt;br /&gt;
특히 노드처럼 &lt;strong&gt;비동기 프로그래밍&lt;/strong&gt;을 해야할 때 도움이 많이 됩니다.&lt;br /&gt;
&lt;strong&gt;프로미스가 콜백 지옥&lt;/strong&gt;을 해결했다지만, 여전히 코드가 장황합니다.&lt;br /&gt;
&lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;async/await 문법은 프로미스를 사용한 코드를 한 번 더 깔끔하게 줄여줍니다.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2.1.6 절의 프로미스 코드를 다시 한 번 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;findAndSaveUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 생략&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;콜백과 다르게 코드의 깊이가 깊진 않지만, &lt;strong&gt;코드 길이는 여전히 깁니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;async/await&lt;/strong&gt; 문법을 사용하면 다음과 같이 바꿀 수 있습니다.&lt;br /&gt;
&lt;strong&gt;async function&lt;/strong&gt;이라는 것이 추가되었습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;findAndSaveUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 생략&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;놀라울 정도로 코드가 짧아졌습니다.&lt;br /&gt;
함수 선언부를 일반 함수 대신 &lt;strong&gt;async function&lt;/strong&gt;으로 교체한 후, &lt;strong&gt;프로미스 앞에 await&lt;/strong&gt;를 붙여주었습니다.&lt;br /&gt;
이제 함수는 해당 프로미스가 &lt;strong&gt;resolve&lt;/strong&gt;될 때까지 기다린 뒤 다음 로직으로 넘어갑니다.&lt;br /&gt;
예를 들면 &lt;strong&gt;await Users.findOne({})&lt;/strong&gt;이 &lt;strong&gt;resolve&lt;/strong&gt;될 때까지 기다린 뒤, user 변수를 초기화하는 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;위 코드는 에러를 처리하는 부분이 없으므로 다음과 같은 추가 작업이 필요합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;findAndSaveUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({});&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 생략&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;try/catch&lt;/code&gt;문으로 로직을 감쌌습니다.&lt;br /&gt;
프로미스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt; 메서드처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;try/catch&lt;/code&gt;문의 &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt;가 에러를 처리합니다.&lt;/p&gt;

&lt;p&gt;화살표 함수도 &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt;와 같이 사용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;findAndSaveUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({});&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 생략&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;문과 &lt;code class=&quot;highlighter-rouge&quot;&gt;async/await&lt;/code&gt;을 같이 써서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise.all&lt;/code&gt;을 대체할 수도 있습니다.&lt;br /&gt;
이것은 &lt;strong&gt;노드 10 버전&lt;/strong&gt;부터 지원하는 ES2018 문법입니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promise1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;성공1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promise2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;성공2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promise1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promise2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise.all&lt;/code&gt; 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;for await of&lt;/code&gt;문을 사용해서 프로미스를 반복하는 모습입니다.&lt;/p&gt;

&lt;p&gt;앞으로 중첩되는 콜백 함수가 있다면 프로미스를 거쳐 &lt;code class=&quot;highlighter-rouge&quot;&gt;async/await&lt;/code&gt; 문법으로 바꾸는 연습을 해보기 바랍니다.&lt;br /&gt;
코드가 훨씬 간결해질 것입니다.&lt;br /&gt;
이 책의 예제는 &lt;code class=&quot;highlighter-rouge&quot;&gt;async/await&lt;/code&gt; 문법을 적극적으로 사용하므로 익숙해지는 것이 중요합니다.&lt;/p&gt;

&lt;p&gt;이외에도 많은 문법이 추가되었습니다.&lt;br /&gt;
하지만 이 책에서는 위에서 설명한 내용 정도만 자주 사용합니다.&lt;br /&gt;
다른 변경 사항이 궁금한 분들을 위해 이 장 끝부분에 새로운 문법을 배울 수 있는 사이트의 링크를 적어놓았습니다.&lt;/p&gt;

&lt;p&gt;이제 프론트앤드에서 사용되는 자바스크립트 코드를 알아보겠습니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Aug 2020 14:35:00 +0900</pubDate>
        <link>http://localhost:4000/nodebook/2020/08/01/node19.html</link>
        <guid isPermaLink="true">http://localhost:4000/nodebook/2020/08/01/node19.html</guid>
        
        
        <category>nodebook</category>
        
      </item>
    
      <item>
        <title>2.1.6 프로미스</title>
        <description>&lt;h2 id=&quot;216-프로미스&quot;&gt;2.1.6 프로미스&lt;/h2&gt;

&lt;p&gt;자바스크립트와 노드에서는 주로 &lt;strong&gt;비동기 프로그래밍&lt;/strong&gt;을 합니다.&lt;br /&gt;
&lt;strong&gt;특히 이벤트 주도 방식 때문에 &lt;span style=&quot;color:red&quot;&gt;콜백 함수&lt;/span&gt;를 자주 사용합니다.&lt;/strong&gt;&lt;br /&gt;
ES2015 부터는 자바스크립트와 노드의 API들이 콜백 대신 &lt;strong&gt;프로미스(promise)&lt;/strong&gt; 기반으로 재구성됩니다.&lt;br /&gt;
그래서 악명 높은 &lt;strong&gt;콜백 헬(callback hell)&lt;/strong&gt;을 극복했다는 평가를 받고 있습니다.&lt;/p&gt;

&lt;p&gt;프로미스는 다음과 같은 규칙이 있습니다.&lt;br /&gt;
먼저 프로미스 객체를 생성해야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true면 resolve, false면 reject&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;성공&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;실패&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 성공(resolve)한 경우 실행&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 실패(reject)한 경우 실행&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/nodebook/image13.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;new Promise&lt;/code&gt;로 프로미스를 생성할 수 있으며, 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt;를 매개변수로 갖는 콜백 함수를 넣어줍니다.&lt;br /&gt;
이렇게 만든 &lt;code class=&quot;highlighter-rouge&quot;&gt;promise&lt;/code&gt; 변수에 &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt; 메서드를 붙일 수 있습니다.&lt;br /&gt;
프로미스 내부에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt;가 호출되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;이 실행되고, &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt;가 호출되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt;가 실행됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt;에 넣어준 인자는 각각 &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt;의 매개변수에서 받을 수 있습니다.&lt;br /&gt;
즉, &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve('성공')&lt;/code&gt;가 호출되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt;가 ‘성공’이 됩니다.&lt;br /&gt;
만약 &lt;code class=&quot;highlighter-rouge&quot;&gt;reject('실패')&lt;/code&gt;가 호출되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt;가 ‘실패’가 되는 것입니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;condition&lt;/code&gt; 변수를 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;로 바꿔보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt;에서 에러가 로깅됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;이나 &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt;에서 다시 다른 &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;이나 &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt;를 붙일 수 있습니다.&lt;br /&gt;
&lt;strong&gt;이전 &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; 값을 다음 &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;의 매개변수로 넘깁니다.&lt;/strong&gt;&lt;br /&gt;
프로미스를 &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;한 경우 프로미스가 수행된 후 다음 &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;이나 &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt;가 호출됩니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true면 resolve, false면 reject&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;성공&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;실패&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 실패(reject)한 경우 실행&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/nodebook/image14.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;처음 then에서 message를 resolve하면 다음 then에서 받을 수 있습니다.&lt;br /&gt;
여기서 다시 message2를 resolve했으므로 다음 then에서 message3를 받았습니다.&lt;/p&gt;

&lt;p&gt;이것을 활용해서 콜백을 프로미스로 바꿀 수 있습니다.&lt;br /&gt;
다음은 콜백을 쓰는 패턴중 하나입니다.&lt;br /&gt;
이를 프로미스로 바꿔보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;findAndSaveUser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 첫 번째 콜백&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 두 번째 콜백&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 세 번째 콜백&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 생략&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;콜백 함수가 세 번 중첩되어 있습니다.&lt;br /&gt;
콜백 함수가 나올 때마다 코드의 깊이가 깊어집니다.&lt;br /&gt;
각 콜백 함수마다 에러도 따로 처리해줘야 합니다.&lt;br /&gt;
이 코드를 다음과 같이 바꿀 수 있습니다.&lt;br /&gt;
이 코드를 다음과 같이 바꿀 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;findAndSaveUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 생략&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드의 깊이가 더 이상 깊어지지 않습니다.&lt;br /&gt;
then 메서드들은 순차적으로 실행됩니다.&lt;br /&gt;
콜백에서 매번 따로 처리해야 했던 에러도 마지막 catch에서 한번에 처리할 수 있습니다.&lt;br /&gt;
&lt;strong&gt;하지만 모든 콜백 함수를 위와 같이 바꿀 수 있는 것은 아닙니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;메서드가 프로미스 방식을 지원&lt;/span&gt;해야 합니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;예제의 코드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;findOne&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;save&lt;/code&gt; 메서드가 내부적으로 프로미스 객체를 가지고 있어서 가능한 것입니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;지원하지 않는 경우 프로미스로 바꿀 수 있는 방법은 3.5.6절에 나와 있습니다.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;마지막으로 프로미스 여러 개를 한번에 실행할 수 있는 방법이 있습니다.&lt;br /&gt;
기존의 콜백 패턴이었다면 콜백을 여러 번 중첩해서 사용해야 했을 것입니다.&lt;br /&gt;
하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise.all&lt;/code&gt;을 활용하면 간단히 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promise1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;성공1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promise2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;성공2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promise1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promise2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ['성공1', '성공2']&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/nodebook/image15.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/static/img/nodebook/image16.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise.resolve&lt;/code&gt;는 즉시 &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt;하는 프로미스를 만드는 방법입니다.&lt;br /&gt;
비슷한 것으로 즉시 &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt;하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise.reject&lt;/code&gt;도 있습니다.&lt;br /&gt;
프로미스가 여러 개 있을 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise.all&lt;/code&gt;에 넣으면 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt;될 때까지 기다렸다가 &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;으로 넘어갑니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; 매개변수에 각각의 프로미스 결과값이 배열로 들어 있습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt; 중 하나라도 &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt;가 되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt;로 넘어갑니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Aug 2020 13:37:00 +0900</pubDate>
        <link>http://localhost:4000/nodebook/2020/08/01/node18.html</link>
        <guid isPermaLink="true">http://localhost:4000/nodebook/2020/08/01/node18.html</guid>
        
        
        <category>nodebook</category>
        
      </item>
    
      <item>
        <title>2.1.5 비구조화 할당</title>
        <description>&lt;h2 id=&quot;215-비구조화-할당해체-할당&quot;&gt;2.1.5 비구조화 할당(해체 할당)&lt;/h2&gt;

&lt;p&gt;이름은 어색하지만 매우 유용한 기능입니다.&lt;br /&gt;
객체와 배열로부터 속성이나 요소를 쉽게 꺼낼 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;candyMachine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;getCandy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getCandy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;candyMachine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCandy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;candyMachine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;객체의 속성을 &lt;span style=&quot;color:red&quot;&gt;같은 이름&lt;/span&gt;의 변수에 대입하는 코드입니다.&lt;/strong&gt;&lt;br /&gt;
이를 다음과 같이 바꿀 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;candyMachine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;getCandy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCandy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;candyMachine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(이터레이션 객체 / 이터러블 객체)&lt;/p&gt;

&lt;p&gt;당황스럽겠지만, 위 문법은 유효한 문법입니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;candyMachine&lt;/code&gt; 객체 안의 속성을 찾아서 변수와 매칭해줍니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt;처럼 여러 단계 안의 속성도 찾을 수 있습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;getCandy&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; 변수가 초기화된 것입니다.&lt;/p&gt;

&lt;p&gt;배열도 비구조화할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;nodejs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;array란 배열의 첫번째, 두번째 요소와 마지막 요소를 변수에 대입하는 코드입니다.&lt;br /&gt;
다음과 같이 바꿀 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;nodejs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;어색해 보이지만, 나름대로 규칙이 있습니다.&lt;br /&gt;
node, obj와 bool의 위치를 보면 node는 배열의 첫번째 요소, obj는 두번째 요소, bool은 마지막 요소라는 것을 알 수 있습니다.&lt;br /&gt;
obj와 bool 사이의 요소들은 무시합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;비구조화 할당 문법&lt;/strong&gt;도 코드 줄 수를 상당히 줄여주므로 유용합니다.&lt;br /&gt;
특히 노드는 모듈을 사용하므로 이러한 방식을 자주 사용합니다.&lt;br /&gt;
3.3절에서 자세히 알아보겠습니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Aug 2020 13:24:00 +0900</pubDate>
        <link>http://localhost:4000/nodebook/2020/08/01/node17.html</link>
        <guid isPermaLink="true">http://localhost:4000/nodebook/2020/08/01/node17.html</guid>
        
        
        <category>nodebook</category>
        
      </item>
    
      <item>
        <title>쓰로틀링과 디바운싱</title>
        <description>&lt;h2 id=&quot;쓰로틀링과-디바운싱&quot;&gt;쓰로틀링과 디바운싱&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;쓰로틀링&lt;/strong&gt;(throttling)과 &lt;strong&gt;디바운싱&lt;/strong&gt;(debouncing)에 대해 알아보겠습니다.&lt;br /&gt;
용어가 생소하신 분들을 위해 간단히 설명해보겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;쓰로틀링 : 마지막 함수가 호출된 후 일정시간이 지나기 전에 다시 호출되지 않도록 하는 것&lt;/li&gt;
  &lt;li&gt;디바운싱 : 연이어 호출되는 함수들 중 마지막 함수(또는 제일 처음)만 호출하도록 하는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 두 개는 &lt;strong&gt;underscore(_)에도 있는 기능&lt;/strong&gt;입니다.&lt;br /&gt;
&lt;strong&gt;underscore&lt;/strong&gt;나 &lt;strong&gt;lodash&lt;/strong&gt;를 쓰고 계신 분들이라면 그 라이브러리의 메소드를 쓰시면 편합니다.&lt;/p&gt;

&lt;p&gt;사용처가 궁금하실 겁니다.&lt;br /&gt;
&lt;strong&gt;디바운싱&lt;/strong&gt;은 주로 ajax 검색에 자주 쓰입니다.&lt;br /&gt;
&lt;strong&gt;쓰로틀링&lt;/strong&gt;은 스크롤을 올리거나 내릴 때 보통 사용합니다.&lt;br /&gt;
&lt;strong&gt;어디까지나 제 경험에 바탕한 사용처입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;디바운싱&quot;&gt;디바운싱&lt;/h3&gt;

&lt;p&gt;요즘 서비스들은 검색어 치자마자 엔터 없이도 결과가 바로바로 나옵니다.&lt;br /&gt;
만약 ‘제로초’를 검색창에 친다고 합시다.&lt;br /&gt;
엔터없이도 결과를 즉시 보여주려면 항상 &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; 이벤트에 대기하고 있어야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;여기에 ajax 요청&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실제 ajax 요청을 보내기는 힘드니 콘솔 로그로 대체합니다.&lt;br /&gt;
로그가 콘솔에 찍힐 때마다 ajax 요청이 실행된다고 생각하시면 됩니다.&lt;br /&gt;
문제는 한 글자 칠 때마다 ajax 요청이 실행된다는 것입니다.&lt;br /&gt;
‘ㅈ’, ‘제’, ‘젤’, ‘제로’, ‘제롳’, ‘제로초’ 모두 요청이 실행됩니다.&lt;br /&gt;
6번이나 요청을 했습니다(한글같은 조합형 언어는 사진처럼 6번보다 더 많이 이벤트가 발생할 수도 있습니다).&lt;br /&gt;
거기에 ‘ㅈ’, ‘젤’, ‘제롳’는 제대로 된 검색 결과가 나오지 않을 것 같은 검색어입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/202007/image01.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이와 같은 낭비는 유료 API를 사용했을 때 큰 문제가 됩니다.&lt;br /&gt;
만약 구글지도 API 같은 것을 사용할 때 위와 같이 쿼리를 10번 날리면 어마어마한 손해입니다.&lt;br /&gt;
쿼리 하나가 다 돈이거든요.&lt;br /&gt;
따라서 디바운싱은 비용적인 문제와도 관련이 있습니다.&lt;br /&gt;
우리는 마지막 ‘제로초’를 다 쳤을 때 ajax 요청을 보내고 싶습니다.&lt;/p&gt;

&lt;p&gt;먼저 어떻게 구현할지 생각해봅시다.&lt;br /&gt;
보통 사람들은 타자를 연달아 칩니다.&lt;br /&gt;
중간에 잠시 생각하느라 몇 초 쉴수는 있겠지만 대부분 한번에 검색어를 입력합니다.&lt;br /&gt;
따라서 입력이 다 끝난 후에 요청을 보내면 됩니다.&lt;br /&gt;
즉 타자를 칠 때(input 이벤트 발생)마다 타이머를 설정합니다.&lt;br /&gt;
200ms 동안 입력이 없으면 입력이 끝난 것으로 칩니다(시간은 적당히 설정하면 됩니다).&lt;br /&gt;
200ms 이전에 타자 입력이 발생하면 이전 타이머는 취소하고 새로운 타이머를 다시 설정하는 겁니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;clearTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;여기에 ajax 요청&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 더는 여러번 호출되지 않습니다.&lt;br /&gt;
이게 바로 &lt;strong&gt;디바운싱&lt;/strong&gt;입니다.&lt;br /&gt;
&lt;strong&gt;한글 특성상 마지막에 두번 호출되는 경우도 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/202007/image02.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;쓰로틀링&quot;&gt;쓰로틀링&lt;/h3&gt;

&lt;p&gt;쓰로틀링은 보통 성능 문제 때문에 많이 사용합니다.&lt;br /&gt;
특성 자체가 실행 횟수에 제한을 거는 것이기도 하고요.&lt;/p&gt;

&lt;p&gt;스크롤을 올리거나 내릴 때 scroll 이벤트가 매우 많이 발생합니다.&lt;br /&gt;
scroll 이벤트가 발생할 때 뭔가 복잡한 작업을 하도록 설정했다면 매우 빈번하게 실행되기 때문에 엄청 렉이 
걸릴 것입니다.&lt;br /&gt;
그럴 때 쓰로틀링을 걸어줍니다.&lt;br /&gt;
몇 초에 한 번, 도는 몇 밀리초에 한 번씩만 실행되게 제한을 두는 것이죠.&lt;/p&gt;

&lt;p&gt;디바운싱으로 구현했던 ajax 검색을 쓰로틀링으로 대체해도 됩니다.&lt;br /&gt;
물론 쿼리는 조금 더 날리겠지만요.&lt;br /&gt;
한번 구현해보겠습니다.&lt;br /&gt;
똑같이 200ms 초 제한을 걸었습니다.&lt;br /&gt;
타이머가 설정되어 있으면 아무 동작도 하지 않고, 타이머가 없다면 타이머를 설정합니다.&lt;br /&gt;
타이머는 일정 시간 후에 스스로를 해제하고, ajax 요청을 날리게 하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;여기에 ajax 요청&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 최소 200ms 마다 요청을 보냅니다.&lt;br /&gt;
물론 ajax 검색은 디바운싱으로 처리하는 게 더 나아보입니다.&lt;br /&gt;
하지만 중간 중간 검색 결과도 보여주고 싶다면 쓰로틀링도 괜찮은 옵션인 것 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/202007/image03.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;물론 매우 빠르게 구현한 것이기 때문에 이 코드로는 예외 사항들을 처리하지 못할수도 있습니다.&lt;br /&gt;
&lt;strong&gt;underscore&lt;/strong&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;_.debounce&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;_.throttle&lt;/code&gt;을 추천합니다.&lt;/p&gt;

&lt;p&gt;이렇게 디바운싱과 쓰로틀에 대해 알아보았습니다.&lt;br /&gt;
코드는 잊어버리셔도 좋습니다.&lt;br /&gt;
하지만 용어는 기억해두세요.&lt;br /&gt;
그래야 나중에 다시 검색할 수 있습니다.&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Jul 2020 23:23:00 +0900</pubDate>
        <link>http://localhost:4000/project/2020/07/31/project2.html</link>
        <guid isPermaLink="true">http://localhost:4000/project/2020/07/31/project2.html</guid>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>gitlab branch merged 의미</title>
        <description>&lt;h2 class=&quot;cont_title&quot; id=&quot;gitlab-branch-merged-의미&quot;&gt;gitlab branch merged 의미&lt;/h2&gt;

&lt;p&gt;gitlab branch 목록의 &lt;code class=&quot;highlighter-rouge&quot;&gt;merged&lt;/code&gt; badge 의미&lt;br /&gt;
해당 브랜치의 내용은 default 브랜치에 이미 다 있다 라는 뜻..으로 추측&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Jul 2020 14:06:00 +0900</pubDate>
        <link>http://localhost:4000/gitlab/2020/07/31/gitlab.html</link>
        <guid isPermaLink="true">http://localhost:4000/gitlab/2020/07/31/gitlab.html</guid>
        
        
        <category>gitlab</category>
        
      </item>
    
      <item>
        <title>다른 브랜치에서 특정 파일들만 갖고오고 싶을 때</title>
        <description>&lt;h2 id=&quot;다른-브랜치에서-특정-파일들만-갖고오고-싶을-때&quot;&gt;다른 브랜치에서 특정 파일들만 갖고오고 싶을 때&lt;/h2&gt;

&lt;p&gt;master 브랜치에 다른 브랜치의 특정 내용을 가져오고 싶을 때&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;브랜치이름&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; pc/dist
git checkout &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;브랜치이름&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; mobile/dist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 31 Jul 2020 14:01:00 +0900</pubDate>
        <link>http://localhost:4000/git/2020/07/31/git.html</link>
        <guid isPermaLink="true">http://localhost:4000/git/2020/07/31/git.html</guid>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>throttle, debounce &amp; difference</title>
        <description>&lt;h2 id=&quot;throttle-debounce--difference&quot;&gt;throttle, debounce &amp;amp; difference&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;스로틀(Throttle)&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;디바운스(Debounce)&lt;/code&gt;란 무엇일까?&lt;/p&gt;

&lt;p&gt;이 두 가지 방법 모두 &lt;strong&gt;DOM 이벤트를 기반으로 실행하는 자바스크립트를 성능상의 이유로 JS의 양적인 측면, 즉 이벤트(event)를 제어(제한)&lt;/strong&gt;하는 방법이다.&lt;br /&gt;
예를 들어, 웹/앱 사용자가 스크롤(scroll wheel), 트랙패드, 스크롤 막대를 드래깅한다고 가정해 봅니다.&lt;br /&gt;
스크롤(scroll wheel), 트랙패드, 스크롤 막대를 드래깅을 하게 되면 사용자는 크게 느끼지 못할 수 있으나 이 행위로 인해 수많은 스크롤 이벤트가 발생하게 됩니다.&lt;/p&gt;

&lt;p&gt;즉, &lt;strong&gt;사용자가 아래로 5000px 정도의 스크롤 다운을 한다면 100개 이상의 이벤트가 발생될 가능성이 큽니다.&lt;/strong&gt;&lt;br /&gt;
이러한 스크롤(scroll wheel), 트랙패드, 스크롤 막대를 드래깅함으로써 매번 스크롤 이벤트에 대한 콜백(callback)이 발생하고 그 콜백이 수행하는 일이 매우 큰 리소스를 잡아먹게 될 것입니다.&lt;br /&gt;
다시 말해, 과도한 이벤트 횟수의 실행으로 이벤트 핸들러가 무거운 계산 및 기타 DOM 조작과 같은 작업을 수없이 많이 수행하는 경우 성능 문제가 발생하고 이는 사용자 경험까지 떨어뜨리게 될 것입니다.&lt;/p&gt;

&lt;p&gt;다음은 위에 설명드린 상황과 유사한 예제입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codepen.io/jaehee/pen/PXzOzV&quot; target=&quot;_blank&quot;&gt;https://codepen.io/jaehee/pen/PXzOzV&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이러한 문제는 2011년에 트위터 웹사이트에서 트위터를 스크롤할 때 속도가 느려지고 응답이 없는 현상이 나타났습니다.&lt;br /&gt;
jQuery 창시자인 존 레식(John Resig)은 스크롤 이벤트에 값 비싼 기능을 직접 부착하는 것이 얼마나 나쁜 것인지에 대한 블로그 게시물을 게시했습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;존 레식 2011년 글&lt;/strong&gt;&lt;br /&gt;
지난 주 트위터에서 문제가 발생하여 많은 사용자들이 웹 사이트를 사용할 수 없게 되었습니다.&lt;br /&gt;
스크롤 시도가 너무 느려서 사이트가 응답하지 않는 것처럼 보입니다.&lt;/p&gt;

  &lt;p&gt;트위터 팀은 조사한 결과 1.4.4에서 1.4.2로 사용했던 jQuery 버전을 되돌리면 사이트가 다시 반응할 것이라고 판단했습니다.&lt;br /&gt;
더 조사한 결과 느린 코드가 컨텍스트 선택기에서 클래스 이름으로 항목을 검색하는 것으로 나타났습니다.&lt;br /&gt;
(예: $something.find(‘.class’))&lt;/p&gt;

  &lt;p&gt;어떻게 이런 일이 일어났나?&lt;br /&gt;
우선 jQuery 1.4.4에는 아무런 문제가 없습니다.&lt;br /&gt;
이 특정 성능 회귀는 jQuery 1.4.3에 있습니다.&lt;br /&gt;
1.4.3에서는 상황에 맞는 쿼리에 기존 Sizzle 선택기 엔진을 사용하는 것에서 브라우저의 기본 &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt; 메서드(있는 경우)를 사용하는 것으로 
전환했습니다.&lt;br /&gt;
이 변경 사항은 1.4.3 릴리스 노트에서 명시적으로 언급되고 강조되었으므로 정말 좋은 변경 사항입니다.&lt;br /&gt;
일반적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt;을 사용하면 특히 복잡한 쿼리 및 복잡한 문서(많은 것으로 보이는)에 대해 훨씬 빠른 쿼리가 발생합니다.&lt;/p&gt;

  &lt;p&gt;그러나 모든 성능 변경과 마찬가지로 일부 항목은 더 빨라지지만 일부 항목은 느려질 수 있습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;.find(&quot;.class&quot;)&lt;/code&gt;(존재하는 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;getElementsByClassName&lt;/code&gt;을 사용하는 경우) 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;.find(&quot;div&quot;)&lt;/code&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;getElementsByTagName&lt;/code&gt;을 사용하는 경우)와 같은 
이전에 최적화 된 쿼리의 경우입니다.&lt;br /&gt;
위에서 언급한 두 가지 방법 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt;을 통해 실행되는 쿼리보다 항상 더 빠릅니다.&lt;br /&gt;
이것이 항상 사건이 될지 여부는 전적으로 다른 질문입니다.&lt;/p&gt;

  &lt;p&gt;&lt;mark&gt;즉, 위 말은 .find() 메소드를 클래스명으로 찾냐, 태그이름으로 찾냐에 따라 `getElementsByClassName`로 찾던지 `getElementsByTagName` 이걸로 찾던지 하는게 더 빠르다는 내용이다.  
그냥 무턱대고 `querySelectorAll` 이걸로 찾는 것보다. ㅇㅋ?&lt;/mark&gt;&lt;/p&gt;

  &lt;p&gt;여기서 흥미로운 점은 jQuery의 기본 선택기 엔진에 대해 &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt;을 꽤 오랫동안 사용하고 있다는 것입니다($(‘.class’)는 &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt;을 사용함).&lt;br /&gt;
&lt;strong&gt;1.4.3의 유일한 변경 사항은 .find(‘.class’)가 &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt;을 사용하지 않는 차이를 메우는 것입니다.&lt;/strong&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;$('.class')&lt;/code&gt; 사용과 관련된 특정 성능 회귀에 대해서는 들어본 적이 없습니다.&lt;/p&gt;

  &lt;p&gt;이것은 중요한 점을 제시합니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt;에 비해 &lt;code class=&quot;highlighter-rouge&quot;&gt;getElementsByClassName&lt;/code&gt;가 얼마나 더 빠를까요?&lt;br /&gt;
예비 테스트에서는 브라우저에 따라 약 0.5 ~ 2배 더 빨랐습니다.&lt;br /&gt;
이것은 분명히 차이가 나긴 나지만 무시할만한 수준입니다.&lt;br /&gt;
&lt;strong&gt;예를 들어 Firefox 3.6에서 클래스 이름으로 검색하는 것과 쿼리하는 것의 차이점은 약 0.007입니다.&lt;/strong&gt;&lt;br /&gt;
물론 큰 응용 프로그램을 손상시킬 수 있는 것은 없습니다.&lt;/p&gt;

  &lt;p&gt;즉, 성능 회귀가 마음에 들지 않기 때문에 오늘은 일반적인 경우에 대한 성능을 향상시키기 위해 지글(jQuery의 Sizzle)로 일부 바로가기를 백포트했씁니다.&lt;br /&gt;
예를 들어 Sizzle(“div”), Sizzle(“.foo”) 및 Sizzle(“#id”)는 &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt;을 사용하여 건너뛰고 브라우저에서 제공하는 기본 메소드가 있는 경우 이를 사용하려고 합니다.&lt;br /&gt;
(jQuery는 이미 이들 중 일부를 수행했습니다.) (즉, “div” 및 “#id”, 우리는 “.foo” 바로 가기도 추가했습니다.)&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;그래서, 성능 저하가 그다지 크지 않은 경우 왜 트위터에 많은 문제가 있었습니까?&lt;/strong&gt;&lt;br /&gt;
현실은 이 특별한 변화가 낙타의 등을 부러뜨린 빨대일 뿐이라는 것입니다.&lt;br /&gt;
트위터에 문제를 일으킨 두가기 것들이 있습니다.&lt;br /&gt;
이것들은 두가지 일반적인 모범 사례로 나눌 수 있습니다.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;모범사례&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;핸들러를 창 스크롤 이벤트에 첨부하는 것은 매우 나쁜생각입니다.&lt;/strong&gt;&lt;br /&gt;
브라우저에 따라 스크롤 이벤트가 많이 발생하고 스크롤 콜백에 코드를 넣으면 페이지 스크롤 시도 속도가 느려집니다(좋은 생각은 아닙니다).&lt;br /&gt;
결과적으로 스크롤 처리기의 성능 저하는 전체적으로 스크롤 성능을 저하시킵니다.&lt;br /&gt;
대신 어떤 형태의 타이머를 사용하여 매 X밀리 초마다 확인하거나 스크롤 이벤트를 첨부하고 지연 후 (또는 주어진 실행 횟수 후-지연 후) 코드를 실행하는 것이 
훨씬 좋습니다.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;재사용중인 선택기 쿼리를 항상 캐시하십시오.&lt;/strong&gt;&lt;br /&gt;
왜 스크롤 이벤트가 발생할 때마다 트위터가 DOM을 다시 쿼리하기로 결정했는지는 확실하지 않지만 스크롤 자체가 DOM을 변경하지 않았기 때문에 이것이
필요하지 않은 것 같습니다.&lt;br /&gt;
단일 쿼리 결과를 변수에 저장하고 재사용할 때마다 찾아볼 수 있었습니다.&lt;br /&gt;
결과적으로 쿼리 오버 헤드가 전혀 발생하지 않습니다(더 빠른 &lt;code class=&quot;highlighter-rouge&quot;&gt;getElementsByClassName&lt;/code&gt; 코드를 사용하는 것보다 낫습니다.)&lt;/p&gt;

  &lt;p&gt;따라서이 두 가지 기술을 결합하면 결과 코드는 다음과 같습니다.&lt;/p&gt;

  &lt;pre&gt;&lt;code class=&quot;language-jQuery&quot;&gt;  var outerPane = $details.find(&quot;.details-pane-outer&quot;),
      didScroll = false;
    
  $(window).scroll(function() {
      didScroll = true;
  });
    
  setInterval(function() {
      if ( didScroll ) {
          didScroll = false;
          // Check your page position and then
          // Load in more results
      }
  }, 250);
&lt;/code&gt;&lt;/pre&gt;

  &lt;p&gt;이것이 명확하게 정리하고 미래의 무한 스크롤 페이지 개발자에게 좋은 조언을 제공하기를 바랍니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;당시에 존 레식이 제안안 해결책은 &lt;code class=&quot;highlighter-rouge&quot;&gt;onScroll&lt;/code&gt; 이벤트 외부에서 일정 시간마다 250ms씩 실행되는 루프였고, 그렇게하면 과도한 이벤트 처리가 되지 않습니다.&lt;br /&gt;
이 간단한 기술로 사용자 경험을 망치지 않을 수 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;요즘에는 그 당시보다 이벤트 처리하는 정교한 방법으로 사용되는 것이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Throttle&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Debounce&lt;/code&gt;이란 해결책입니다.&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Throttle&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;Debounce&lt;/code&gt;는 &lt;mark&gt;이벤트 핸들러가 많은 연산(예 : 무거운 계산 및 기타 DOM 조작)을 수행(이벤트 핸들러의 과도한 횟수가 발생하는 것)하는 경우에 대해 제약을 
걸어 제어할 수 있는 수준으로 이벤트를 발생(그 핸들러를 더 적게 실행하면 빠져나갈 수 있음)시키는 것을 목표&lt;/mark&gt;로 하는 기술입니다.&lt;/p&gt;

&lt;h3 id=&quot;throttle과-debounce-사용-사례&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Throttle&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;Debounce&lt;/code&gt; 사용 사례&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;사용자가 창 크기 조정을 멈출 때까지 기다렸다가 &lt;code class=&quot;highlighter-rouge&quot;&gt;resizing event&lt;/code&gt; 사용하기 위해&lt;/li&gt;
  &lt;li&gt;사용자가 키보드 입력을 중지(예: 검색창) 할 때까지 ajax 이벤트를 발생시키지 않기 위해&lt;/li&gt;
  &lt;li&gt;페이지의 스크롤 위치를 측정하고 최대 50ms 마다 응답하기를 바랄 경우에&lt;/li&gt;
  &lt;li&gt;앱에서 요소를 드래그할 때 좋은 성능을 보장하기 위해&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;디바운스(debounce)와 스로틀(throttle)은 시간이 지남에 따라 함수를 몇 번이나 실행할지를 제어하는 &lt;mark&gt;유사한 기술이지만 서로 다릅니다.&lt;/mark&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;디바운스 또는 스로틀은 DOM 이벤트에 함수를 첨부할 때 특히 유용합니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;그 이유는 이벤트와 함수 실행 사이에 제어 계층을 제공하기 때문입니다.&lt;/strong&gt;&lt;br /&gt;
그리고 기억해야 할 것은 DOM 이벤트가 얼마나 자주 내보내질지는 제어하지 않는다는 것을 알아야 합니다.&lt;/p&gt;

&lt;p&gt;해당 기술과 그 차이점에 대해 알아보도록 하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;debounce&quot;&gt;Debounce&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Debounce&lt;/code&gt;는 이벤트를 그룹화하여 특정시간이 지난 후 하나의 이벤트만 발생하도록 하는 기술입니다.&lt;br /&gt;
즉, 순차적 호출을 하나의 그룹으로 “그룹화”할 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;debounce&lt;/code&gt; : 연이어 호출되는 함수들 중 마지막 함수(또는 제일 처음)만 호출되도록 하는 것&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/202007/image00.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;당신이 엘레베이터 안에 있다고 상상해 보세요.&lt;br /&gt;
문이 닫히기 시작하고 갑자기 다른 사람이 타려고 한다면 엘리베이터가 층으로 이동하는 기능을 시작하지 않아서 문이 다시 열리게 됩니다.&lt;br /&gt;
그리고 또 다른 사람에 의해 층의 이동 변경 기능이 일어나게 됩니다.&lt;br /&gt;
즉, 엘리베이터는 기능을 지연시키고 있지만(층간 이동), 자원을 최적화하게 됩니다.&lt;/p&gt;

&lt;p&gt;단추를 클릭하거나 마우스 위로 움직여 디바운스의 예제를 확인해보세요.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codepen.io/jaehee/pen/XoKeRW&quot; target=&quot;_blank&quot;&gt;https://codepen.io/jaehee/pen/XoKeRW&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 예제에서 연속적인 빠른 이벤트가 단일 디바운싱 이벤트로 어떻게 표현되는지 볼 수 있습니다.&lt;br /&gt;
&lt;strong&gt;그러나 이벤트가 큰 간격으로 발생되면 디바운싱은 발생하지 않습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;리사이즈-예제resize-example&quot;&gt;리사이즈 예제(Resize Example)&lt;/h3&gt;

&lt;p&gt;데스크탑의 브라우저 창 크기를 조정하는 경우에 많은 크기 창 조정 이벤트를 내보낼 수 있습니다.&lt;br /&gt;
다음은 브라우저 창 조정에 대한 데모입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codepen.io/jaehee/pen/GPqOaK&quot; target=&quot;_blank&quot;&gt;https://codepen.io/jaehee/pen/GPqOaK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;보시다시피 resize 이벤트에 대해 마지막을 추적하고 있습니다.&lt;br /&gt;
&lt;strong&gt;왜냐하면 우리는 사용자가 브라우저 크기를 조정하지 않은 최종 값에만 관심이 있기 때문입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;ajax-요청이있는-자동-완성-양식의-키-누르기-예제&quot;&gt;Ajax 요청이있는 자동 완성 양식의 키 누르기 예제&lt;/h3&gt;

&lt;p&gt;요즘 서비스들은 검색어 치자마자 엔터 없이도 결과가 바로바로 나옵니다.&lt;br /&gt;
만약 ‘제로초’를 검색창에 친다고 합시다.&lt;br /&gt;
&lt;strong&gt;엔터 없이도 결과를 즉시 보여주려면 항상 input 이벤트에 대기하고 있어야 합니다.&lt;/strong&gt;&lt;br /&gt;
문제는 한 글자 칠 때마다 ajax 요청이 실행된다는 것입니다.&lt;br /&gt;
‘ㅈ’, ‘제’, ‘젤’, ‘제로’, ‘제롳’, ‘제로초’ 모두 요청이 실행됩니다.&lt;br /&gt;
6번이나 요청을 했습니다(&lt;strong&gt;한글같은 조합형 언어는 사진처럼 6번보다 더 많이 이벤트가 발생할 수도 있습니다&lt;/strong&gt;).&lt;br /&gt;
거기에 ‘ㅈ’, ‘젤’, ‘제롳’는 제대로 된 검색 결과가 나오지 않을 것 같은 검색어입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이와 같은 낭비는 유료 API를 사용했을 때 큰 문제가 됩니다.&lt;/strong&gt;&lt;br /&gt;
만약 구글지도 API 같은 것을 사용할 때 위와 같이 쿼리를 10번 날리면 어마어마한 손해입니다.&lt;br /&gt;
쿼리 하나가 다 돈이거든요.&lt;br /&gt;
&lt;strong&gt;따라서 디바운싱은 비용적인 문제와도 관련이 있습니다.&lt;/strong&gt;&lt;br /&gt;
그렇기 때문에 마지막 ‘제로초’를 다 쳤을 때 ajax 요청을 보내야 할 것입니다.&lt;/p&gt;

&lt;p&gt;다음은 위와 같은 유사한 예제입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codepen.io/jaehee/pen/JwKMGw&quot; target=&quot;_blank&quot;&gt;https://codepen.io/jaehee/pen/JwKMGw&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;throttle&quot;&gt;Throttle&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Throttle&lt;/code&gt;은 이벤트를 일정한 주기마다 발생하도록 하는 기술입니다.&lt;br /&gt;
예를 들어 Throttle의 설정시간으로 1ms를 주게되면 해당 이벤트는 1ms 동안 최대 한번만 발생하게 됩니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Throttle&lt;/code&gt; : 마지막 함수가 호출된 후 일정 시간이 지나기 전에 다시 호출되지 않도록 하는 것&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;특성 자체가 실행 횟수에 제한을 거는 것이기 때문에 일반적으로 성능 문제 때문에 많이 사용합니다.&lt;br /&gt;
스크롤을 올리거나 내릴 때 scroll 이벤트 핸들러 경우에 매우 많이 발생합니다.&lt;br /&gt;
scroll 이벤트가 발생할 때 뭔가 복잡한 작업을 하도록 설정했다면 매우 빈번하게 실행되기 때문에 큰 버퍼링이 걸릴지도 모를 것입니다.&lt;br /&gt;
그럴때 쓰로틀링을 사용할 수 있습니다.&lt;br /&gt;
몇 초에 한번, 또는 몇 밀리초에 한번씩만 실행되게 제한을 두는 것입니다.&lt;/p&gt;

&lt;h3 id=&quot;무한-스크롤링-페이지infinite-scrolling-page&quot;&gt;무한 스크롤링 페이지(infinite scrolling page)&lt;/h3&gt;

&lt;p&gt;사용자가 &lt;code class=&quot;highlighter-rouge&quot;&gt;footer&lt;/code&gt;에서 얼마나 떨어져 있는지 확인해야하고 사용자가 맨 아래로 스크롤 했다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ajax&lt;/code&gt;를 통해 더 많은 콘텐츠를 요청하여 페이지에 추가해야 합니다.&lt;/p&gt;

&lt;p&gt;디바운싱은 사용자가 스크롤을 멈출 때만 이벤트를 발생시키므로 디바운싱보다는 스로틀이 적합할 수 있습니다.&lt;br /&gt;
사용자가 footer에 도달하기 전에 컨텐츠를 가져와야 하기 때문입니다.&lt;br /&gt;
throttle을 통해 사용자 위치가 얼마나 footer로 부터 떨어져 있는지 항상 확인할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codepen.io/jaehee/pen/GPqyGj&quot; target=&quot;_blank&quot;&gt;https://codepen.io/jaehee/pen/GPqyGj&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;애니메이션-프레임-예제&quot;&gt;애니메이션 프레임 예제&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codepen.io/jaehee/pen/BvzJOR&quot; target=&quot;_blank&quot;&gt;https://codepen.io/jaehee/pen/BvzJOR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;debounce와-throttle-차이점&quot;&gt;Debounce와 Throttle 차이점&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Info&lt;/strong&gt;&lt;br /&gt;
디바운싱과 스로틀의 가장 큰 차이점은 스로틀은 적어도 X밀리 초마다 정기적으로 기능 실행을 보장한다는 것입니다.&lt;br /&gt;
Debounce는 아무리 많은 이벤트가 발생해도 모두 무시하고 특정 시간사이에 어떤 이벤트도 발생하지 않았을 때 딱 한번만 
마지막 이벤트를 발생시키는 기법입니다.&lt;br /&gt;
따라서 &lt;strong&gt;5ms&lt;/strong&gt;가 지나기전에 계속 이벤트가 발생할 경우 콜백에 반응하는 이벤트는 발생하지 않고 계속 무시됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;debounce와-throttle-차이점-예제-간단히-살펴보기&quot;&gt;Debounce와 Throttle 차이점 예제 간단히 살펴보기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codepen.io/jaehee/pen/jXrYQz&quot; target=&quot;_blank&quot;&gt;https://codepen.io/jaehee/pen/jXrYQz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;참고자료&quot;&gt;참고자료&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://sunkyun.com/community/bbs/board.php?bo_table=script&amp;amp;wr_id=23&quot; target=&quot;_blank&quot;&gt;http://sunkyun.com/community/bbs/board.php?bo_table=script&amp;amp;wr_id=23&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/28103125/disable-inertia-scroll-for-single-page-webapp&quot; target=&quot;_blank&quot;&gt;https://stackoverflow.com/questions/28103125/disable-inertia-scroll-for-single-page-webapp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://webclub.tistory.com/607&quot; target=&quot;_blank&quot;&gt;https://webclub.tistory.com/607&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://johnresig.com/blog/learning-from-twitter/&quot; target=&quot;_blank&quot;&gt;https://johnresig.com/blog/learning-from-twitter/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://css-tricks.com/debouncing-throttling-explained-examples/&quot; target=&quot;_blank&quot;&gt;https://css-tricks.com/debouncing-throttling-explained-examples/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zerocho.com/category/JavaScript/post/59a8e9cb15ac0000182794fa&quot; target=&quot;_blank&quot;&gt;https://www.zerocho.com/category/JavaScript/post/59a8e9cb15ac0000182794fa&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/API/Document/scroll_event&quot; target=&quot;_blank&quot;&gt;https://developer.mozilla.org/ko/docs/Web/API/Document/scroll_event&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/API/Window/resize_event&quot; target=&quot;_blank&quot;&gt;https://developer.mozilla.org/ko/docs/Web/API/Window/resize_event&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://project42da.github.io/javascript/2019/05/08/raf-perform.html&quot; target=&quot;_blank&quot;&gt;https://project42da.github.io/javascript/2019/05/08/raf-perform.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://asfirstalways.tistory.com/362&quot; target=&quot;_blank&quot;&gt;https://asfirstalways.tistory.com/362&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jbee.io/web/optimize-scroll-event/&quot; target=&quot;_blank&quot;&gt;https://jbee.io/web/optimize-scroll-event/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sculove.github.io/blog/2018/01/18/javascriptflow/&quot; target=&quot;_blank&quot;&gt;http://sculove.github.io/blog/2018/01/18/javascriptflow/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://css-tricks.com/the-difference-between-throttling-and-debouncing/&quot; target=&quot;_blank&quot;&gt;https://css-tricks.com/the-difference-between-throttling-and-debouncing/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://davidwalsh.name/javascript-debounce-function&quot; target=&quot;_blank&quot;&gt;https://davidwalsh.name/javascript-debounce-function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 30 Jul 2020 16:47:00 +0900</pubDate>
        <link>http://localhost:4000/project/2020/07/30/project.html</link>
        <guid isPermaLink="true">http://localhost:4000/project/2020/07/30/project.html</guid>
        
        
        <category>project</category>
        
      </item>
    
  </channel>
</rss>
