<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-04-19T02:52:20+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">LHJ</title><subtitle>coding blog</subtitle><entry><title type="html">3.12 객체</title><link href="http://localhost:4000/javascript/2020/04/19/javascript42/" rel="alternate" type="text/html" title="3.12 객체" /><published>2020-04-19T02:16:00+09:00</published><updated>2020-04-19T02:16:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/19/javascript42</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/19/javascript42/">&lt;p&gt;원시 타입은 단 하나의 값만 나타낼 수 있고 불변이지만,&lt;br /&gt;
&lt;strong&gt;이와 달리 객체는 여러 가지 값이나 복잡한 값을 나타낼 수 있으며, 변할 수도 있습니다.&lt;/strong&gt;&lt;br /&gt;
객체의 본질은 &lt;strong&gt;컨테이너&lt;/strong&gt;입니다.&lt;br /&gt;
컨테이너의 내용물은 시간이 지나면서 바뀔 수 있지만, 내용물이 바뀐다고 컨테이너가 바뀌는 건 아닙니다.&lt;br /&gt;
즉, 여전히 같은 객체입니다.&lt;br /&gt;
&lt;strong&gt;객체에도 중괄호, 즉 {과 }를 사용하는 리터럴 문법이 있습니다.&lt;/strong&gt;&lt;br /&gt;
중괄호는 한 쌍이므로 객체가 어디에서 시작하고 어디에서 끝나는지 나타낼 수 있습니다.&lt;br /&gt;
빈 객체로 시작해 봅시다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;NOTE_&lt;/strong&gt; 객체 이름은 아무거나 써도 되지만, 일반적으로 user나 shoppingCart 처럼 의미를 알 수 있는 이름을 써야 합니다.&lt;br /&gt;
우리는 이제 막 객체에 대해 배우는 중이고 이 예제의 객체가 무언가를 나타내는 것은 아니니 그냥 obj라고 부릅니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;객체의 컨텐츠는 &lt;strong&gt;프로퍼티(property)&lt;/strong&gt; 또는 &lt;strong&gt;멤버(member)&lt;/strong&gt; 라고 부릅니다.&lt;br /&gt;
프로퍼티는 이름(키)과 값으로 구성됩니다.&lt;br /&gt;
&lt;strong&gt;프로퍼티 이름은 반드시 문자열 또는 심볼이어야 하며, 값은 어떤 타입이든 상관없고 다른 객체여도 괜찮습니다.&lt;/strong&gt;&lt;br /&gt;
obj에 color 프로퍼티를 추가합시다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;yellow&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;프로퍼티 이름에 유효한 식별자를 써야 &lt;strong&gt;멤버 접근 연산자(member access operator)(.)&lt;/strong&gt; 를 사용할 수 있습니다.&lt;br /&gt;
프로퍼티 이름에 유효한 식별자가 아닌 이름을 쓴다면 &lt;strong&gt;계산된 멤버 접근 연산자(computed member access operator)([])&lt;/strong&gt; 를 써야 합니다.&lt;br /&gt;
&lt;em&gt;(이후 멤버 접근 연산자는 ‘점 연산자’, 계산된 멤버 접근 연산자는 ‘대괄호’라고 간단하게 표기하겠습니다.)&lt;/em&gt;&lt;br /&gt;
프로퍼티 이름이 유효한 식별자여도 대괄호로 접근할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;not an identifier&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;not an identifier&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;yellow&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;심볼 프로퍼티에 접근할 때도 대괄호를 사용합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 obj에는 “color” (유효한 식별자 문자열), “not an identifier” (유효한 식별자가 아닌 문자열), SIZE(심볼) 세 가지 프로퍼티가 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;NOTE_&lt;/strong&gt; 자바스크립트 콘솔에서 이 예제를 실행해 보면 콘솔에서는 SIZE를 obj의 프로퍼티로 나열하지 않는 걸 볼 수 있습니다(&lt;code class=&quot;highlighter-rouge&quot;&gt;console.log(obj)&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/learningjs/image30.jpg&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;obj[SIZE]&lt;/code&gt;를 입력해 보면 SIZE가 obj의 프로퍼티인 것을 확인할 수 있지만, &lt;strong&gt;심볼 프로퍼티는 다르게 처리되며 기본적으로는 표시되지 않습니다.&lt;/strong&gt;&lt;br /&gt;
또한, 이 프로퍼티의 키는 SIZE 심볼이며 문자열 “SIZE”가 아닙니다.&lt;br /&gt;
obj.SIZE = 0을 입력한 후 obj[SIZE]와 obj.SIZE(또는 obj[“SIZE”])를 입력해 보면 이 사실을 확인할 수 있습니다.(&lt;strong&gt;점 연산자는 문자열 프로퍼티에 대해 항상 동작합니다.&lt;/strong&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 단계에서 잠시 멈추고 원시 값과 객체의 차이에 대해 되새겨 봅시다.&lt;br /&gt;
이 섹션에서 우리는 변수 obj에 저장된 객체를 저장했지만, obj는 &lt;strong&gt;항상 같은 객체를 가리키고&lt;/strong&gt; 있었습니다.&lt;br /&gt;
&lt;strong&gt;obj에 저장한 것이 문자열이나 숫자, 기타 다른 원시 값이었다면 수정할 때마다 다른 값을 가리켰을 겁니다.&lt;/strong&gt;&lt;br /&gt;
달리 말해 obj는 계속 같은 객체를 가리키고, 바뀐 것은 객체의 프로퍼티입니다.&lt;br /&gt;
(&lt;strong&gt;역주_ 참조형과 원시형의 차이 및 동작에 관해서는 3장의 마지막 부분에 따로 설명합니다.&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;obj는 빈 객체로 만들었지만, &lt;strong&gt;객체 리터럴 문법&lt;/strong&gt;에서는 객체를 만드는 동시에 프로퍼티를 만들 수 있습니다.&lt;br /&gt;
중괄호 안에서 각 프로퍼티를 쉼표로 구분하고, 프로퍼티 이름과 값은 콜론으로 구분합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sam1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Sam&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sam2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Sam&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 한 줄로 선언했습니다.&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sam3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Sam&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;classification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 프로퍼티 값도 객체가 될 수 있습니다.&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;kingdom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Anamalis&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;phylum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Chordata&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Mamalia&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Carnivoria&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Felidae&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;subfamily&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Felinae&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;genus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Felis&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;species&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;catus&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">원시 타입은 단 하나의 값만 나타낼 수 있고 불변이지만, 이와 달리 객체는 여러 가지 값이나 복잡한 값을 나타낼 수 있으며, 변할 수도 있습니다. 객체의 본질은 컨테이너입니다. 컨테이너의 내용물은 시간이 지나면서 바뀔 수 있지만, 내용물이 바뀐다고 컨테이너가 바뀌는 건 아닙니다. 즉, 여전히 같은 객체입니다. 객체에도 중괄호, 즉 {과 }를 사용하는 리터럴 문법이 있습니다. 중괄호는 한 쌍이므로 객체가 어디에서 시작하고 어디에서 끝나는지 나타낼 수 있습니다. 빈 객체로 시작해 봅시다. const obj = {}; NOTE_ 객체 이름은 아무거나 써도 되지만, 일반적으로 user나 shoppingCart 처럼 의미를 알 수 있는 이름을 써야 합니다. 우리는 이제 막 객체에 대해 배우는 중이고 이 예제의 객체가 무언가를 나타내는 것은 아니니 그냥 obj라고 부릅니다. 객체의 컨텐츠는 프로퍼티(property) 또는 멤버(member) 라고 부릅니다. 프로퍼티는 이름(키)과 값으로 구성됩니다. 프로퍼티 이름은 반드시 문자열 또는 심볼이어야 하며, 값은 어떤 타입이든 상관없고 다른 객체여도 괜찮습니다. obj에 color 프로퍼티를 추가합시다. obj.color = &quot;yellow&quot;; 프로퍼티 이름에 유효한 식별자를 써야 멤버 접근 연산자(member access operator)(.) 를 사용할 수 있습니다. 프로퍼티 이름에 유효한 식별자가 아닌 이름을 쓴다면 계산된 멤버 접근 연산자(computed member access operator)([]) 를 써야 합니다. (이후 멤버 접근 연산자는 ‘점 연산자’, 계산된 멤버 접근 연산자는 ‘대괄호’라고 간단하게 표기하겠습니다.) 프로퍼티 이름이 유효한 식별자여도 대괄호로 접근할 수 있습니다. obj[&quot;not an identifier&quot;] = 3; obj[&quot;not an identifier&quot;]; // 3 obj[&quot;color&quot;]; // &quot;yellow&quot; 심볼 프로퍼티에 접근할 때도 대괄호를 사용합니다. const SIZE = Symbol(); obj[SIZE] = 8; obj[SIZE]; // 8 이제 obj에는 “color” (유효한 식별자 문자열), “not an identifier” (유효한 식별자가 아닌 문자열), SIZE(심볼) 세 가지 프로퍼티가 있습니다. NOTE_ 자바스크립트 콘솔에서 이 예제를 실행해 보면 콘솔에서는 SIZE를 obj의 프로퍼티로 나열하지 않는 걸 볼 수 있습니다(console.log(obj)). obj[SIZE]를 입력해 보면 SIZE가 obj의 프로퍼티인 것을 확인할 수 있지만, 심볼 프로퍼티는 다르게 처리되며 기본적으로는 표시되지 않습니다. 또한, 이 프로퍼티의 키는 SIZE 심볼이며 문자열 “SIZE”가 아닙니다. obj.SIZE = 0을 입력한 후 obj[SIZE]와 obj.SIZE(또는 obj[“SIZE”])를 입력해 보면 이 사실을 확인할 수 있습니다.(점 연산자는 문자열 프로퍼티에 대해 항상 동작합니다.) 이 단계에서 잠시 멈추고 원시 값과 객체의 차이에 대해 되새겨 봅시다. 이 섹션에서 우리는 변수 obj에 저장된 객체를 저장했지만, obj는 항상 같은 객체를 가리키고 있었습니다. obj에 저장한 것이 문자열이나 숫자, 기타 다른 원시 값이었다면 수정할 때마다 다른 값을 가리켰을 겁니다. 달리 말해 obj는 계속 같은 객체를 가리키고, 바뀐 것은 객체의 프로퍼티입니다. (역주_ 참조형과 원시형의 차이 및 동작에 관해서는 3장의 마지막 부분에 따로 설명합니다.) obj는 빈 객체로 만들었지만, 객체 리터럴 문법에서는 객체를 만드는 동시에 프로퍼티를 만들 수 있습니다. 중괄호 안에서 각 프로퍼티를 쉼표로 구분하고, 프로퍼티 이름과 값은 콜론으로 구분합니다. const sam1 = { name: 'Sam', age: 4, }; const sam2 = { name: 'Sam', age: 4 }; // 한 줄로 선언했습니다. const sam3 = { name: 'Sam', classification: { // 프로퍼티 값도 객체가 될 수 있습니다. kingdom: 'Anamalis', phylum: 'Chordata', class: 'Mamalia', order: 'Carnivoria', family: 'Felidae', subfamily: 'Felinae', genus: 'Felis', species: 'catus', } }</summary></entry><entry><title type="html">3.11 null과 undefined</title><link href="http://localhost:4000/javascript/2020/04/19/javascript41/" rel="alternate" type="text/html" title="3.11 null과 undefined" /><published>2020-04-19T02:08:00+09:00</published><updated>2020-04-19T02:08:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/19/javascript41</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/19/javascript41/">&lt;p&gt;null과 undefined는 자바스크립트의 특별한 타입입니다.&lt;br /&gt;
null이 가질 수 있는 값은 null 하나뿐이며, undefined가 가질 수 있는 값도 undefined 하나뿐입니다.&lt;br /&gt;
null과 undefined는 모두 존재하지 않는 것을 나타냅니다.&lt;br /&gt;
그리고 이 둘을 서로 다른 데이터 타입으로 분리한 것은 끝없는 혼란을 낳았고, 특히 초보자들이 고생하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;일반적인 규칙을 제시한다면, null은 프로그래머에게 허용된 데이터 타입이며 undefined는 자바스크립트 자체에서 사용한다고 기억하십시오.&lt;/strong&gt;&lt;br /&gt;
이 규칙이 강제는 아닙니다.&lt;br /&gt;
프로그래머도 언제든 undefined 값을 사용할 수는 있지만, 꼭 필요할 때만 사용하도록 주의해야 합니다.&lt;br /&gt;
&lt;strong&gt;필자가 변수에 직접 undefined를 할당하는 경우는, 아직 값이 주어지지 않은 변수의 동작을 고의로 흉내내야 할 때뿐입니다.&lt;/strong&gt;&lt;br /&gt;
변수의 값을 아직 모르거나 적용할 수 없는 경우에는 대부분 null이 더 나은 선택입니다.&lt;br /&gt;
사소한 것에 지나치게 신경쓰는 것처럼 보일 테고, 어떤 면에서는 실제로 그렇기도 합니다.&lt;br /&gt;
초보 프로그래머들은 불확실할 때는 null을 사용하라고 배우니까요.&lt;br /&gt;
변수를 선언하기만 하고 명시적으로 값을 할당하지 않으면 그 변수에는 기본적으로 undefined가 할당됩니다.&lt;br /&gt;
다음은 null 과 undefined 리터럴의 몇 가지 예제입니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentTemp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 암시적으로 undefined입니다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;targetTemp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 대상 온도는 null, 즉 &quot;아직 모르는&quot; 값입니다.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;currentTemp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;19.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// currentTemp에는 이제 값이 있습니다.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;currentTemp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// currentTemp는 초기화되지 않은 듯 합니다. 권장하지 않습니다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">null과 undefined는 자바스크립트의 특별한 타입입니다. null이 가질 수 있는 값은 null 하나뿐이며, undefined가 가질 수 있는 값도 undefined 하나뿐입니다. null과 undefined는 모두 존재하지 않는 것을 나타냅니다. 그리고 이 둘을 서로 다른 데이터 타입으로 분리한 것은 끝없는 혼란을 낳았고, 특히 초보자들이 고생하고 있습니다. 일반적인 규칙을 제시한다면, null은 프로그래머에게 허용된 데이터 타입이며 undefined는 자바스크립트 자체에서 사용한다고 기억하십시오. 이 규칙이 강제는 아닙니다. 프로그래머도 언제든 undefined 값을 사용할 수는 있지만, 꼭 필요할 때만 사용하도록 주의해야 합니다. 필자가 변수에 직접 undefined를 할당하는 경우는, 아직 값이 주어지지 않은 변수의 동작을 고의로 흉내내야 할 때뿐입니다. 변수의 값을 아직 모르거나 적용할 수 없는 경우에는 대부분 null이 더 나은 선택입니다. 사소한 것에 지나치게 신경쓰는 것처럼 보일 테고, 어떤 면에서는 실제로 그렇기도 합니다. 초보 프로그래머들은 불확실할 때는 null을 사용하라고 배우니까요. 변수를 선언하기만 하고 명시적으로 값을 할당하지 않으면 그 변수에는 기본적으로 undefined가 할당됩니다. 다음은 null 과 undefined 리터럴의 몇 가지 예제입니다. let currentTemp; // 암시적으로 undefined입니다. const targetTemp = null; // 대상 온도는 null, 즉 &quot;아직 모르는&quot; 값입니다. currentTemp = 19.5; // currentTemp에는 이제 값이 있습니다. currentTemp = undefined; // currentTemp는 초기화되지 않은 듯 합니다. 권장하지 않습니다.</summary></entry><entry><title type="html">3.10 심볼</title><link href="http://localhost:4000/javascript/2020/04/19/javascript40/" rel="alternate" type="text/html" title="3.10 심볼" /><published>2020-04-19T02:02:00+09:00</published><updated>2020-04-19T02:02:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/19/javascript40</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/19/javascript40/">&lt;p&gt;&lt;strong&gt;심볼(symbol)&lt;/strong&gt; 은 유일한 토큰을 나타내기 위해 ES6에서 도입한 새 데이터 타입입니다.&lt;br /&gt;
&lt;strong&gt;심볼은 항상 유일합니다.&lt;/strong&gt;&lt;br /&gt;
다른 어떤 심볼과도 일치하지 않습니다.&lt;br /&gt;
&lt;strong&gt;이런 면에서는 심볼은 객체와 유사합니다.&lt;/strong&gt;&lt;br /&gt;
객체는 모두 유일합니다.&lt;br /&gt;
항상 유일하다는 점을 제외하면 심볼은 원시 값의 특징을 모두 가지고 있으므로 확장성 있는 코드를 만들 수 있습니다.&lt;br /&gt;
여기에 대해서는 9장에서 더 설명합니다.&lt;/p&gt;

&lt;p&gt;심볼은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol()&lt;/code&gt; 생성자로 만듭니다.&lt;br /&gt;
&lt;strong&gt;(자바스크립트의 객체지향 프로그래밍에 익숙하다면 심볼을 만들 때 new 키워드를 사용할 수 없으며, 대문자로 시작하는 식별자는 new와 함께 쓴다는 불문율의 예외임을 새로 기억해야 합니다.)&lt;/strong&gt;&lt;br /&gt;
원한다면 생성자에 간단한 설명을 추가할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;The color of a sunset!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ORANGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;The color of a sunset!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;RED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ORANGE&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false; 심볼은 모두 서로 다릅니다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;우연히 다른 식별자와 혼동해서는 안 되는 고유한 식별자가 필요하다면 심볼을 사용하십시오.&lt;/p&gt;</content><author><name></name></author><summary type="html">심볼(symbol) 은 유일한 토큰을 나타내기 위해 ES6에서 도입한 새 데이터 타입입니다. 심볼은 항상 유일합니다. 다른 어떤 심볼과도 일치하지 않습니다. 이런 면에서는 심볼은 객체와 유사합니다. 객체는 모두 유일합니다. 항상 유일하다는 점을 제외하면 심볼은 원시 값의 특징을 모두 가지고 있으므로 확장성 있는 코드를 만들 수 있습니다. 여기에 대해서는 9장에서 더 설명합니다. 심볼은 Symbol() 생성자로 만듭니다. (자바스크립트의 객체지향 프로그래밍에 익숙하다면 심볼을 만들 때 new 키워드를 사용할 수 없으며, 대문자로 시작하는 식별자는 new와 함께 쓴다는 불문율의 예외임을 새로 기억해야 합니다.) 원한다면 생성자에 간단한 설명을 추가할 수 있습니다. const RED = Symbol(&quot;The color of a sunset!&quot;); const ORANGE = Symbol(&quot;The color of a sunset!&quot;); RED === ORANGE // false; 심볼은 모두 서로 다릅니다. 우연히 다른 식별자와 혼동해서는 안 되는 고유한 식별자가 필요하다면 심볼을 사용하십시오.</summary></entry><entry><title type="html">3.9 불리언</title><link href="http://localhost:4000/javascript/2020/04/19/javascript39/" rel="alternate" type="text/html" title="3.9 불리언" /><published>2020-04-19T00:23:00+09:00</published><updated>2020-04-19T00:23:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/19/javascript39</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/19/javascript39/">&lt;p&gt;불리언은 &lt;strong&gt;true&lt;/strong&gt;와 &lt;strong&gt;false&lt;/strong&gt; 두 가지 값밖에 없는 데이터 타입입니다.&lt;br /&gt;
C 같은 일부 언어에서는 불리언 대신 숫자를 사용합니다.&lt;br /&gt;
0은 false이고, 다른 숫자는 모두 true입니다.&lt;br /&gt;
&lt;strong&gt;자바스크립트에서도 비슷한 방식을 사용합니다.&lt;/strong&gt;&lt;br /&gt;
모든 값을 참 같은 값(truthy), 거짓 같은 값(falsy)으로 나눌 수 있습니다.&lt;br /&gt;
이에 대해서는 5장에서 다시 설명합니다.&lt;/p&gt;

&lt;p&gt;불리언을 쓸 생각이라면 따옴표 안에 넣지 않도록 조심하십시오.&lt;br /&gt;
문자열 “false”가 참 같은 값이라는 사실을 모르고 실수하는 사람들이 많습니다.&lt;br /&gt;
불리언 리터럴은 다음과 같이 써야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;heating&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cooling&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">불리언은 true와 false 두 가지 값밖에 없는 데이터 타입입니다. C 같은 일부 언어에서는 불리언 대신 숫자를 사용합니다. 0은 false이고, 다른 숫자는 모두 true입니다. 자바스크립트에서도 비슷한 방식을 사용합니다. 모든 값을 참 같은 값(truthy), 거짓 같은 값(falsy)으로 나눌 수 있습니다. 이에 대해서는 5장에서 다시 설명합니다. 불리언을 쓸 생각이라면 따옴표 안에 넣지 않도록 조심하십시오. 문자열 “false”가 참 같은 값이라는 사실을 모르고 실수하는 사람들이 많습니다. 불리언 리터럴은 다음과 같이 써야 합니다. let heating = true; let cooling = false;</summary></entry><entry><title type="html">3.8.3 숫자와 문자열</title><link href="http://localhost:4000/javascript/2020/04/19/javascript38/" rel="alternate" type="text/html" title="3.8.3 숫자와 문자열" /><published>2020-04-19T00:17:00+09:00</published><updated>2020-04-19T00:17:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/19/javascript38</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/19/javascript38/">&lt;p&gt;숫자를 따옴표 안에 넣으면 그건 숫자가 아니라 문자열입니다.&lt;br /&gt;
그렇긴 하지만, &lt;strong&gt;자바스크립트는 필요하다면 숫자가 들어 있는 문자열을 자동으로 숫자로 바꿉니다.&lt;/strong&gt;&lt;br /&gt;
이런 일이 언제 일어나는지, 어떻게 일어나는지를 알지 못하면 혼란스러울 수 있습니다.&lt;br /&gt;
여기에 관해서는 5장에서 다시 설명합니다.&lt;br /&gt;
다음 예제에 문자열을 숫자로 바꾸는 경우와 숫자로 바꾸지 않는 경우를 묘사했습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3이 문자열로 바뀝니다. 결과는 문자열 '330' 입니다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// '30'이 숫자로 바뀝니다. 결과는 숫자 90입니다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;숫자가 필요할 땐 숫자를 쓰십시오(즉, 따옴표를 쓰지 마십시오).&lt;br /&gt;
문자열이 필요할 땐 문자열을 쓰십시오.&lt;br /&gt;
&lt;strong&gt;모호한 부분은 사용자 입력을 받을 때입니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;사용자 입력은 거의 항상 문자열로 들어오므로, 숫자가 필요할 때 숫자로 바꾸는 건 당신이 해야할 일입니다.&lt;/strong&gt;&lt;br /&gt;
이 장 후반에서 데이터 타입을 바꾸는 방법을 설명합니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">숫자를 따옴표 안에 넣으면 그건 숫자가 아니라 문자열입니다. 그렇긴 하지만, 자바스크립트는 필요하다면 숫자가 들어 있는 문자열을 자동으로 숫자로 바꿉니다. 이런 일이 언제 일어나는지, 어떻게 일어나는지를 알지 못하면 혼란스러울 수 있습니다. 여기에 관해서는 5장에서 다시 설명합니다. 다음 예제에 문자열을 숫자로 바꾸는 경우와 숫자로 바꾸지 않는 경우를 묘사했습니다. const result1 = 3 + '30'; // 3이 문자열로 바뀝니다. 결과는 문자열 '330' 입니다. const result2 = 3 * '30'; // '30'이 숫자로 바뀝니다. 결과는 숫자 90입니다. 숫자가 필요할 땐 숫자를 쓰십시오(즉, 따옴표를 쓰지 마십시오). 문자열이 필요할 땐 문자열을 쓰십시오. 모호한 부분은 사용자 입력을 받을 때입니다. 사용자 입력은 거의 항상 문자열로 들어오므로, 숫자가 필요할 때 숫자로 바꾸는 건 당신이 해야할 일입니다. 이 장 후반에서 데이터 타입을 바꾸는 방법을 설명합니다.</summary></entry><entry><title type="html">3.8.2 여러 줄 문자열</title><link href="http://localhost:4000/javascript/2020/04/19/javascript37/" rel="alternate" type="text/html" title="3.8.2 여러 줄 문자열" /><published>2020-04-19T00:03:00+09:00</published><updated>2020-04-19T00:03:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/19/javascript37</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/19/javascript37/">&lt;p&gt;ES6 이전의 여러 줄 문자열 지원은 솔직히 좋다고 하기는 어려웠습니다.&lt;br /&gt;
명세에는 소스 코드의 각 행 마지막에서 줄바꿈 문자를 이스케이프할 수 있도록 정의했지만,&lt;br /&gt;
브라우저의 지원이 형편없었으므로 필자는 이 기능을 사용한 적이 없습니다.&lt;br /&gt;
ES6에서는 이 기능이 좀 더 믿을 만하게 바뀌었지만, 아직은 조심해야 할 함정이 남아 있습니다.&lt;br /&gt;
이 기능은 자바스크립트 콘솔에서는 동작하지 않으므로 시험해 보려면 자바스크립트 파일을 만들어야 합니다.&lt;br /&gt;
따옴표를 사용한 문자열에서 다음과 같이 줄바꿈 문자를 이스케이프해 봅시다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;line1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
line2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;multiline 문자열에 줄바꿈 문자가 들어갈 것 같나요?&lt;br /&gt;
아닙니다.&lt;br /&gt;
&lt;strong&gt;첫 행 마지막의 역슬래시는 줄바꿈 문자를 이스케이프하기는 하지만, 문자열에 줄바꿈 문자를 삽입하지는 않습니다.&lt;/strong&gt;&lt;br /&gt;
따라서 결과는 line1line2입니다.&lt;br /&gt;
줄바꿈 문자가 들어가게 하려면 다음과 같이 써야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;line1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
line2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;백틱을 사용한 문자열에서는 조금 더 상식적인 결과가 나옵니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`line1
line2`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이들 코드의 결과에는 줄바꿈 문자가 들어 있습니다.&lt;br /&gt;
&lt;strong&gt;하지만 어느 쪽이든, 다음 줄 앞에 있는 들여쓰기가 결과 문자열에 포함됩니다.&lt;/strong&gt;&lt;br /&gt;
예를 들어 다음 코드의 결과 문자열에는 분명 줄바꿈 문자가 들어가지만, &lt;strong&gt;원하지 않는 공백&lt;/strong&gt;이 line2와 line3 앞에 들어갑니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`line1
	line2
	line3`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;따라서 필자는 여러 줄 문자열을 권하지 않습니다.&lt;/strong&gt;&lt;br /&gt;
여러 줄 문자열을 쓰려면 코드를 읽기 쉽게 만드는 들여쓰기를 포기하거나,&lt;br /&gt;
결과 문자열에 원하지 않는 공백이 들어가거나 둘 중 하나입니다.&lt;br /&gt;
소스 코드에서 문자열을 여러 행에 나눠 써야 할 때 필자는 보통 문자열 병합을 사용합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;line1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;line2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;line3&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 하면 코드를 읽기 쉽게 쓸 수 있고, 결과 문자열도 원하는 형태로 만들어 집니다.&lt;br /&gt;
&lt;strong&gt;문자열 병합&lt;/strong&gt;을 사용할 때는 따옴표와 백틱을 섞어 써도 괜찮습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Current temperature:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;`\t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTemp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;\u00b0C\n`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Don't worry...the heat is on!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">ES6 이전의 여러 줄 문자열 지원은 솔직히 좋다고 하기는 어려웠습니다. 명세에는 소스 코드의 각 행 마지막에서 줄바꿈 문자를 이스케이프할 수 있도록 정의했지만, 브라우저의 지원이 형편없었으므로 필자는 이 기능을 사용한 적이 없습니다. ES6에서는 이 기능이 좀 더 믿을 만하게 바뀌었지만, 아직은 조심해야 할 함정이 남아 있습니다. 이 기능은 자바스크립트 콘솔에서는 동작하지 않으므로 시험해 보려면 자바스크립트 파일을 만들어야 합니다. 따옴표를 사용한 문자열에서 다음과 같이 줄바꿈 문자를 이스케이프해 봅시다. const multiline = &quot;line1\ line2&quot;; multiline 문자열에 줄바꿈 문자가 들어갈 것 같나요? 아닙니다. 첫 행 마지막의 역슬래시는 줄바꿈 문자를 이스케이프하기는 하지만, 문자열에 줄바꿈 문자를 삽입하지는 않습니다. 따라서 결과는 line1line2입니다. 줄바꿈 문자가 들어가게 하려면 다음과 같이 써야 합니다. const multiline = &quot;line1\n\ line2&quot;; 백틱을 사용한 문자열에서는 조금 더 상식적인 결과가 나옵니다. const multiline = `line1 line2`; 이들 코드의 결과에는 줄바꿈 문자가 들어 있습니다. 하지만 어느 쪽이든, 다음 줄 앞에 있는 들여쓰기가 결과 문자열에 포함됩니다. 예를 들어 다음 코드의 결과 문자열에는 분명 줄바꿈 문자가 들어가지만, 원하지 않는 공백이 line2와 line3 앞에 들어갑니다. const multiline = `line1 line2 line3`; 따라서 필자는 여러 줄 문자열을 권하지 않습니다. 여러 줄 문자열을 쓰려면 코드를 읽기 쉽게 만드는 들여쓰기를 포기하거나, 결과 문자열에 원하지 않는 공백이 들어가거나 둘 중 하나입니다. 소스 코드에서 문자열을 여러 행에 나눠 써야 할 때 필자는 보통 문자열 병합을 사용합니다. const multiline = &quot;line1\n&quot; + &quot;line2\n&quot; + &quot;line3&quot;; 이렇게 하면 코드를 읽기 쉽게 쓸 수 있고, 결과 문자열도 원하는 형태로 만들어 집니다. 문자열 병합을 사용할 때는 따옴표와 백틱을 섞어 써도 괜찮습니다. const multiline = 'Current temperature:\n' + `\t${currentTemp}\u00b0C\n` + &quot;Don't worry...the heat is on!&quot;;</summary></entry><entry><title type="html">3.8.1 템플릿 문자열</title><link href="http://localhost:4000/javascript/2020/04/18/javascript36/" rel="alternate" type="text/html" title="3.8.1 템플릿 문자열" /><published>2020-04-18T23:55:00+09:00</published><updated>2020-04-18T23:55:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/18/javascript36</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/18/javascript36/">&lt;p&gt;값을 문자열 안에 써야 하는 일이 아주 많습니다.&lt;br /&gt;
이때 &lt;strong&gt;문자열 병합(concatenation)&lt;/strong&gt; 을 통해 변수나 상수를 문자열 안에 쓸 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentTemp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;19.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 00b0는 온도를 나타내는 유니코드 코드 포인트입니다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;The current temperature is &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentTemp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;u00b0C&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ES6 이전에는 변수나 상수를 문자열 안에 쓰는 방법은 (외부 라이브러리를 사용하지 않으면) &lt;strong&gt;문자열 병합뿐&lt;/strong&gt;이었습니다.&lt;br /&gt;
ES6에서는 &lt;strong&gt;문자열 템플릿(template)&lt;/strong&gt; 이라는 기능을 도입했습니다.&lt;br /&gt;
이 기능을 &lt;strong&gt;문자열 채우기(interpolation)&lt;/strong&gt; 라 부르기도 합니다.&lt;br /&gt;
문자열 템플릿은 문자열의 정해진 위치에 값을 채워넣는 간편한 방법입니다.&lt;br /&gt;
문자열 템플릿에는 큰따옴표나 작은따옴표를 쓰지 않고 백틱(backtick)을 사용합니다.&lt;br /&gt;
&lt;strong&gt;다음은 앞에서 살펴본 예제를 문자열 템플릿을 사용해서 고쳐 쓴 겁니다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentTemp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;19.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`The current temperature is &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTemp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;\u00b0C`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;문자열 템플릿 안에서는 달러 기호가 특수문자가 됩니다.&lt;br /&gt;
달러 기호 다음에 중괄호로 감싼 값을 쓰면 그 값이 문자열에 삽입됩니다.&lt;br /&gt;
&lt;strong&gt;(중괄호 안에 어떤 표현식이라도 쓸 수 있습니다. 표현식에 대해서는 5장에서 설명합니다.)&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;(문자열 템플릿 안에 달러 기호를 써야 한다면 역슬래시로 이스케이프하면 됩니다.)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;문자열 템플릿은 필자가 좋아하는 ES6 기능 중 하나입니다.&lt;br /&gt;
이 책에서 문자열 템플릿을 자주 사용할 겁니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">값을 문자열 안에 써야 하는 일이 아주 많습니다. 이때 문자열 병합(concatenation) 을 통해 변수나 상수를 문자열 안에 쓸 수 있습니다. let currentTemp = 19.5; // 00b0는 온도를 나타내는 유니코드 코드 포인트입니다. const message = &quot;The current temperature is &quot; + currentTemp + &quot;\u00b0C&quot;; ES6 이전에는 변수나 상수를 문자열 안에 쓰는 방법은 (외부 라이브러리를 사용하지 않으면) 문자열 병합뿐이었습니다. ES6에서는 문자열 템플릿(template) 이라는 기능을 도입했습니다. 이 기능을 문자열 채우기(interpolation) 라 부르기도 합니다. 문자열 템플릿은 문자열의 정해진 위치에 값을 채워넣는 간편한 방법입니다. 문자열 템플릿에는 큰따옴표나 작은따옴표를 쓰지 않고 백틱(backtick)을 사용합니다. 다음은 앞에서 살펴본 예제를 문자열 템플릿을 사용해서 고쳐 쓴 겁니다. let currentTemp = 19.5; const message = `The current temperature is ${currentTemp}\u00b0C`; 문자열 템플릿 안에서는 달러 기호가 특수문자가 됩니다. 달러 기호 다음에 중괄호로 감싼 값을 쓰면 그 값이 문자열에 삽입됩니다. (중괄호 안에 어떤 표현식이라도 쓸 수 있습니다. 표현식에 대해서는 5장에서 설명합니다.) (문자열 템플릿 안에 달러 기호를 써야 한다면 역슬래시로 이스케이프하면 됩니다.) 문자열 템플릿은 필자가 좋아하는 ES6 기능 중 하나입니다. 이 책에서 문자열 템플릿을 자주 사용할 겁니다.</summary></entry><entry><title type="html">3.8 특수문자</title><link href="http://localhost:4000/javascript/2020/04/18/javascript35/" rel="alternate" type="text/html" title="3.8 특수문자" /><published>2020-04-18T23:17:47+09:00</published><updated>2020-04-18T23:17:47+09:00</updated><id>http://localhost:4000/javascript/2020/04/18/javascript35</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/18/javascript35/">&lt;p&gt;역슬래시는 따옴표를 이스케이프할 때만 쓰지는 않습니다.&lt;br /&gt;
줄바꿈 문자처럼 화면에 표시되지 않는 일부 특수문자나 임의의 유니코드 문자를 나타낼 때도 역슬래시를 사용합니다.&lt;br /&gt;
[표 3-1]은 널리 쓰이는 특수문자입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;표3-1 널리쓰이는 특수문자&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;코드&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
      &lt;th&gt;예제&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;\n&lt;/td&gt;
      &lt;td&gt;줄바꿈 문자(Newline), 엄밀히 말하면 ASCII/Unicode 10인 라인피드(line feed) 문자입니다.&lt;/td&gt;
      &lt;td&gt;“Line1\nLine2”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\r&lt;/td&gt;
      &lt;td&gt;캐리지 리턴(Carriage return) (ASCII/Unicode 13)&lt;/td&gt;
      &lt;td&gt;“Windows line 1\r\nWindows line2”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\t&lt;/td&gt;
      &lt;td&gt;탭(ASCII/Unicode 9)&lt;/td&gt;
      &lt;td&gt;“Speed:\t60kph”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\’&lt;/td&gt;
      &lt;td&gt;작은따옴표, 꼭 이스케이프할 필요가 없어도 작은따옴표를 쓸 수 있는 곳에는 항상 이스케이프한 작은 따옴표를 쓸 수 있습니다.&lt;/td&gt;
      &lt;td&gt;Don\‘t&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\”&lt;/td&gt;
      &lt;td&gt;큰따옴표, 꼭 이스케이프할 필요가 없어도 큰따옴표를 쓸 수 있는 곳에는 항상 이스케이프한 큰따옴표를 쓸 수 있습니다.&lt;/td&gt;
      &lt;td&gt;‘Sam said \“hello\”.’&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/assets/img/learningjs/image29.jpg&quot; alt=&quot;백틱&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;백틱, ES6에서 새로 생겼습니다.&lt;/td&gt;
      &lt;td&gt;`New in ES6: &lt;img src=&quot;/assets/img/learningjs/image29.jpg&quot; alt=&quot;백틱&quot; /&gt; strings.`&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$&lt;/td&gt;
      &lt;td&gt;달러 기호, ES6에서 새로 생겼습니다.&lt;/td&gt;
      &lt;td&gt;`New in ES6 : ${interpolation}`&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\\&lt;/td&gt;
      &lt;td&gt;역슬래시&lt;/td&gt;
      &lt;td&gt;“Use \\\\ to represent \\!”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\uXXXX&lt;/td&gt;
      &lt;td&gt;임의의 유니코드 코드 포인트, 여기서 XXXX는 16진수 코드 포인트입니다.&lt;/td&gt;
      &lt;td&gt;“De Morgan’s law: \u2310(P \u22c0Q) \u21d4 (\u2310p) \u22c1(\u2310Q)”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\xXX&lt;/td&gt;
      &lt;td&gt;라틴-1 문자. 여기서 XX는 16진수 라틴-1 코드 포인트입니다.&lt;/td&gt;
      &lt;td&gt;“\xc9p\xe9e is fun, but foil is more fun.”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;라틴-1 문자셋은 유니코드의 부분집합이며&lt;/strong&gt; 라틴-1 문자 \xXX 는 유니코드 코드 포인트 \u00XX 와 똑같습니다.&lt;br /&gt;
16진수에는 소문자나 대문자를 모두 쓸 수 있는데, 필자는 소문자가 읽기 쉬워서 소문자를 주로 쓰는 편입니다.&lt;br /&gt;
&lt;strong&gt;소문자나 대문자를 다 쓸 수 있다고? 이게 무슨말인지 잘 이해가 안감.. \u21D4와 \u21d4가 같다는 말인가? 그래서 \u21D4로 안쓰고 \u21d4로 쓴다는 말인가?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;유니코드 문자 코드를 이스케이프하지 않고 에디터에서 직접 입력할 수도 있습니다.&lt;br /&gt;
유니코드 문자를 직접 입력하는 방법은 여러 가지로, 에디터와 운영체제에 따라 다릅니다.&lt;br /&gt;
유니코드 문자를 직접 입력하려면 에디터나 운영체제의 문서를 참고하십시오.&lt;/p&gt;

&lt;p&gt;다음 [표 3-2]는 자주 쓰이지 않는 특수문자를 정리한 겁니다.&lt;br /&gt;
필자는 이 문자를 자바스크립트 프로그램에서 사용한 적이 한 번도 없지만, 책의 완성도를 위해 여기 정리했습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;표 3-2 특수문자&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;코드&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
      &lt;th&gt;예제&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;\0&lt;/td&gt;
      &lt;td&gt;NUL 문자 (ASCII/Unicode 0)&lt;/td&gt;
      &lt;td&gt;“ASCII NUL: \0”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\v&lt;/td&gt;
      &lt;td&gt;세로 탭(vertical tab) (ASCII/Unicode 11)&lt;/td&gt;
      &lt;td&gt;“Vertical tab: \v”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\b&lt;/td&gt;
      &lt;td&gt;백스페이스 (ASCII/Unicode 8)&lt;/td&gt;
      &lt;td&gt;“Backspace: \b”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\f&lt;/td&gt;
      &lt;td&gt;폼 피드(form feed) (ASCII/Unicode 12)&lt;/td&gt;
      &lt;td&gt;“Form feed: \f”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><summary type="html">역슬래시는 따옴표를 이스케이프할 때만 쓰지는 않습니다. 줄바꿈 문자처럼 화면에 표시되지 않는 일부 특수문자나 임의의 유니코드 문자를 나타낼 때도 역슬래시를 사용합니다. [표 3-1]은 널리 쓰이는 특수문자입니다. 표3-1 널리쓰이는 특수문자 코드 설명 예제 \n 줄바꿈 문자(Newline), 엄밀히 말하면 ASCII/Unicode 10인 라인피드(line feed) 문자입니다. “Line1\nLine2” \r 캐리지 리턴(Carriage return) (ASCII/Unicode 13) “Windows line 1\r\nWindows line2” \t 탭(ASCII/Unicode 9) “Speed:\t60kph” \’ 작은따옴표, 꼭 이스케이프할 필요가 없어도 작은따옴표를 쓸 수 있는 곳에는 항상 이스케이프한 작은 따옴표를 쓸 수 있습니다. Don\‘t \” 큰따옴표, 꼭 이스케이프할 필요가 없어도 큰따옴표를 쓸 수 있는 곳에는 항상 이스케이프한 큰따옴표를 쓸 수 있습니다. ‘Sam said \“hello\”.’ 백틱, ES6에서 새로 생겼습니다. `New in ES6: strings.` $ 달러 기호, ES6에서 새로 생겼습니다. `New in ES6 : ${interpolation}` \\ 역슬래시 “Use \\\\ to represent \\!” \uXXXX 임의의 유니코드 코드 포인트, 여기서 XXXX는 16진수 코드 포인트입니다. “De Morgan’s law: \u2310(P \u22c0Q) \u21d4 (\u2310p) \u22c1(\u2310Q)” \xXX 라틴-1 문자. 여기서 XX는 16진수 라틴-1 코드 포인트입니다. “\xc9p\xe9e is fun, but foil is more fun.” 라틴-1 문자셋은 유니코드의 부분집합이며 라틴-1 문자 \xXX 는 유니코드 코드 포인트 \u00XX 와 똑같습니다. 16진수에는 소문자나 대문자를 모두 쓸 수 있는데, 필자는 소문자가 읽기 쉬워서 소문자를 주로 쓰는 편입니다. 소문자나 대문자를 다 쓸 수 있다고? 이게 무슨말인지 잘 이해가 안감.. \u21D4와 \u21d4가 같다는 말인가? 그래서 \u21D4로 안쓰고 \u21d4로 쓴다는 말인가? 유니코드 문자 코드를 이스케이프하지 않고 에디터에서 직접 입력할 수도 있습니다. 유니코드 문자를 직접 입력하는 방법은 여러 가지로, 에디터와 운영체제에 따라 다릅니다. 유니코드 문자를 직접 입력하려면 에디터나 운영체제의 문서를 참고하십시오. 다음 [표 3-2]는 자주 쓰이지 않는 특수문자를 정리한 겁니다. 필자는 이 문자를 자바스크립트 프로그램에서 사용한 적이 한 번도 없지만, 책의 완성도를 위해 여기 정리했습니다. 표 3-2 특수문자 코드 설명 예제 \0 NUL 문자 (ASCII/Unicode 0) “ASCII NUL: \0” \v 세로 탭(vertical tab) (ASCII/Unicode 11) “Vertical tab: \v” \b 백스페이스 (ASCII/Unicode 8) “Backspace: \b” \f 폼 피드(form feed) (ASCII/Unicode 12) “Form feed: \f”</summary></entry><entry><title type="html">3.7.1 이스케이프</title><link href="http://localhost:4000/javascript/2020/04/18/javascript34/" rel="alternate" type="text/html" title="3.7.1 이스케이프" /><published>2020-04-18T17:46:00+09:00</published><updated>2020-04-18T17:46:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/18/javascript34</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/18/javascript34/">&lt;p&gt;텍스트로 만들어진 프로그램에서 텍스트 데이터를 사용할 때는 항상 텍스트 데이터와 프로그램 자체를 구별할 방법이 필요합니다.&lt;br /&gt;
이때 문자열을 따옴표 안에 쓰는 방법이 있습니다.&lt;br /&gt;
하지만 &lt;strong&gt;문자열 안에 따옴표&lt;/strong&gt;를 써야 한다면 어떻게 해야 할까요?&lt;br /&gt;
이 문제를 해결하려면 따옴표를 &lt;strong&gt;이스케이프&lt;/strong&gt;해서 문자열 주위에 쓰는 부호가 아님을 나타내야 합니다.&lt;br /&gt;
다음 예제를 보십시오.&lt;br /&gt;
여기에는 이스케이프가 필요하지 않습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Sam looked up, and said &quot;hello, old friend!&quot;, as Max walked in.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imperative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Don't do that!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;dialog 는 작은 따옴표로 감싸여 있으므로 문자열 안에 큰따옴표를 걱정없이 쓸 수 있습니다.&lt;br /&gt;
마찬가지로, imperative 는 큰따옴표로 감싸여 있으므로 문자열 안에 아포스트로피를 걱정없이 쓸 수 있습니다.&lt;br /&gt;
하지만 두 가지 따옴표를 모두 써야 한다면 어떨까요?&lt;br /&gt;
다음을 보십시오.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 에러가 일어납니다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Sam looked up and said &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;don&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;t do that!&quot; to Max.&quot;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;dialog 문자열에는 어떤 따옴표를 쓰더라도 에러가 생깁니다.&lt;br /&gt;
이때 &lt;strong&gt;역슬래시(\)&lt;/strong&gt; 를 써서 따옴표를 &lt;strong&gt;이스케이프&lt;/strong&gt; 하면 &lt;strong&gt;문자열이 여기서 끝나지 않았다고 자바스크립트에 알릴 수 있습니다.&lt;/strong&gt;&lt;br /&gt;
앞에서 본 예제를 다음과 같이 고쳐 쓰면 어떤 따옴표라도 쓸 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dialog1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;He looked up and said &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;don't do that!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to Max.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dialog2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;He looked up and said &quot;don&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;t do that!&quot; to Max.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;당연히 떠오르는 문제가 있습니다.&lt;br /&gt;
문자열에서 역슬래시 문자를 써야 할 때는 어떻게 할까요?&lt;br /&gt;
&lt;strong&gt;다행히 역슬래시는 자기 자신을 이스케이프할 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;In JavaScript, use &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; as an escape character in strings.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;큰 따옴표를 쓸지, 작은 따옴표를 쓸지는 스스로 정하면 됩니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;필자는 사용자에게 표시될 텍스트에는 보통 큰 따옴표를 사용합니다.&lt;br /&gt;
텍스트엔 따옴표보다는 don’t 등의 어포스트로피를 더 많이 쓰는 편이므로, 큰 따옴표를 쓰는 편이 필자에게 맞습니다.&lt;/li&gt;
  &lt;li&gt;자바스크립트 문자열 안에 HTML을 쓸 때는 반대로 작은따옴표를 씁니다.&lt;br /&gt;
HTML 문자열을 작은 따옴표로 감싸면 속성값에 큰따옴표를 쓸 수 있기 때문입니다.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">텍스트로 만들어진 프로그램에서 텍스트 데이터를 사용할 때는 항상 텍스트 데이터와 프로그램 자체를 구별할 방법이 필요합니다. 이때 문자열을 따옴표 안에 쓰는 방법이 있습니다. 하지만 문자열 안에 따옴표를 써야 한다면 어떻게 해야 할까요? 이 문제를 해결하려면 따옴표를 이스케이프해서 문자열 주위에 쓰는 부호가 아님을 나타내야 합니다. 다음 예제를 보십시오. 여기에는 이스케이프가 필요하지 않습니다. const dialog = 'Sam looked up, and said &quot;hello, old friend!&quot;, as Max walked in.'; const imperative = &quot;Don't do that!&quot;; dialog 는 작은 따옴표로 감싸여 있으므로 문자열 안에 큰따옴표를 걱정없이 쓸 수 있습니다. 마찬가지로, imperative 는 큰따옴표로 감싸여 있으므로 문자열 안에 아포스트로피를 걱정없이 쓸 수 있습니다. 하지만 두 가지 따옴표를 모두 써야 한다면 어떨까요? 다음을 보십시오. // 에러가 일어납니다. const dialog = &quot;Sam looked up and said &quot;don't do that!&quot; to Max.&quot;; dialog 문자열에는 어떤 따옴표를 쓰더라도 에러가 생깁니다. 이때 역슬래시(\) 를 써서 따옴표를 이스케이프 하면 문자열이 여기서 끝나지 않았다고 자바스크립트에 알릴 수 있습니다. 앞에서 본 예제를 다음과 같이 고쳐 쓰면 어떤 따옴표라도 쓸 수 있습니다. const dialog1 = &quot;He looked up and said \&quot;don't do that!\&quot; to Max.&quot;; const dialog2 = 'He looked up and said &quot;don\'t do that!&quot; to Max.'; 당연히 떠오르는 문제가 있습니다. 문자열에서 역슬래시 문자를 써야 할 때는 어떻게 할까요? 다행히 역슬래시는 자기 자신을 이스케이프할 수 있습니다. const s = &quot;In JavaScript, use \\ as an escape character in strings.&quot;; 큰 따옴표를 쓸지, 작은 따옴표를 쓸지는 스스로 정하면 됩니다. 필자는 사용자에게 표시될 텍스트에는 보통 큰 따옴표를 사용합니다. 텍스트엔 따옴표보다는 don’t 등의 어포스트로피를 더 많이 쓰는 편이므로, 큰 따옴표를 쓰는 편이 필자에게 맞습니다. 자바스크립트 문자열 안에 HTML을 쓸 때는 반대로 작은따옴표를 씁니다. HTML 문자열을 작은 따옴표로 감싸면 속성값에 큰따옴표를 쓸 수 있기 때문입니다.</summary></entry><entry><title type="html">3.7 문자열</title><link href="http://localhost:4000/javascript/2020/04/18/javascript33/" rel="alternate" type="text/html" title="3.7 문자열" /><published>2020-04-18T17:31:00+09:00</published><updated>2020-04-18T17:31:00+09:00</updated><id>http://localhost:4000/javascript/2020/04/18/javascript33</id><content type="html" xml:base="http://localhost:4000/javascript/2020/04/18/javascript33/">&lt;p&gt;&lt;strong&gt;문자열(string)&lt;/strong&gt; 은 텍스트 데이터입니다.&lt;br /&gt;
&lt;strong&gt;string&lt;/strong&gt;이라는 단어는 &lt;strong&gt;string of characters&lt;/strong&gt;에서 나왔습니다.&lt;br /&gt;
이 표현은 1800년대 후반 식자공들이 일정한 순서로 배열된 심볼을 가리킬 때 썼던 표현이며 나중에는 수학자들도 사용했습니다.&lt;/p&gt;

&lt;p&gt;자바스크립트 문자열은 &lt;strong&gt;유니코드(Unicode)&lt;/strong&gt; 텍스트입니다.&lt;br /&gt;
유니코드는 텍스트 데이터에 관한 표준이며 사람이 사용하는 언어 대부분의 글자와 심볼에 해당하는 &lt;strong&gt;코드 포인트(code point)&lt;/strong&gt; 를 포함하고 있습니다.(여기서 말하는 ‘언어’에는 놀랍게도 이모티콘까지 표현됩니다.)&lt;br /&gt;
&lt;strong&gt;유니코드 자체는 모든 언어의 텍스트를 나타낼 수 있지만, 유니코드를 사용하는 소프트웨어가 모든 코드 포인트를 정확히 렌더링한다고 보장하지는 않습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 책에서는 브라우저와 콘솔에 정확히 나타날 것이 거의 확실한, 널리 쓰이는 유니코드 문자만 사용할 겁니다.&lt;br /&gt;
&lt;strong&gt;널리 쓰이지 않는 글자나 언어를 사용해야 한다면 유니코드에서 코드 포인트를 어떻게 렌더링하는지 따로 조사해야 할 겁니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;자바스크립트의 문자열 리터럴에는 작은따옴표, 큰따옴표, 백틱(backtick)을 사용합니다.&lt;br /&gt;
(백틱 - grave accent mark 라고 부르기도 합니다.)&lt;br /&gt;
백틱은 ES6에서 도입한 것이며 곧 설명할 &lt;strong&gt;템플릿 문자열(template string)&lt;/strong&gt; 에서 사용합니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">문자열(string) 은 텍스트 데이터입니다. string이라는 단어는 string of characters에서 나왔습니다. 이 표현은 1800년대 후반 식자공들이 일정한 순서로 배열된 심볼을 가리킬 때 썼던 표현이며 나중에는 수학자들도 사용했습니다. 자바스크립트 문자열은 유니코드(Unicode) 텍스트입니다. 유니코드는 텍스트 데이터에 관한 표준이며 사람이 사용하는 언어 대부분의 글자와 심볼에 해당하는 코드 포인트(code point) 를 포함하고 있습니다.(여기서 말하는 ‘언어’에는 놀랍게도 이모티콘까지 표현됩니다.) 유니코드 자체는 모든 언어의 텍스트를 나타낼 수 있지만, 유니코드를 사용하는 소프트웨어가 모든 코드 포인트를 정확히 렌더링한다고 보장하지는 않습니다. 이 책에서는 브라우저와 콘솔에 정확히 나타날 것이 거의 확실한, 널리 쓰이는 유니코드 문자만 사용할 겁니다. 널리 쓰이지 않는 글자나 언어를 사용해야 한다면 유니코드에서 코드 포인트를 어떻게 렌더링하는지 따로 조사해야 할 겁니다. 자바스크립트의 문자열 리터럴에는 작은따옴표, 큰따옴표, 백틱(backtick)을 사용합니다. (백틱 - grave accent mark 라고 부르기도 합니다.) 백틱은 ES6에서 도입한 것이며 곧 설명할 템플릿 문자열(template string) 에서 사용합니다.</summary></entry></feed>