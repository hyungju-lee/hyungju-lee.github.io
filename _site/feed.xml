<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LEE HYUNG JU</title>
    <description>Jekyll Blog</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 20 May 2020 12:26:18 +0900</pubDate>
    <lastBuildDate>Wed, 20 May 2020 12:26:18 +0900</lastBuildDate>
    <generator>Jekyll v4.0.1</generator>
    
      <item>
        <title>14. 비동기적 프로그래밍</title>
        <description>&lt;h2 id=&quot;14-비동기적-프로그래밍&quot;&gt;14. 비동기적 프로그래밍&lt;/h2&gt;

&lt;p&gt;우리는 1장에서 사용자의 행동에 반응하면서 비동기적 프로그래밍을 잠깐 훑어봤습니다.&lt;br /&gt;
사용자의 행동은 전적으로 비동기적입니다.&lt;br /&gt;
사용자가 언제 클릭할지, 터치할지, 또는 타이핑할지 당신은 전혀 알 수 없습니다.&lt;br /&gt;
&lt;strong&gt;하지만 비동기적 실행이 사용자 입력 하나 때문에 필요한 건 아닙니다.&lt;/strong&gt;&lt;br /&gt;
사실 자바스크립트의 본성 때문에 비동기적 프로그래밍이 필요합니다.&lt;/p&gt;

&lt;p&gt;자바스크립트 애플리케이션은 &lt;strong&gt;단일 스레드&lt;/strong&gt;에서 동작합니다.&lt;br /&gt;
즉, 자바스크립트는 한 번에 한 가지 일만 할 수 있습니다.&lt;br /&gt;
멀티코어를 장착한 대부분의 최신 컴퓨터는 한 번에 여러 가지 일을 할 수 있고, 싱글코어 컴퓨터도 매우 빨라서 작업 A를 잠시 하고, 작업 B를 잠시 하고, 
작업 C를 잠시 하는 식으로 멀티태스킹을 흉내 낼 수 있습니다.&lt;br /&gt;
사용자가 보기에는 세 가지 작업이 동시에 일어나는 것처럼 보입니다.&lt;br /&gt;
실제로 멀티코어에서 동시에 수행하지 않았더라도 말입니다.&lt;/p&gt;

&lt;p&gt;자바스크립트가 &lt;strong&gt;싱글 스레드&lt;/strong&gt;라는 얘기를 듣고 할 수 있는 일이 제한된다고 느낄지도 모르지만, 사실 멀티스레드 프로그래밍에서 겪어야 하는 정말 골치 아픈 
문제를 신경 쓰지 않아도 된다는 장점도 있습니다.&lt;br /&gt;
물론 대가가 있습니다.&lt;br /&gt;
&lt;strong&gt;부드럽게 동작하는 소프트웨어를 만들기 위해서는 사용자의 입력뿐만 아니라 여러 문제를 비동기적 관점에서 생각해야 합니다.&lt;/strong&gt;&lt;br /&gt;
비동기적 관점에서 생각하는 건 처음에는 어려울 수 있습니다.&lt;br /&gt;
특히, 일반적으로 동기적 실행을 하는 언어를 사용했었다면 더 어렵게 느껴질 수 있습니다.&lt;/p&gt;

&lt;p&gt;자바스크립트에는 매우 일찍부터 비동기적 실행 매커니즘이 존재했지만, 자바스크립트의 인기가 높아지고 자바스크립트로 만드는 소프트웨어가 점점 복잡해짐에 따라
비동기적 프로그래밍에 필요한 장치들이 추가되었습니다.&lt;br /&gt;
자바스크립트의 비동기적 프로그래밍에는 뚜렷이 구분되는 세 가지 패러다임이 있습니다.&lt;br /&gt;
&lt;strong&gt;처음에는 &lt;span style=&quot;color:red&quot;&gt;콜백&lt;/span&gt;이 있었고, &lt;span style=&quot;color:red&quot;&gt;프로미스(promise)&lt;/span&gt;가 뒤를 이었으며 마지막은 &lt;span style=&quot;color:red&quot;&gt;제너레이터&lt;/span&gt;입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;제너레이터가 콜백이나 프로미스보다 모든 면에서 더 좋다면 제너레이터에 대해서만 공부하고 나머지는 과거의 유산으로 치워 둘 수 있겠지만,
그렇게 간단한 문제는 아닙니다.&lt;br /&gt;
제너레이터 자체는 비동기적 프로그래밍을 전혀 지원하지 않습니다.&lt;br /&gt;
제너레이터를 비동기적으로 사용하려면 프로미스나 특수한 콜백과 함께 사용해야 합니다.&lt;br /&gt;
프로미스 역시 콜백에 의존합니다.&lt;br /&gt;
콜백은 제너레이터나 프로미스 외에도 이벤트 처리 등에 유용하게 쓸 수 있습니다.&lt;/p&gt;

&lt;p&gt;사용자 입력 외에, 비동기적 테크닉을 사용해야 하는 경우는 크게 세 가지가 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ajax 호출을 비롯한 네트워크 요청&lt;/li&gt;
  &lt;li&gt;파일을 읽고 쓰는 등의 파일시스템 작업&lt;/li&gt;
  &lt;li&gt;의도적으로 시간 지연을 사용하는 기능(알람 등)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 20 May 2020 12:07:00 +0900</pubDate>
        <link>http://localhost:4000/lj/2020/05/20/javascript192.html</link>
        <guid isPermaLink="true">http://localhost:4000/lj/2020/05/20/javascript192.html</guid>
        
        
        <category>lj</category>
        
      </item>
    
      <item>
        <title>13.8 요약</title>
        <description>&lt;h2 id=&quot;138-요약&quot;&gt;13.8 요약&lt;/h2&gt;

&lt;p&gt;ML이나 하스켈, 클로저(closure), F# 같은 다른 함수형 언어를 사용해봤다면 이 장은 아주 쉬웠을 겁니다.&lt;br /&gt;
함수형 언어를 써 본 적이 없다면 새로운 사고방식을 몇 가지 발견했을 테고, 함수형 프로그래밍을 통해 할 수 있는 일이 너무 다양해서 좀 아찔한 기분을
느꼈을 수도 있습니다(필자는 확실히 그랬습니다).&lt;br /&gt;
같은 일을 매우 다양한 방법으로 할 수 있다 보니, 어떤 방법이 ‘더 좋은’ 방법인지 궁금할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;유감이지만 그 질문에는 정답이 없습니다.&lt;br /&gt;
대개는 상황에 따라 답이 다릅니다.&lt;br /&gt;
어떤 종류의 문제는 특정한 테크닉을 요구하기도 합니다.&lt;br /&gt;
또 프로그래머에 따라 다르기도 합니다.&lt;br /&gt;
이 장을 읽으면서 각자 마음에 드는 방법이 있었을 겁니다.&lt;br /&gt;
이 장에서 소개한 방법이 잘 이해되지 않았다면 몇 번 더 읽어보길 권합니다.&lt;br /&gt;
이 장에서 소개한 개념은 대단히 강력한 것들이고, 이들을 유용하게 쓸 수 있을지 판단하려면 시간을 두고 이해할 수밖에 없습니다.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 May 2020 11:51:00 +0900</pubDate>
        <link>http://localhost:4000/lj/2020/05/20/javascript191.html</link>
        <guid isPermaLink="true">http://localhost:4000/lj/2020/05/20/javascript191.html</guid>
        
        
        <category>lj</category>
        
      </item>
    
      <item>
        <title>13.7 재귀</title>
        <description>&lt;h2 id=&quot;137-재귀&quot;&gt;13.7 재귀&lt;/h2&gt;

&lt;p&gt;재귀(resursion) 역시 널리 쓰이며 함수를 활용하는 중요한 패턴입니다.&lt;br /&gt;
&lt;strong&gt;재귀란 자기 자신을 호출하는 함수입니다.&lt;/strong&gt;&lt;br /&gt;
같은 일을 반복하면서 그 대상이 점차 줄어드는 상황에서 재귀를 유용하게 활용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;먼저 건초 더미(haystack)에서 바늘(needle)을 찾는, 좀 인위적인 예제를 하나 봅시다.&lt;br /&gt;
실제로 건초 더미에서 바늘을 찾아야 하는 상황이라면 아마 이런 식으로 찾아볼 겁니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;건초 더미에서 바늘이 보이면 3단계로 이동한다.&lt;/li&gt;
  &lt;li&gt;건초 더미에서 건초(hay)를 하나 덜어낸다. 1단계로 이동한다.&lt;/li&gt;
  &lt;li&gt;찾았다!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;결국 바늘을 찾을 때까지 건초 더미에서 건초를 하나씩 제외하는 소거법이며, 이것이 재귀입니다.&lt;br /&gt;
이 행동을 코드로 바꿔 봅시다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;findNeedle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;haystack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;haystack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;no haystack here!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;haystack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;needle&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;found it!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;findNeedle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;haystack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 건초더미에 들어있는 건초가 하나 줄었습니다.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;findNeedle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;hay&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;hay&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;hay&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;hay&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;needle&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;hay&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;hay&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/learningjs/image107.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 재귀 함수에서 눈여겨볼 점은 모든 가능성을 전부 고려한다는 겁니다.&lt;br /&gt;
가능한 경우의 수는 haystack이 비어 있거나(찾을 대상이 없습니다), 배열의 첫 번째 요소가 바늘이거나(찾았습니다), 
배열의 첫 번째 요소가 바늘이 아닌 경우입니다.&lt;br /&gt;
마지막은 배열의 어딘가에 바늘이 들어있을 테니 &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.shift&lt;/code&gt;로 배열의 첫 번째 요소를 제거하고 함수를 반복합니다.&lt;/p&gt;

&lt;p&gt;재귀 함수에는 &lt;strong&gt;종료 조건&lt;/strong&gt;이 있어야 합니다.&lt;br /&gt;
종료 조건이 없다면 자바스크립트 인터프리터에서 스택이 너무 깊다고 판단할 때까지 재귀 호출을 계속하다가 프로그램이 멈춥니다.&lt;br /&gt;
&lt;strong&gt;findNeedle 함수에는 두 가지 종료 조건이 있습니다.&lt;/strong&gt;&lt;br /&gt;
바늘을 찾거나, 배열이 비어 있으면 재귀 호출을 멈춥니다.&lt;br /&gt;
호출할 때마다 배열의 길이가 줄어드므로 언젠가는 두 조건 중 하나를 만족하게 됩니다.&lt;/p&gt;

&lt;p&gt;이번에는 좀 더 유용하고, 여러 번 검증된 예제를 살펴봅시다.&lt;br /&gt;
숫자의 계승(factorial)을 찾는 예제입니다.&lt;br /&gt;
숫자의 계승은 1부터 그 숫자까지를 전부 곱한 값이며 숫자 뒤에 느낌표를 붙여서 표시합니다.&lt;br /&gt;
즉 4!는 4 * 3 * 2 * 1 = 24 입니다.&lt;br /&gt;
계승을 구하는 재귀 함수는 다음과 같이 만들 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 함수의 종료 조건은 &lt;code class=&quot;highlighter-rouge&quot;&gt;n === 1&lt;/code&gt;이고, 재귀 호출할 때마다 숫자 n은 1씩 줄어들다가 결국 1이 됩니다.&lt;br /&gt;
이 함수에 0이나 음수를 넘겨서 호출하면 물론 에러가 생기지만, 그런 상황을 막을 조건문을 넣는 건 쉽습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/learningjs/image108.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 20 May 2020 10:49:00 +0900</pubDate>
        <link>http://localhost:4000/lj/2020/05/20/javascript190.html</link>
        <guid isPermaLink="true">http://localhost:4000/lj/2020/05/20/javascript190.html</guid>
        
        
        <category>lj</category>
        
      </item>
    
      <item>
        <title>13.6.3 함수를 반환하는 함수</title>
        <description>&lt;h2 id=&quot;1363-함수를-반환하는-함수&quot;&gt;13.6.3 함수를 반환하는 함수&lt;/h2&gt;

&lt;p&gt;함수를 반환하는 함수는 아마 함수의 가장 난해한 사용법이겠지만, 그만큼 유용하기도 합니다.&lt;br /&gt;
어떤 기능이 있는 것을 만든다는 점에서, 함수를 반환하는 함수를 일종의 3D 프린터라고 생각할 수 있을 겁니다.&lt;br /&gt;
3D 프린터에 입력하는 설계도를 바꾸는 것과 마찬가지로, 반환받는 함수 역시 마음대로 바꿀 수 있습니다.&lt;/p&gt;

&lt;p&gt;sum 함수를 다시 생각해 봅시다.&lt;br /&gt;
이 함수는 각 요소를 더하기 전에 해당 요소를 바꾸는 함수를 받습니다.&lt;br /&gt;
원한다면 sumOfSquares 함수를 만들 수도 있다고 했습니다.&lt;br /&gt;
그런데 상황이 바뀌어서, 그런 함수가 &lt;strong&gt;정말 필요하다&lt;/strong&gt;고 해봅시다.&lt;br /&gt;
&lt;strong&gt;배열과 함수&lt;/strong&gt;를 받는 함수로는 만족스러운 결과를 얻을 수 없고, 배열 &lt;strong&gt;하나&lt;/strong&gt;만 받아서 제곱의 합을 반환하는 함수가 필요합니다(&lt;strong&gt;그런 
상황이 언제 필요할지 잘 떠오르지 않겠지만, API에서 sum 함수를 허용하되 그 함수의 매개변수를 하나만 허용하는 경우가 있을 수 있습니다&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;먼저, 이미 만들어 둔 sum 함수를 활용하는 방법이 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 함수가 전달되지 않았으면 매개변수를 그대로 반환하는 null 함수를 씁니다.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sumOfSquares&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;물론 이렇게 해도 됩니다.&lt;br /&gt;
필요한 것이 함수 하나라면 가장 간단한 해결책이 될 수 있습니다.&lt;br /&gt;
하지만 제곱근의 합을 구하는 함수, 세제곱의 합을 구하는 함수, 하는 식으로 이런 패턴이 계속 반복된다면 어떻게 해야 할까요?&lt;br /&gt;
필요한 함수를 반환하는 함수를 만들어 문제를 해결할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newSummer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;새 함수 newSummer가 반환하는 함수는 단 하나의 매개변수만 받으면서도, 우리가 원하는 중간 함수를 마음대로 쓸 수 있습니다.&lt;br /&gt;
다음 예제를 보십시오.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 함수가 전달되지 않았으면 매개변수를 그대로 반환하는 null 함수를 씁니다.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newSummer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sumOfSquares&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newSummer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sumOfCubes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newSummer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;sumOfSquares&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// return 14&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;sumOfCubes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// return 36&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;NOTE_&lt;/strong&gt;&lt;br /&gt;
이 예제처럼 매개변수 여러 개를 받는 함수를 매개변수 하나만 받는 함수로 바꾸는 것을 &lt;span style=&quot;color:red&quot;&gt;커링(currying)&lt;/span&gt;이라 부릅니다.&lt;br /&gt;
커링이라는 이름은 이 패턴을 만든 미국의 수학자 하스켈 커리(Haskell Curry)의 이름을 딴 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;함수가 함수를 반환하는 패턴은 좀 복잡한 편입니다.&lt;br /&gt;
함수를 반환하는 함수의 예제를 더 보고싶다면 자바스크립트 웹 개발 프레임워크로 널리 쓰이는 &lt;span style=&quot;color:red&quot;&gt;익스프레스(Express)&lt;/span&gt;나 &lt;span style=&quot;color:red&quot;&gt;Koa&lt;/span&gt; 같은 미들웨어 패키지를 살펴보십시오.&lt;br /&gt;
미들웨어는 대개 함수를 반환하는 함수 형태로 만들어집니다.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 May 2020 10:13:00 +0900</pubDate>
        <link>http://localhost:4000/lj/2020/05/20/javascript189.html</link>
        <guid isPermaLink="true">http://localhost:4000/lj/2020/05/20/javascript189.html</guid>
        
        
        <category>lj</category>
        
      </item>
    
      <item>
        <title>13.6.2 함수에 함수 전달</title>
        <description>&lt;h2 id=&quot;1362-함수에-함수-전달&quot;&gt;13.6.2 함수에 함수 전달&lt;/h2&gt;

&lt;p&gt;함수에 함수를 전달하는 예제는 setTimeout과 forEach에서 이미 봤습니다.&lt;br /&gt;
함수에 함수를 전달하는 다른 용도는 &lt;strong&gt;비동기적 프로그래밍&lt;/strong&gt;입니다.&lt;br /&gt;
이런 용도로 전달하는 함수를 보통 &lt;strong&gt;콜백(callback)&lt;/strong&gt;이라 부르며, 약자로 cb를 쓸 때가 많습니다.&lt;br /&gt;
콜백 함수는 자신을 감싼 함수가 실행을 마쳤을 때 호출됩니다.&lt;br /&gt;
콜백은 14장에서 자세히 설명합니다.&lt;/p&gt;

&lt;p&gt;함수에 함수를 전달하는 대표적인 사례가 콜백이긴 하지만, 그게 전부는 아닙니다.&lt;br /&gt;
함수는 동작이고, 함수를 받은 함수는 그 동작을 활용할 수 있습니다.&lt;br /&gt;
배열에 들어있는 숫자를 모두 더하는 단순한 함수 sum이 필요하다고 합시다(배열에 숫자가 아닌 것이 들어있을 때를 대비한 체크나 에러 처리는 생략하겠습니다).&lt;br /&gt;
그런 함수는 쉽게 만들 수 있습니다.&lt;br /&gt;
그런데 숫자의 &lt;strong&gt;제곱(square)&lt;/strong&gt; 을 합해서 반환하는 함수가 필요하다면?&lt;br /&gt;
물론 새 함수 sumOfSquares를 만들어도 됩니다.&lt;br /&gt;
그런데, 세제곱을 합해서 반환하는 함수도 필요하다면?&lt;br /&gt;
이런 상황에서 함수에 함수를 전달한다는 발상이 필요합니다.&lt;br /&gt;
sum을 이렇게 만들었다고 합시다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 함수가 전달되지 않았으면 매개변수를 그대로 반환하는 null 함수를 씁니다.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;                         &lt;span class=&quot;c1&quot;&gt;// 6&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// 14&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 36&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;임의의 함수를 sum에 전달하면 원하는 일을 거의 모두 할 수 있습니다.&lt;br /&gt;
제곱근의 합이 필요한가요?&lt;br /&gt;
아무 문제도 없습니다.&lt;br /&gt;
숫자의 4.233 제곱의 합이 필요한가요?&lt;br /&gt;
바로 할 수 있습니다.&lt;br /&gt;
sum을 바로, 즉 함수를 넘기지 않고 호출해야 할 수도 있습니다.&lt;br /&gt;
함수를 넘기지 않고 sum을 호출하면 매개변수 f의 값은 undefined이므로 에러가 일어납니다.&lt;br /&gt;
에러를 방지하기 위해 함수가 아닌 것은 모두 &lt;strong&gt;‘null 함수’&lt;/strong&gt;, 즉 아무 일도 하지 않는 것으로 바꿉니다.&lt;br /&gt;
즉 null 함수 f에 5를 넘기면 그대로 5를 반환합니다.&lt;br /&gt;
배열의 모든 요소에서 null 함수를 호출하는 것보다는 요소를 그냥 더하는 함수를 한 번 호출하는 등 더 효율적인 방법이 물론 있겠지만, 
이런 식으로 ‘안전한’ 함수를 만들 수 있다는 걸 충분히 이해했을 겁니다.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 May 2020 09:57:00 +0900</pubDate>
        <link>http://localhost:4000/lj/2020/05/20/javascript188.html</link>
        <guid isPermaLink="true">http://localhost:4000/lj/2020/05/20/javascript188.html</guid>
        
        
        <category>lj</category>
        
      </item>
    
      <item>
        <title>13.6.1 배열 안의 함수</title>
        <description>&lt;h2 id=&quot;1361-배열-안의-함수&quot;&gt;13.6.1 배열 안의 함수&lt;/h2&gt;

&lt;p&gt;배열 안에 함수를 쓰는 패턴은 그리 오래되지 않았지만 점점 늘어나고 있고, 특정 상황에서는 대단히 유용합니다.&lt;br /&gt;
자주 하는 일을 한 셋으로 묶는 &lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;파이프라인&lt;/span&gt;&lt;/strong&gt;이 좋은 예입니다.&lt;br /&gt;
&lt;span style=&quot;color:red&quot;&gt;배열을 사용하면 작업 단계를 언제든 쉽게 바꿀 수 있다는 장점이 있습니다.&lt;/span&gt;&lt;br /&gt;
어떤 작업을 빼야 한다면 배열에서 제거하기만 하면 되고, 추가할 작업이 있다면 배열에 추가하기만 하면 됩니다.&lt;/p&gt;

&lt;p&gt;그래픽 변형(transformation)을 예로 들어 봅시다.&lt;br /&gt;
시각화 소프트웨어를 만들 때는 변형을 파이프라인으로 묶어서 적용할 때가 많습니다.&lt;br /&gt;
다음은 자주 사용하는 2차원 변형의 한 예입니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;theta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pipeline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;theta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;theta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;theta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;theta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;   
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 이제 pipeline은 2D 변형에 필요한 함수의 배열입니다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 점 하나를 변형해 봅시다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// p2는 이제 p1을 좌표 원점 기준으로 45도 회전하고(rotate)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 원점에서 2 단위만큼 떨어뜨린 후(scale)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 1단위 오른쪽, 3단위 아래쪽으로 움직인(translate) 점입니다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/learningjs/image106.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 예제는 아주 기본적인 것이지만, 함수를 배열에 저장하는 장점을 엿보기에는 충분하리라고 생각합니다.&lt;br /&gt;
파이프라인의 각 함수를 호출할 때 사용한 문법을 보면, pipeline[i]는 파이프라인의 i번째 요소에 접근하고, 그 요소는 함수로 평가됩니다.&lt;br /&gt;
그러면 괄호를 써서 함수를 호출합니다.&lt;br /&gt;
각 함수에 점(point)을 전달하고, 반환값을 다시 그 점에 할당합니다.&lt;br /&gt;
이런 식으로 그 점에 파이프라인의 각 단계가 모두 적용됩니다.&lt;/p&gt;

&lt;p&gt;파이프라인은 그래픽 애플리케이션에만 쓰이는 건 아닙니다.&lt;br /&gt;
오디오 처리와 과학 및 공학 애플리케이션에서도 자주 사용합니다.&lt;br /&gt;
일정한 순서에 따라 함수를 실행해야 한다면 파이프라인을 써서 효율적으로 일할 수 있습니다.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 May 2020 09:41:00 +0900</pubDate>
        <link>http://localhost:4000/lj/2020/05/20/javascript187.html</link>
        <guid isPermaLink="true">http://localhost:4000/lj/2020/05/20/javascript187.html</guid>
        
        
        <category>lj</category>
        
      </item>
    
      <item>
        <title>13.6 변수로서의 함수</title>
        <description>&lt;h2 id=&quot;136-변수로서의-함수&quot;&gt;13.6 변수로서의 함수&lt;/h2&gt;

&lt;p&gt;프로그래밍을 처음 공부한다면 커피도 한 잔 새로 따르고 잠시 일어나서 기분전환을 하는 게 좋을 수도 있습니다.&lt;br /&gt;
&lt;strong&gt;이 섹션에서 다루는 내용은 초보자들이 종종 헤매는 부분이지만, 꼭 이해해야 하는 중요한 개념입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;숫자나 문자열, 배열은 변수라고 생각해도 별 거부감이 없습니다.&lt;br /&gt;
변수는 데이터라는 생각, 배열이나 객체는 데이터의 모임이라는 생각은 익숙하니까요.&lt;br /&gt;
하지만 변수를 이렇게 이해하면 함수의 잠재력을 완전히 깨닫기 어려울 수 있습니다.&lt;br /&gt;
&lt;strong&gt;함수도 다른 변수와 마찬가지로 이리저리 전달할 수 있다는 사실&lt;/strong&gt;을 떠올리기 어렵기 때문입니다.&lt;br /&gt;
&lt;span style=&quot;color:red&quot;&gt;함수는 능동적인 것&lt;/span&gt;이므로, 우리가 보통 수동적이라고 생각하는 데이터와
연결이 잘 되지 않을 수 있습니다.&lt;br /&gt;
물론 함수는 &lt;strong&gt;호출되었을 때는 능동적&lt;/strong&gt;입니다.&lt;br /&gt;
하지만 &lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;호출하기 전에는 다른 변수와 마찬가지로 수동적&lt;/span&gt;&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;p&gt;이해를 돕는 비유를 하나 소개하겠습니다.&lt;br /&gt;
슈퍼마켓에 과일을 사러 간다고 합시다.&lt;br /&gt;
이때 과일은 데이터라고 생각할 수 있습니다.&lt;br /&gt;
그런데 사과와 바나나를 넣어 스무디를 만들고 싶어져서, 블렌더도 하나 사기로 했습니다.&lt;br /&gt;
블렌더는 함수라고 생각할 수 있습니다.&lt;br /&gt;
과일을 넣으면 스무디를 만드는 능동적인 것이니까요.&lt;br /&gt;
하지만 블렌더는 전원을 연결하고 과일을 넣기 전에는, 과일과 마찬가지로 하나의 물건일 뿐입니다.&lt;br /&gt;
카트에서 꺼내 계산대에 올리고, 결제하고, 쇼핑백에 넣어 집으로 가져옵니다.&lt;br /&gt;
&lt;strong&gt;과일과 다를 게 하나도 없습니다.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;블렌더가 과일과 달라질 때는 전원을 연결하고 과일을 넣었을 때뿐입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;자, 변수가 있을 수 있는 곳에는 함수도 있을 수 있습니다.&lt;br /&gt;
그럼 이 사실은 무엇을 의미할까요?&lt;br /&gt;
간추려 보면, 다음과 같은 일을 할 수 있다는 뜻입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;함수를 가리키는 변수를 만들어 별명을 정할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;배열에 함수를 넣을 수 있습니다. 물론 다른 타입의 데이터와 섞일 수 있습니다.&lt;/li&gt;
  &lt;li&gt;함수를 객체의 프로퍼티로 사용할 수 있습니다(9장에서 설명했습니다).&lt;/li&gt;
  &lt;li&gt;함수를 함수에 전달할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;함수가 함수를 반환할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;함수를 매개변수로 받는 함수를 반환하는 것도 물론 가능합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;머리가 핑핑 도나요?&lt;br /&gt;
이렇게 써 놓으니 너무 추상적으로 보이고, 대체 왜 이런 복잡한 일이 필요한 것인가 의아할 수도 있습니다.&lt;br /&gt;
하지만 이런 유연성은 정말 강력한 특징이고, 매우 자주 사용되기도 합니다.&lt;/p&gt;

&lt;p&gt;우선 가장 이해하기 쉬운 것, 함수에 별명을 붙이는 것부터 생각해 봅시다.&lt;br /&gt;
짧은 코드 안에서 여러 번 호출해야 하는 함수가 있습니다.&lt;br /&gt;
그런데 이 함수의 이름이 너무 길어서 타이핑하기 번거로울 뿐 아니라, 코드를 읽기도 무척 어려울 것 같습니다.&lt;br /&gt;
함수도 데이터이므로 짧은 이름의 변수에 저장할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addThreeSquareAddFiveTakeSquareRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 설마 이런 이름을 짓지는 않겠지만...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 별명을 쓰기 전&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addThreeSquareAddFiveTakeSquareRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;addThreeSquareAddFiveTakeSquareRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;addThreeSquareAddFiveTakeSquareRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 별명을 쓰면 이렇게 바뀝니다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addThreeSquareAddFiveTakeSquareRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;별명을 지을 때 addThreeSquareAddFiveTakeSquareRoot 뒤에 &lt;strong&gt;괄호를 붙이지 않았다&lt;/strong&gt;는 점에 주목하십시오.&lt;br /&gt;
괄호를 붙이면 &lt;strong&gt;함수를 호출&lt;/strong&gt;하고, f에는 addThreeSquareAddFiveTakeSquareRoot 자체가 아니라 호출 결과가 저장됩니다.&lt;br /&gt;
그러면 f를 f(5)처럼 함수로 사용하려 하면 에러가 일어납니다.&lt;br /&gt;
f는 함수가 아니고 호출할 수 있는 것은 함수뿐이니까요.&lt;/p&gt;

&lt;p&gt;물론 이 예제는 완전히 인위적이고, 실제 이런 상황에 처할 일은 거의 없을 겁니다.&lt;br /&gt;
하지만 20장에서 배울 노드 개발에서 자주 쓰이는 &lt;strong&gt;네임스페이스&lt;/strong&gt;에는 계속 쓰는 패턴입니다.&lt;br /&gt;
다음 예제를 보십시오.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;math-money&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// require는 라이브러리를 불러오는&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// 노드 함수입니다.&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oneDollar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Dollar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Money.Dollar도 길게 느껴지면 이렇게 해도 됩니다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dallar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Dollar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;twoDollars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dollar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// oneDollar와 twoDollars는 같은 타입의 인스턴스입니다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서는 단순히 &lt;code class=&quot;highlighter-rouge&quot;&gt;Money.Dollar&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dollar&lt;/code&gt;로 줄였을 뿐 &lt;strong&gt;별명&lt;/strong&gt;을 붙였다고 할 정도는 아닙니다.&lt;br /&gt;
하지만 이해하기 쉽고 코드 길이도 줄어드니 이렇게 할 이유는 충분합니다.&lt;/p&gt;

&lt;p&gt;본격적인 문제에 앞서 정신적인 스트레칭을 했다고 할 수 있으니, 이제 더 추상적으로 생각해 봅시다.&lt;/p&gt;
</description>
        <pubDate>Tue, 19 May 2020 23:45:00 +0900</pubDate>
        <link>http://localhost:4000/lj/2020/05/19/javascript186.html</link>
        <guid isPermaLink="true">http://localhost:4000/lj/2020/05/19/javascript186.html</guid>
        
        
        <category>lj</category>
        
      </item>
    
      <item>
        <title>13.5 IIFE와 비동기적 코드</title>
        <description>&lt;h2 id=&quot;135-iife와-비동기적-코드&quot;&gt;13.5 IIFE와 비동기적 코드&lt;/h2&gt;

&lt;p&gt;6장에서 IIFE(즉시 호출하는 함수 표현식)에 대해 알아봤습니다.&lt;br /&gt;
IIFE를 이용해서 클로저를 만들 수 있다는 것도 알았습니다.&lt;br /&gt;
이제 &lt;strong&gt;IIFE로 비동기적 코드를 처리하는 중요한 예제&lt;/strong&gt;를 하나 살펴봅시다.&lt;br /&gt;
이 예제는 14장에서 다시 살펴보게 될 겁니다.&lt;/p&gt;

&lt;p&gt;IIFE를 사용하는 사례 중 하나는 비동기적 코드가 정확히 동작할 수 있도록 새 변수를 새 스코프에 만드는 겁니다.&lt;br /&gt;
5초에서 시작하고 카운트다운이 끝나면 “go”를 표시하는 고전적 타이머 예제를 만들어 봅시다.&lt;br /&gt;
이 코드는 자바스크립트의 내장 함수 &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;을 사용합니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;은 첫 번째 매개변수인 함수를 두 번째 매개변수인 밀리초만큼 기다렸다가 실행합니다.&lt;br /&gt;
예를 들어 1.5초 뒤에 hello를 출력한다면 다음과 같이 합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;필요한 것은 다 알았으니 카운트다운 함수를 만들어 봅시다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;go!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 let 대신 var를 쓴 이유는 IIFE가 중요하던 시점으로 돌아가서 왜 중요했는지 이해하기 위해서입니다.&lt;br /&gt;
5, 4, 3, 2, 1, go!가 출력될 거라 예상했다면, &lt;strong&gt;아쉽지만 틀렸습니다.&lt;/strong&gt;&lt;br /&gt;
-1이 여섯 번 출력될 뿐입니다.&lt;br /&gt;
어떻게 된 걸까요?&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;에 전달된 함수가 루프 안에서 실행되지 않고 루프가 종료된 뒤에 실행됐기 때문입니다.&lt;br /&gt;
따라서 루프의 i는 5에서 시작해 -1로 끝납니다.&lt;br /&gt;
&lt;strong&gt;그리고 -1이 되기 전에는 콜백 함수는 전혀 호출되지 않습니다.&lt;/strong&gt;&lt;br /&gt;
따라서 콜백 함수가 호출되는 시점에서 i의 값은 -1입니다.&lt;/p&gt;

&lt;p&gt;let을 사용해 블록 수준 스코프를 만들면 이 문제는 해결되지만, 비동기적 프로그래밍에 익숙하지 않다면 아 되는구나, 하고 넘어가지 말고 
&lt;strong&gt;이 예제를 정확히 이해&lt;/strong&gt;해야 합니다.&lt;br /&gt;
좀 어려울 수도 있지만, 14장의 주제인 비동기적 실행을 이해하기 위해 꼭 필요합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;블록 스코프 변수&lt;/strong&gt;가 도입되기 전에는 이런 문제를 해결하기 위해 함수를 하나 더 썼습니다.&lt;br /&gt;
함수를 하나 더 쓰면 스코프가 새로 만들어지고 각 단계에서 i의 값이 클로저에 &lt;strong&gt;캡처&lt;/strong&gt;됩니다.&lt;br /&gt;
이름 붙은 함수를 쓰는 예제를 먼저 봅시다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loopBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;go!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;loopBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;루프의 각 단계에서 loopBody 함수가 호출됩니다.&lt;br /&gt;
&lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;자바스크립트는 매개변수를 값으로 넘깁니다.&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;따라서 루프의 각 단계에서 함수에 전달되는 것은 i가 아니라 i의 값입니다.&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
즉 처음에는 5가, 두 번째에는 4가 전달됩니다.&lt;br /&gt;
같은 변수 이름 i를 썼지만, 이게 중요한 건 아닙니다.&lt;br /&gt;
중요한 것은 스코프 일곱 개가 만들어졌고 변수도 일곱 개 만들어졌다는 겁니다(하나는 외부 스코프, 나머지 여섯 개는 loopBody를 호출할 때마다).&lt;/p&gt;

&lt;p&gt;하지만 루프에 한 번 쓰고 말 함수에 일일이 이름을 붙이는 건 &lt;strong&gt;성가신 일&lt;/strong&gt;입니다.&lt;br /&gt;
익명 함수를 만들어 즉시 호출하는 IIFE를 사용하는 게 더 낫습니다.&lt;br /&gt;
이전 예제를 IIFE를 써서 고쳐 쓰면 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;go!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;괄호가 아주 많군요!&lt;br /&gt;
하지만 이 코드를 살펴보면, 매개변수 하나를 받는 함수를 만들어서 루프의 각 단계에서 호출한 것과
완전히 똑같음을 알 수 있습니다.&lt;br /&gt;
즉시 호출하는 함수 표현식을 나타내는 다음 예제를 보십시오.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/learningjs/image105.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;블록 스코프 변수를 사용하면 스코프 하나 때문에 함수를 새로 만드는 번거로운 일을 하지 않아도 됩니다.&lt;br /&gt;
블록 스코프 변수를 사용하면 이 예제를 극도로 단순화할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;go!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이번에는 &lt;strong&gt;for 루프 안에 let 키워드&lt;/strong&gt;를 썼습니다.&lt;br /&gt;
let 키워드를 for 루프 바깥에 썼다면 똑같은 문제가 발생했을 겁니다.&lt;br /&gt;
&lt;span style=&quot;color:red&quot;&gt;let 키워드를 이런 식으로 사용하면 자바스크립트는 루프의 단계마다 변수 i의 복사본을 새로 만듭니다.&lt;/span&gt;&lt;br /&gt;
따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;에 전달한 함수가 실행될 때는 독립 스코프에서 변수를 받습니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 19 May 2020 18:12:00 +0900</pubDate>
        <link>http://localhost:4000/lj/2020/05/19/javascript185.html</link>
        <guid isPermaLink="true">http://localhost:4000/lj/2020/05/19/javascript185.html</guid>
        
        
        <category>lj</category>
        
      </item>
    
      <item>
        <title>13.4.1 함수도 객체다</title>
        <description>&lt;h2 id=&quot;1341-함수도-객체다&quot;&gt;13.4.1 함수도 객체다&lt;/h2&gt;

&lt;p&gt;자바스크립트 함수는 Function 객체의 인스턴스입니다.&lt;br /&gt;
현실적으로 이 사실은 함수를 사용하는 데 아무 영향도 없습니다.&lt;br /&gt;
그저 알아두면 좋은 토막 상식이라고 생각해도 됩니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;typeof v&lt;/code&gt;를 사용하면 v가 함수일 때 “function”이 반환된다는 사실은 알아둘 만합니다.&lt;br /&gt;
v가 배열일 때 “object”가 반환되는 것과 비교하면 매우 상식적인 반응입니다.&lt;br /&gt;
일단 우리가 활용할 수 있는 사실은, typeof v로 함수인지 아닌지는 확실히 알 수 있다는 겁니다.&lt;br /&gt;
하지만 v가 함수더라도 &lt;code class=&quot;highlighter-rouge&quot;&gt;v instanceof Object&lt;/code&gt;는 여전히 true를 반환하므로, 변수가 함수인지 아닌지 확인하고 싶다면 먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;typeof&lt;/code&gt;를 써보는 편이 좋습니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 19 May 2020 18:03:00 +0900</pubDate>
        <link>http://localhost:4000/lj/2020/05/19/javascript184.html</link>
        <guid isPermaLink="true">http://localhost:4000/lj/2020/05/19/javascript184.html</guid>
        
        
        <category>lj</category>
        
      </item>
    
      <item>
        <title>13.4 그래서?</title>
        <description>&lt;h2 id=&quot;134-그래서&quot;&gt;13.4 그래서?&lt;/h2&gt;

&lt;p&gt;이제 함수의 세 가지 측면, 즉&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;서브루틴&lt;/li&gt;
  &lt;li&gt;값을 반환하는 서브루틴&lt;/li&gt;
  &lt;li&gt;순수한 함수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;라는 측면을 살펴봤으니 잠시 멈추고, 이렇게 구분하는 것에 어떤 의미가 있는지 생각해 봐야 합니다.&lt;/p&gt;

&lt;p&gt;필자가 이 장을 쓰면서 의도한 것은 자바스크립트의 문법을 설명하는 것이 아니라 독자 여러분이 &lt;strong&gt;왜?&lt;/strong&gt; 라는 의문을 갖게 하려는 것입니다.&lt;br /&gt;
왜 함수를 사용할까요?&lt;br /&gt;
함수를 &lt;strong&gt;서브루틴이라는 관점&lt;/strong&gt;에서 보면 그 의문에 대한 한 가지 답을 얻습니다.&lt;br /&gt;
&lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;반복을 없애는 거죠.&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
서브루틴을 쓰면 자주 사용하는 동작을 하나로 묶을 수 있다는 매우 분명한 장점이 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;NOTE_&lt;/strong&gt;&lt;br /&gt;
코드를 하나로 묶어서 반복을 피한다는 개념은 너무나 중요해서, DRY(don’t repeat yourself)라는 약어가 새로 생겼을 정도입니다.&lt;br /&gt;
문법적으로 정확한 표현은 아닐 수 있지만, 간혹 사람들이 코드에 대해 얘기하면서 그런 표현을 쓰는걸 볼 수 있습니다.&lt;br /&gt;
누군가가 당신의 코드를 보고 “This code here could be more DRY.” 라고 얘기한다면, 그건 당신의 코드에 불필요하게 반복되는 부분이 있다는 뜻입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;순수한 함수&lt;/strong&gt;는 조금 더 복잡한 문제이며, 왜? 라는 의문에 대한 답도 더 추상적인 형태입니다.&lt;br /&gt;
“그렇게 하면 프로그램이 좀 더 수학과 비슷해지니까” 라고 대답할 수도 있겠지만, 그렇게 대답하면 “프로그램이 수학과 비슷해지면 뭐가 좋은데?”라는 반문이 따라올 겁니다.&lt;br /&gt;
&lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;“순수한 함수를 쓰면 코드를 테스트하기 쉽고, 이해하기 쉽고, 재사용하기도 더 쉬우니까”&lt;/span&gt;&lt;/strong&gt; 처럼 대답하는 편이 좋습니다.&lt;/p&gt;

&lt;p&gt;함수가 상황에 따라 다른 값을 반환하거나 부작용이 있다면 그 함수는 &lt;strong&gt;컨텍스트에 좌우되는 함수&lt;/strong&gt;입니다.&lt;br /&gt;
어떤 함수가 정말 유용하더라도 부수 효과가 있다면, 그리고 그 함수가 쓰이던 프로그램이 아닌 프로그램에서 사용하려 한다면 문제를 일으킬 수 있습니다.&lt;br /&gt;
&lt;strong&gt;99%는 제대로 동작하다가 1%의 상황에서 버그를 일으키는 상황은 더 심각합니다.&lt;/strong&gt;&lt;br /&gt;
프로그래머라면 누구나 깨닫고 있겠지만, 가장 악질적인 버그는 숨어 있는 버그입니다.&lt;br /&gt;
이런 버그는 오랫동안 발견되지 않기 때문에, 문제가 있다는 걸 알게 되더라도 찾기가 정말 어렵습니다.&lt;/p&gt;

&lt;p&gt;필자가 순수한 함수를 권장하는 건지 궁금하다면, 답은 그렇다 입니다.&lt;br /&gt;
&lt;strong&gt;항상 순수한 함수를 쓰는 습관을 들이는&lt;/strong&gt; 편이 좋습니다.&lt;br /&gt;
‘습관’이라고 한 건, 가끔은 함수에 부수 효과가 있더라도 그냥 쓰는 편이 훨씬 쉬울 때가 있기 때문입니다.&lt;br /&gt;
초보 프로그래머라면 그런 때가 더 많을 겁니다.&lt;br /&gt;
그러지 말라는 건 아닙니다.&lt;br /&gt;
단지, 잠시 멈추고 순수한 함수를 사용하는 방법이 있는지 생각해 보라는 말입니다.&lt;br /&gt;
시간이 흐르면, 자연스럽게 순수한 함수를 더 많이 쓰게 될 겁니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9장에서 설명한 객체지향 프로그래밍은 스코프를 밀접하게 관리해서 함수의 부수 효과를 제어할 수 있습니다.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 19 May 2020 16:14:00 +0900</pubDate>
        <link>http://localhost:4000/lj/2020/05/19/javascript183.html</link>
        <guid isPermaLink="true">http://localhost:4000/lj/2020/05/19/javascript183.html</guid>
        
        
        <category>lj</category>
        
      </item>
    
  </channel>
</rss>
